
003_RTOS_Devlopment_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001874  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08101b14  08101b14  00011b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101b80  08101b80  00011b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101b84  08101b84  00011b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  10000000  08101b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004068  10000060  08101be8  00020060  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100040c8  08101be8  000240c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002bee  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000009f5  00000000  00000000  00022cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000270  00000000  00000000  000236b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000001ae  00000000  00000000  00023920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030b4c  00000000  00000000  00023ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000031cb  00000000  00000000  0005461a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010e37e  00000000  00000000  000577e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000f38  00000000  00000000  00165b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000070  00000000  00000000  00166a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000060 	.word	0x10000060
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08101afc 	.word	0x08101afc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000064 	.word	0x10000064
 81002dc:	08101afc 	.word	0x08101afc

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <led_init>:
#include "led.h"

#define GPIOIEN				   	(1U<<8)
#define LEDA_PIN				(1U<<12)
void led_init(void){
 8100380:	b480      	push	{r7}
 8100382:	af00      	add	r7, sp, #0
	//Enable LED PI12 Clock
	RCC->AHB4ENR |= GPIOIEN;
 8100384:	4b0b      	ldr	r3, [pc, #44]	; (81003b4 <led_init+0x34>)
 8100386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810038a:	4a0a      	ldr	r2, [pc, #40]	; (81003b4 <led_init+0x34>)
 810038c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	//Set the pin mode as output
	GPIOI->MODER |= (1U<<24);
 8100394:	4b08      	ldr	r3, [pc, #32]	; (81003b8 <led_init+0x38>)
 8100396:	681b      	ldr	r3, [r3, #0]
 8100398:	4a07      	ldr	r2, [pc, #28]	; (81003b8 <led_init+0x38>)
 810039a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810039e:	6013      	str	r3, [r2, #0]
	GPIOI->MODER &= ~(1U<<25);
 81003a0:	4b05      	ldr	r3, [pc, #20]	; (81003b8 <led_init+0x38>)
 81003a2:	681b      	ldr	r3, [r3, #0]
 81003a4:	4a04      	ldr	r2, [pc, #16]	; (81003b8 <led_init+0x38>)
 81003a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 81003aa:	6013      	str	r3, [r2, #0]
}
 81003ac:	bf00      	nop
 81003ae:	46bd      	mov	sp, r7
 81003b0:	bc80      	pop	{r7}
 81003b2:	4770      	bx	lr
 81003b4:	58024400 	.word	0x58024400
 81003b8:	58022000 	.word	0x58022000

081003bc <park_mode>:
#define ROUND_ROBIN_PERIOD		10 //MS

uint32_t cntTask0, cntTask1, cntTask2;
int32_t semaphore1, semaphore2;

void park_mode(){
 81003bc:	b580      	push	{r7, lr}
 81003be:	af00      	add	r7, sp, #0
	printf("Park Mode\n\r");
 81003c0:	4802      	ldr	r0, [pc, #8]	; (81003cc <park_mode+0x10>)
 81003c2:	f000 fd2d 	bl	8100e20 <iprintf>
}
 81003c6:	bf00      	nop
 81003c8:	bd80      	pop	{r7, pc}
 81003ca:	bf00      	nop
 81003cc:	08101b14 	.word	0x08101b14

081003d0 <drive_mode>:
	printf("Reverse Mode\n\r");
}
void neutral_mode(){
	printf("Neutral Mode\n\r");
}
void drive_mode(){
 81003d0:	b580      	push	{r7, lr}
 81003d2:	af00      	add	r7, sp, #0
	printf("Drive Mode\n\r");
 81003d4:	4802      	ldr	r0, [pc, #8]	; (81003e0 <drive_mode+0x10>)
 81003d6:	f000 fd23 	bl	8100e20 <iprintf>
}
 81003da:	bf00      	nop
 81003dc:	bd80      	pop	{r7, pc}
 81003de:	bf00      	nop
 81003e0:	08101b40 	.word	0x08101b40

081003e4 <task0>:

void task0(){
 81003e4:	b580      	push	{r7, lr}
 81003e6:	af00      	add	r7, sp, #0
	while(1){
		cntTask0++;
 81003e8:	4b08      	ldr	r3, [pc, #32]	; (810040c <task0+0x28>)
 81003ea:	681b      	ldr	r3, [r3, #0]
 81003ec:	3301      	adds	r3, #1
 81003ee:	4a07      	ldr	r2, [pc, #28]	; (810040c <task0+0x28>)
 81003f0:	6013      	str	r3, [r2, #0]
		rtosSemaphoreCntTake(&semaphore1);
 81003f2:	4807      	ldr	r0, [pc, #28]	; (8100410 <task0+0x2c>)
 81003f4:	f000 fa53 	bl	810089e <rtosSemaphoreCntTake>
		drive_mode();
 81003f8:	f7ff ffea 	bl	81003d0 <drive_mode>
		rtosSemaphoreCntGive(&semaphore1);
 81003fc:	4804      	ldr	r0, [pc, #16]	; (8100410 <task0+0x2c>)
 81003fe:	f000 fa3c 	bl	810087a <rtosSemaphoreCntGive>
		//rtosThreadYield();
		delay(7);
 8100402:	2007      	movs	r0, #7
 8100404:	f000 fb22 	bl	8100a4c <delay>
		cntTask0++;
 8100408:	e7ee      	b.n	81003e8 <task0+0x4>
 810040a:	bf00      	nop
 810040c:	1000007c 	.word	0x1000007c
 8100410:	10000088 	.word	0x10000088

08100414 <task1>:
	}
}

void task1(){
 8100414:	b480      	push	{r7}
 8100416:	af00      	add	r7, sp, #0
	while(1){
		cntTask1++;
 8100418:	4b02      	ldr	r3, [pc, #8]	; (8100424 <task1+0x10>)
 810041a:	681b      	ldr	r3, [r3, #0]
 810041c:	3301      	adds	r3, #1
 810041e:	4a01      	ldr	r2, [pc, #4]	; (8100424 <task1+0x10>)
 8100420:	6013      	str	r3, [r2, #0]
 8100422:	e7f9      	b.n	8100418 <task1+0x4>
 8100424:	10000080 	.word	0x10000080

08100428 <task2>:
		//rtosThreadYield();
	}
}

void task2(){
 8100428:	b580      	push	{r7, lr}
 810042a:	af00      	add	r7, sp, #0
	while(1){
		cntTask2++;
 810042c:	4b08      	ldr	r3, [pc, #32]	; (8100450 <task2+0x28>)
 810042e:	681b      	ldr	r3, [r3, #0]
 8100430:	3301      	adds	r3, #1
 8100432:	4a07      	ldr	r2, [pc, #28]	; (8100450 <task2+0x28>)
 8100434:	6013      	str	r3, [r2, #0]
		//rtosThreadYield();
		rtosSemaphoreCntTake(&semaphore1);
 8100436:	4807      	ldr	r0, [pc, #28]	; (8100454 <task2+0x2c>)
 8100438:	f000 fa31 	bl	810089e <rtosSemaphoreCntTake>
		park_mode();
 810043c:	f7ff ffbe 	bl	81003bc <park_mode>
		rtosSemaphoreCntGive(&semaphore1);
 8100440:	4804      	ldr	r0, [pc, #16]	; (8100454 <task2+0x2c>)
 8100442:	f000 fa1a 	bl	810087a <rtosSemaphoreCntGive>
		//rtosThreadYield();
		delay(3);
 8100446:	2003      	movs	r0, #3
 8100448:	f000 fb00 	bl	8100a4c <delay>
		cntTask2++;
 810044c:	e7ee      	b.n	810042c <task2+0x4>
 810044e:	bf00      	nop
 8100450:	10000084 	.word	0x10000084
 8100454:	10000088 	.word	0x10000088

08100458 <main>:
	}
}

int main(void)
{
 8100458:	b580      	push	{r7, lr}
 810045a:	af00      	add	r7, sp, #0
	led_init();
 810045c:	f7ff ff90 	bl	8100380 <led_init>
	uart_tx_init();
 8100460:	f000 fb84 	bl	8100b6c <uart_tx_init>
	tim2_1MS_tick_init();
 8100464:	f000 fb3a 	bl	8100adc <tim2_1MS_tick_init>
//		delay(4);
//		led_off();
//		printf("Hi from M4\n\r");
//		delay(4);
//	}
	rtosSempahoreInit(&semaphore1, 1);
 8100468:	2101      	movs	r1, #1
 810046a:	4810      	ldr	r0, [pc, #64]	; (81004ac <main+0x54>)
 810046c:	f000 f9f8 	bl	8100860 <rtosSempahoreInit>
	rtosSempahoreInit(&semaphore2, 0);
 8100470:	2100      	movs	r1, #0
 8100472:	480f      	ldr	r0, [pc, #60]	; (81004b0 <main+0x58>)
 8100474:	f000 f9f4 	bl	8100860 <rtosSempahoreInit>
	rtosKernelClkInit();
 8100478:	f000 f972 	bl	8100760 <rtosKernelClkInit>
	//rtosKernelAddThread(&task0, &task1, &task2);
	rtosKernelAddThread(&task0, 0);
 810047c:	2100      	movs	r1, #0
 810047e:	480d      	ldr	r0, [pc, #52]	; (81004b4 <main+0x5c>)
 8100480:	f000 f946 	bl	8100710 <rtosKernelAddThread>
	rtosKernelAddThread(&task1, 1);
 8100484:	2101      	movs	r1, #1
 8100486:	480c      	ldr	r0, [pc, #48]	; (81004b8 <main+0x60>)
 8100488:	f000 f942 	bl	8100710 <rtosKernelAddThread>
	rtosKernelAddThread(&task2, 2);
 810048c:	2102      	movs	r1, #2
 810048e:	480b      	ldr	r0, [pc, #44]	; (81004bc <main+0x64>)
 8100490:	f000 f93e 	bl	8100710 <rtosKernelAddThread>
	rtosKernelAddThread(&task2, 3);
 8100494:	2103      	movs	r1, #3
 8100496:	4809      	ldr	r0, [pc, #36]	; (81004bc <main+0x64>)
 8100498:	f000 f93a 	bl	8100710 <rtosKernelAddThread>
	rtosKernelAddThread(&task2, 4);
 810049c:	2104      	movs	r1, #4
 810049e:	4807      	ldr	r0, [pc, #28]	; (81004bc <main+0x64>)
 81004a0:	f000 f936 	bl	8100710 <rtosKernelAddThread>
	rtosKernelLaunch(ROUND_ROBIN_PERIOD);
 81004a4:	200a      	movs	r0, #10
 81004a6:	f000 f967 	bl	8100778 <rtosKernelLaunch>
	while(1){
 81004aa:	e7fe      	b.n	81004aa <main+0x52>
 81004ac:	10000088 	.word	0x10000088
 81004b0:	1000008c 	.word	0x1000008c
 81004b4:	081003e5 	.word	0x081003e5
 81004b8:	08100415 	.word	0x08100415
 81004bc:	08100429 	.word	0x08100429

081004c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81004c0:	b480      	push	{r7}
 81004c2:	b083      	sub	sp, #12
 81004c4:	af00      	add	r7, sp, #0
 81004c6:	4603      	mov	r3, r0
 81004c8:	6039      	str	r1, [r7, #0]
 81004ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81004cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81004d0:	2b00      	cmp	r3, #0
 81004d2:	db0a      	blt.n	81004ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81004d4:	683b      	ldr	r3, [r7, #0]
 81004d6:	b2da      	uxtb	r2, r3
 81004d8:	490c      	ldr	r1, [pc, #48]	; (810050c <__NVIC_SetPriority+0x4c>)
 81004da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81004de:	0112      	lsls	r2, r2, #4
 81004e0:	b2d2      	uxtb	r2, r2
 81004e2:	440b      	add	r3, r1
 81004e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81004e8:	e00a      	b.n	8100500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81004ea:	683b      	ldr	r3, [r7, #0]
 81004ec:	b2da      	uxtb	r2, r3
 81004ee:	4908      	ldr	r1, [pc, #32]	; (8100510 <__NVIC_SetPriority+0x50>)
 81004f0:	88fb      	ldrh	r3, [r7, #6]
 81004f2:	f003 030f 	and.w	r3, r3, #15
 81004f6:	3b04      	subs	r3, #4
 81004f8:	0112      	lsls	r2, r2, #4
 81004fa:	b2d2      	uxtb	r2, r2
 81004fc:	440b      	add	r3, r1
 81004fe:	761a      	strb	r2, [r3, #24]
}
 8100500:	bf00      	nop
 8100502:	370c      	adds	r7, #12
 8100504:	46bd      	mov	sp, r7
 8100506:	bc80      	pop	{r7}
 8100508:	4770      	bx	lr
 810050a:	bf00      	nop
 810050c:	e000e100 	.word	0xe000e100
 8100510:	e000ed00 	.word	0xe000ed00

08100514 <rtosKernelThreadStackInit>:
int32_t threadStack[MAX_NUM_OF_THREADS][STACK_SIZE];

void rtosSchedulerLaunch();
void rtosSchedulerSwitch();

void rtosKernelThreadStackInit(int idx){
 8100514:	b480      	push	{r7}
 8100516:	b083      	sub	sp, #12
 8100518:	af00      	add	r7, sp, #0
 810051a:	6078      	str	r0, [r7, #4]
	//Defining the current stack pointer for the particular thread
	tcbArr[idx].ptrStack = &threadStack[idx][STACK_SIZE-16]; //Minus 16 as 16 register are saved in the stack placing the head of the stack at size - 16
 810051c:	687b      	ldr	r3, [r7, #4]
 810051e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8100522:	fb02 f303 	mul.w	r3, r2, r3
 8100526:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 810052a:	4a5f      	ldr	r2, [pc, #380]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 810052c:	441a      	add	r2, r3
 810052e:	495f      	ldr	r1, [pc, #380]	; (81006ac <rtosKernelThreadStackInit+0x198>)
 8100530:	687b      	ldr	r3, [r7, #4]
 8100532:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	threadStack[idx][STACK_SIZE-1] = (1U<<24); //Program status register value remains at the tail of the stack. Setting 21 bit of PSR to 1 to enable thumb mode
 8100536:	4a5c      	ldr	r2, [pc, #368]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100538:	687b      	ldr	r3, [r7, #4]
 810053a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810053e:	fb01 f303 	mul.w	r3, r1, r3
 8100542:	4413      	add	r3, r2
 8100544:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8100548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810054c:	601a      	str	r2, [r3, #0]

	//Defining other optional registers
	//First all the registers required to save the context
	threadStack[idx][STACK_SIZE-3] = 0xBBBBBBBB; //R14(LR)
 810054e:	4a56      	ldr	r2, [pc, #344]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100550:	687b      	ldr	r3, [r7, #4]
 8100552:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100556:	fb01 f303 	mul.w	r3, r1, r3
 810055a:	4413      	add	r3, r2
 810055c:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8100560:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100564:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-4] = 0xBBBBBBBB; //R12
 8100566:	4a50      	ldr	r2, [pc, #320]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100568:	687b      	ldr	r3, [r7, #4]
 810056a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810056e:	fb01 f303 	mul.w	r3, r1, r3
 8100572:	4413      	add	r3, r2
 8100574:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8100578:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 810057c:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-5] = 0xBBBBBBBB; //R3
 810057e:	4a4a      	ldr	r2, [pc, #296]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100580:	687b      	ldr	r3, [r7, #4]
 8100582:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100586:	fb01 f303 	mul.w	r3, r1, r3
 810058a:	4413      	add	r3, r2
 810058c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8100590:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100594:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-6] = 0xBBBBBBBB; //R2
 8100596:	4a44      	ldr	r2, [pc, #272]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100598:	687b      	ldr	r3, [r7, #4]
 810059a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810059e:	fb01 f303 	mul.w	r3, r1, r3
 81005a2:	4413      	add	r3, r2
 81005a4:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 81005a8:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005ac:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-7] = 0xBBBBBBBB; //R1
 81005ae:	4a3e      	ldr	r2, [pc, #248]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 81005b0:	687b      	ldr	r3, [r7, #4]
 81005b2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005b6:	fb01 f303 	mul.w	r3, r1, r3
 81005ba:	4413      	add	r3, r2
 81005bc:	f203 6324 	addw	r3, r3, #1572	; 0x624
 81005c0:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005c4:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-8] = 0xBBBBBBBB; //R0
 81005c6:	4a38      	ldr	r2, [pc, #224]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 81005c8:	687b      	ldr	r3, [r7, #4]
 81005ca:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005ce:	fb01 f303 	mul.w	r3, r1, r3
 81005d2:	4413      	add	r3, r2
 81005d4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 81005d8:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005dc:	601a      	str	r2, [r3, #0]
	//Other core registers in Arm Cortex M4
	threadStack[idx][STACK_SIZE-9] = 0xBBBBBBBB; //R11
 81005de:	4a32      	ldr	r2, [pc, #200]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 81005e0:	687b      	ldr	r3, [r7, #4]
 81005e2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005e6:	fb01 f303 	mul.w	r3, r1, r3
 81005ea:	4413      	add	r3, r2
 81005ec:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 81005f0:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005f4:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-10] = 0xBBBBBBBB;//R10
 81005f6:	4a2c      	ldr	r2, [pc, #176]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 81005f8:	687b      	ldr	r3, [r7, #4]
 81005fa:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005fe:	fb01 f303 	mul.w	r3, r1, r3
 8100602:	4413      	add	r3, r2
 8100604:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8100608:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 810060c:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-11] = 0xBBBBBBBB;//R9
 810060e:	4a26      	ldr	r2, [pc, #152]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100610:	687b      	ldr	r3, [r7, #4]
 8100612:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100616:	fb01 f303 	mul.w	r3, r1, r3
 810061a:	4413      	add	r3, r2
 810061c:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8100620:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100624:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-12] = 0xBBBBBBBB;//R8
 8100626:	4a20      	ldr	r2, [pc, #128]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100628:	687b      	ldr	r3, [r7, #4]
 810062a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810062e:	fb01 f303 	mul.w	r3, r1, r3
 8100632:	4413      	add	r3, r2
 8100634:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8100638:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 810063c:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-13] = 0xBBBBBBBB;//R7
 810063e:	4a1a      	ldr	r2, [pc, #104]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100640:	687b      	ldr	r3, [r7, #4]
 8100642:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100646:	fb01 f303 	mul.w	r3, r1, r3
 810064a:	4413      	add	r3, r2
 810064c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8100650:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100654:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-14] = 0xBBBBBBBB;//R6
 8100656:	4a14      	ldr	r2, [pc, #80]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100658:	687b      	ldr	r3, [r7, #4]
 810065a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810065e:	fb01 f303 	mul.w	r3, r1, r3
 8100662:	4413      	add	r3, r2
 8100664:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8100668:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 810066c:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-15] = 0xBBBBBBBB;//R5
 810066e:	4a0e      	ldr	r2, [pc, #56]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100670:	687b      	ldr	r3, [r7, #4]
 8100672:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100676:	fb01 f303 	mul.w	r3, r1, r3
 810067a:	4413      	add	r3, r2
 810067c:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8100680:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100684:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-16] = 0xBBBBBBBB;//R4
 8100686:	4a08      	ldr	r2, [pc, #32]	; (81006a8 <rtosKernelThreadStackInit+0x194>)
 8100688:	687b      	ldr	r3, [r7, #4]
 810068a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810068e:	fb01 f303 	mul.w	r3, r1, r3
 8100692:	4413      	add	r3, r2
 8100694:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8100698:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 810069c:	601a      	str	r2, [r3, #0]
}
 810069e:	bf00      	nop
 81006a0:	370c      	adds	r7, #12
 81006a2:	46bd      	mov	sp, r7
 81006a4:	bc80      	pop	{r7}
 81006a6:	4770      	bx	lr
 81006a8:	100000ec 	.word	0x100000ec
 81006ac:	10000098 	.word	0x10000098

081006b0 <initThreadNext>:

void initThreadNext(){
 81006b0:	b480      	push	{r7}
 81006b2:	b083      	sub	sp, #12
 81006b4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i< threadsCreated; i++){
 81006b6:	2300      	movs	r3, #0
 81006b8:	607b      	str	r3, [r7, #4]
 81006ba:	e019      	b.n	81006f0 <initThreadNext+0x40>
		if(i==threadsCreated-1){
 81006bc:	4b12      	ldr	r3, [pc, #72]	; (8100708 <initThreadNext+0x58>)
 81006be:	681b      	ldr	r3, [r3, #0]
 81006c0:	3b01      	subs	r3, #1
 81006c2:	687a      	ldr	r2, [r7, #4]
 81006c4:	429a      	cmp	r2, r3
 81006c6:	d106      	bne.n	81006d6 <initThreadNext+0x26>
			tcbArr[i].nextThread = &tcbArr[0];
 81006c8:	4a10      	ldr	r2, [pc, #64]	; (810070c <initThreadNext+0x5c>)
 81006ca:	687b      	ldr	r3, [r7, #4]
 81006cc:	00db      	lsls	r3, r3, #3
 81006ce:	4413      	add	r3, r2
 81006d0:	4a0e      	ldr	r2, [pc, #56]	; (810070c <initThreadNext+0x5c>)
 81006d2:	605a      	str	r2, [r3, #4]
 81006d4:	e009      	b.n	81006ea <initThreadNext+0x3a>
		} else {
			tcbArr[i].nextThread = &tcbArr[i+1];
 81006d6:	687b      	ldr	r3, [r7, #4]
 81006d8:	3301      	adds	r3, #1
 81006da:	00db      	lsls	r3, r3, #3
 81006dc:	4a0b      	ldr	r2, [pc, #44]	; (810070c <initThreadNext+0x5c>)
 81006de:	441a      	add	r2, r3
 81006e0:	490a      	ldr	r1, [pc, #40]	; (810070c <initThreadNext+0x5c>)
 81006e2:	687b      	ldr	r3, [r7, #4]
 81006e4:	00db      	lsls	r3, r3, #3
 81006e6:	440b      	add	r3, r1
 81006e8:	605a      	str	r2, [r3, #4]
	for(uint32_t i = 0; i< threadsCreated; i++){
 81006ea:	687b      	ldr	r3, [r7, #4]
 81006ec:	3301      	adds	r3, #1
 81006ee:	607b      	str	r3, [r7, #4]
 81006f0:	4b05      	ldr	r3, [pc, #20]	; (8100708 <initThreadNext+0x58>)
 81006f2:	681b      	ldr	r3, [r3, #0]
 81006f4:	687a      	ldr	r2, [r7, #4]
 81006f6:	429a      	cmp	r2, r3
 81006f8:	d3e0      	bcc.n	81006bc <initThreadNext+0xc>
		}
	}
}
 81006fa:	bf00      	nop
 81006fc:	bf00      	nop
 81006fe:	370c      	adds	r7, #12
 8100700:	46bd      	mov	sp, r7
 8100702:	bc80      	pop	{r7}
 8100704:	4770      	bx	lr
 8100706:	bf00      	nop
 8100708:	10000094 	.word	0x10000094
 810070c:	10000098 	.word	0x10000098

08100710 <rtosKernelAddThread>:
	threadStack[2][STACK_SIZE-2] = (uint32_t)(thread2); //Setting the program counter to function pointer

	__enable_irq();
	return 1;
}*/
uint8_t rtosKernelAddThread(void(*threadFunc)(void), uint32_t threadID){
 8100710:	b580      	push	{r7, lr}
 8100712:	b082      	sub	sp, #8
 8100714:	af00      	add	r7, sp, #0
 8100716:	6078      	str	r0, [r7, #4]
 8100718:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810071a:	b672      	cpsid	i
}
 810071c:	bf00      	nop
	__disable_irq(); //Disabling global interrupts

	rtosKernelThreadStackInit(threadID);
 810071e:	683b      	ldr	r3, [r7, #0]
 8100720:	4618      	mov	r0, r3
 8100722:	f7ff fef7 	bl	8100514 <rtosKernelThreadStackInit>
	threadStack[threadID][STACK_SIZE-2] = (uint32_t)(threadFunc); //Setting the program counter to function pointer
 8100726:	687a      	ldr	r2, [r7, #4]
 8100728:	490b      	ldr	r1, [pc, #44]	; (8100758 <rtosKernelAddThread+0x48>)
 810072a:	683b      	ldr	r3, [r7, #0]
 810072c:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8100730:	fb00 f303 	mul.w	r3, r0, r3
 8100734:	440b      	add	r3, r1
 8100736:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 810073a:	601a      	str	r2, [r3, #0]

	threadsCreated++;
 810073c:	4b07      	ldr	r3, [pc, #28]	; (810075c <rtosKernelAddThread+0x4c>)
 810073e:	681b      	ldr	r3, [r3, #0]
 8100740:	3301      	adds	r3, #1
 8100742:	4a06      	ldr	r2, [pc, #24]	; (810075c <rtosKernelAddThread+0x4c>)
 8100744:	6013      	str	r3, [r2, #0]
	initThreadNext();
 8100746:	f7ff ffb3 	bl	81006b0 <initThreadNext>
  __ASM volatile ("cpsie i" : : : "memory");
 810074a:	b662      	cpsie	i
}
 810074c:	bf00      	nop
	__enable_irq();
	return 1;
 810074e:	2301      	movs	r3, #1
}
 8100750:	4618      	mov	r0, r3
 8100752:	3708      	adds	r7, #8
 8100754:	46bd      	mov	sp, r7
 8100756:	bd80      	pop	{r7, pc}
 8100758:	100000ec 	.word	0x100000ec
 810075c:	10000094 	.word	0x10000094

08100760 <rtosKernelClkInit>:

void rtosKernelClkInit(){
 8100760:	b480      	push	{r7}
 8100762:	af00      	add	r7, sp, #0
	Millsec_Clock_Cyc = (SYS_CLOCK/1000); //Note: Bus speed 64000000 cycles/sec so 64000 cycles in one ms
 8100764:	4b03      	ldr	r3, [pc, #12]	; (8100774 <rtosKernelClkInit+0x14>)
 8100766:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 810076a:	601a      	str	r2, [r3, #0]
}
 810076c:	bf00      	nop
 810076e:	46bd      	mov	sp, r7
 8100770:	bc80      	pop	{r7}
 8100772:	4770      	bx	lr
 8100774:	10000090 	.word	0x10000090

08100778 <rtosKernelLaunch>:

void rtosKernelLaunch(uint32_t cycleQuanta){
 8100778:	b580      	push	{r7, lr}
 810077a:	b082      	sub	sp, #8
 810077c:	af00      	add	r7, sp, #0
 810077e:	6078      	str	r0, [r7, #4]
	//Reset SysTick
	SysTick->CTRL = SYSTICK_RST;
 8100780:	4b15      	ldr	r3, [pc, #84]	; (81007d8 <rtosKernelLaunch+0x60>)
 8100782:	2200      	movs	r2, #0
 8100784:	601a      	str	r2, [r3, #0]

	//Clear SysTick current value register
	SysTick->VAL = 0;
 8100786:	4b14      	ldr	r3, [pc, #80]	; (81007d8 <rtosKernelLaunch+0x60>)
 8100788:	2200      	movs	r2, #0
 810078a:	609a      	str	r2, [r3, #8]

	//Reload the timer with number of clock cycles to count to zero
	SysTick->LOAD = (cycleQuanta * Millsec_Clock_Cyc) - 1;
 810078c:	4b13      	ldr	r3, [pc, #76]	; (81007dc <rtosKernelLaunch+0x64>)
 810078e:	681b      	ldr	r3, [r3, #0]
 8100790:	687a      	ldr	r2, [r7, #4]
 8100792:	fb02 f303 	mul.w	r3, r2, r3
 8100796:	4a10      	ldr	r2, [pc, #64]	; (81007d8 <rtosKernelLaunch+0x60>)
 8100798:	3b01      	subs	r3, #1
 810079a:	6053      	str	r3, [r2, #4]

	//Setting the priority of systick less than all the other hardware interrupts
	NVIC_SetPriority(SysTick_IRQn, 15);
 810079c:	210f      	movs	r1, #15
 810079e:	f04f 30ff 	mov.w	r0, #4294967295
 81007a2:	f7ff fe8d 	bl	81004c0 <__NVIC_SetPriority>

	//Select internal clock as source
	SysTick->CTRL = CTRL_CLKSRC;
 81007a6:	4b0c      	ldr	r3, [pc, #48]	; (81007d8 <rtosKernelLaunch+0x60>)
 81007a8:	2204      	movs	r2, #4
 81007aa:	601a      	str	r2, [r3, #0]

	//Enable SysTick
	SysTick->CTRL |= CTRL_ENABLE;
 81007ac:	4b0a      	ldr	r3, [pc, #40]	; (81007d8 <rtosKernelLaunch+0x60>)
 81007ae:	681b      	ldr	r3, [r3, #0]
 81007b0:	4a09      	ldr	r2, [pc, #36]	; (81007d8 <rtosKernelLaunch+0x60>)
 81007b2:	f043 0301 	orr.w	r3, r3, #1
 81007b6:	6013      	str	r3, [r2, #0]

	//Enable Interrupt
	SysTick->CTRL |= CTRL_TICKINT;
 81007b8:	4b07      	ldr	r3, [pc, #28]	; (81007d8 <rtosKernelLaunch+0x60>)
 81007ba:	681b      	ldr	r3, [r3, #0]
 81007bc:	4a06      	ldr	r2, [pc, #24]	; (81007d8 <rtosKernelLaunch+0x60>)
 81007be:	f043 0302 	orr.w	r3, r3, #2
 81007c2:	6013      	str	r3, [r2, #0]

	//Setting first thread 0 as first thread to run
	ptrCurrTCB = &tcbArr[0];
 81007c4:	4b06      	ldr	r3, [pc, #24]	; (81007e0 <rtosKernelLaunch+0x68>)
 81007c6:	4a07      	ldr	r2, [pc, #28]	; (81007e4 <rtosKernelLaunch+0x6c>)
 81007c8:	601a      	str	r2, [r3, #0]

	//Launching Scheduler
	rtosSchedulerLaunch();
 81007ca:	f000 f81f 	bl	810080c <rtosSchedulerLaunch>
}
 81007ce:	bf00      	nop
 81007d0:	3708      	adds	r7, #8
 81007d2:	46bd      	mov	sp, r7
 81007d4:	bd80      	pop	{r7, pc}
 81007d6:	bf00      	nop
 81007d8:	e000e010 	.word	0xe000e010
 81007dc:	10000090 	.word	0x10000090
 81007e0:	100000e8 	.word	0x100000e8
 81007e4:	10000098 	.word	0x10000098

081007e8 <SysTick_Handler>:

__attribute__((naked))void SysTick_Handler(){

	//Suspend the current thread
	//First disable global interrupts
	__asm("CPSID	I");
 81007e8:	b672      	cpsid	i
	//Save registers whiCh are not saved when excpetion occured by default
	__asm("PUSH {R4-R11}");
 81007ea:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Load address of current tcb pointer into R0
	__asm("LDR R0, =ptrCurrTCB"); // R0 is holding pointer to pointer to tcb
 81007ee:	4806      	ldr	r0, [pc, #24]	; (8100808 <SysTick_Handler+0x20>)
	//Load R1 from address equals r0, i.e. R1 = ptrCurrTCB
	__asm("LDR R1, [R0]");
 81007f0:	6801      	ldr	r1, [r0, #0]
	//Store CortexM SP to memory pointed by R1, i.e. save SP to tcb
	__asm("STR SP, [R1]");
 81007f2:	f8c1 d000 	str.w	sp, [r1]


	//Fetching the next thread
	//Load R1 from a location 4 bytes above address R1, i.e. R1 = ptrCurrTCB->next
	__asm("LDR R1,[R1, #4]");
 81007f6:	6849      	ldr	r1, [r1, #4]
	//Store R1 at address equals R0, i.e ptrCurrTCB = R1
	__asm("STR R1, [R0]");
 81007f8:	6001      	str	r1, [r0, #0]
	//Load Cortex M SP from address equals R1, i.e. SP = ptrCurrTCB->ptrStack
	__asm("LDR SP, [R1]");
 81007fa:	f8d1 d000 	ldr.w	sp, [r1]
	//Restore R4, R5, R6, R7, R8, R9, R10, R11
	__asm("POP {R4-R11}");
 81007fe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Enable global interrupt
	__asm("CPSIE	I");
 8100802:	b662      	cpsie	i
	//Return from exception and automatically restore R0, R1, R2, R3, R12, LR, PC, PSR from newly loaded stack
	__asm("BX	LR");
 8100804:	4770      	bx	lr
}
 8100806:	bf00      	nop
 8100808:	100000e8 	.word	0x100000e8

0810080c <rtosSchedulerLaunch>:

void rtosSchedulerLaunch(){
 810080c:	b480      	push	{r7}
 810080e:	af00      	add	r7, sp, #0

	//Load address of ptrCurrTCB into R0
	__asm("LDR R0, =ptrCurrTCB");
 8100810:	4809      	ldr	r0, [pc, #36]	; (8100838 <rtosSchedulerLaunch+0x2c>)
	//Load ptrCurrTCB to R2 from its address i.e. R0
	__asm("LDR R2, [R0]");
 8100812:	6802      	ldr	r2, [r0, #0]
	//Load Cortex M stack pointer from ptrCurrTCB, i.e. SP = ptrCurrTCB->ptrStack
	__asm("LDR SP, [R2]");
 8100814:	f8d2 d000 	ldr.w	sp, [r2]
	//Fetch all the initial register values from the stack
	__asm("POP {R4-R11}");
 8100818:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Fetch other registers which are saved by default
	__asm("POP {R0-R3}");
 810081c:	bc0f      	pop	{r0, r1, r2, r3}
	//Fetch register 12 which is saved by default
	__asm("POP {R12}");
 810081e:	f85d cb04 	ldr.w	ip, [sp], #4
	//Skip to LR in stack
	__asm("ADD SP, SP, #4");
 8100822:	b001      	add	sp, #4
	//Setting LR as PC which lead to task0 function pointer
	__asm("POP {LR}");
 8100824:	f85d eb04 	ldr.w	lr, [sp], #4
	//Skip to PSR
	__asm("ADD SP, SP, #4");
 8100828:	b001      	add	sp, #4
	//Enable global interrupt
	__asm("CPSIE	I");
 810082a:	b662      	cpsie	i
	//Return from exception
	__asm("BX	LR");
 810082c:	4770      	bx	lr
}
 810082e:	bf00      	nop
 8100830:	46bd      	mov	sp, r7
 8100832:	bc80      	pop	{r7}
 8100834:	4770      	bx	lr
 8100836:	0000      	.short	0x0000
 8100838:	100000e8 	.word	0x100000e8

0810083c <rtosThreadYield>:

void rtosThreadYield(){
 810083c:	b480      	push	{r7}
 810083e:	af00      	add	r7, sp, #0
	SysTick->VAL = 0; //By writing any value to this register the value is overwritten
 8100840:	4b05      	ldr	r3, [pc, #20]	; (8100858 <rtosThreadYield+0x1c>)
 8100842:	2200      	movs	r2, #0
 8100844:	609a      	str	r2, [r3, #8]
	INTCTRL = (1U<<26);
 8100846:	4b05      	ldr	r3, [pc, #20]	; (810085c <rtosThreadYield+0x20>)
 8100848:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 810084c:	601a      	str	r2, [r3, #0]
}
 810084e:	bf00      	nop
 8100850:	46bd      	mov	sp, r7
 8100852:	bc80      	pop	{r7}
 8100854:	4770      	bx	lr
 8100856:	bf00      	nop
 8100858:	e000e010 	.word	0xe000e010
 810085c:	e000ed04 	.word	0xe000ed04

08100860 <rtosSempahoreInit>:

void rtosSempahoreInit(int32_t *semaphoreCnt, int32_t initVal){
 8100860:	b480      	push	{r7}
 8100862:	b083      	sub	sp, #12
 8100864:	af00      	add	r7, sp, #0
 8100866:	6078      	str	r0, [r7, #4]
 8100868:	6039      	str	r1, [r7, #0]
	*semaphoreCnt = initVal;
 810086a:	687b      	ldr	r3, [r7, #4]
 810086c:	683a      	ldr	r2, [r7, #0]
 810086e:	601a      	str	r2, [r3, #0]
}
 8100870:	bf00      	nop
 8100872:	370c      	adds	r7, #12
 8100874:	46bd      	mov	sp, r7
 8100876:	bc80      	pop	{r7}
 8100878:	4770      	bx	lr

0810087a <rtosSemaphoreCntGive>:

void rtosSemaphoreCntGive(int32_t *semaphoreCnt){
 810087a:	b480      	push	{r7}
 810087c:	b083      	sub	sp, #12
 810087e:	af00      	add	r7, sp, #0
 8100880:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8100882:	b672      	cpsid	i
}
 8100884:	bf00      	nop
	__disable_irq();
	*semaphoreCnt = *semaphoreCnt + 1;
 8100886:	687b      	ldr	r3, [r7, #4]
 8100888:	681b      	ldr	r3, [r3, #0]
 810088a:	1c5a      	adds	r2, r3, #1
 810088c:	687b      	ldr	r3, [r7, #4]
 810088e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8100890:	b662      	cpsie	i
}
 8100892:	bf00      	nop
	__enable_irq();
}
 8100894:	bf00      	nop
 8100896:	370c      	adds	r7, #12
 8100898:	46bd      	mov	sp, r7
 810089a:	bc80      	pop	{r7}
 810089c:	4770      	bx	lr

0810089e <rtosSemaphoreCntTake>:

void rtosSemaphoreCntTake(int32_t *semaphoreCnt){
 810089e:	b580      	push	{r7, lr}
 81008a0:	b082      	sub	sp, #8
 81008a2:	af00      	add	r7, sp, #0
 81008a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 81008a6:	b672      	cpsid	i
}
 81008a8:	bf00      	nop
	__disable_irq();
	while(*semaphoreCnt <= 0){
 81008aa:	e005      	b.n	81008b8 <rtosSemaphoreCntTake+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 81008ac:	b672      	cpsid	i
}
 81008ae:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 81008b0:	b662      	cpsie	i
}
 81008b2:	bf00      	nop
		__disable_irq();
		__enable_irq();
		rtosThreadYield();
 81008b4:	f7ff ffc2 	bl	810083c <rtosThreadYield>
	while(*semaphoreCnt <= 0){
 81008b8:	687b      	ldr	r3, [r7, #4]
 81008ba:	681b      	ldr	r3, [r3, #0]
 81008bc:	2b00      	cmp	r3, #0
 81008be:	ddf5      	ble.n	81008ac <rtosSemaphoreCntTake+0xe>
	}

	*semaphoreCnt = *semaphoreCnt - 1;
 81008c0:	687b      	ldr	r3, [r7, #4]
 81008c2:	681b      	ldr	r3, [r3, #0]
 81008c4:	1e5a      	subs	r2, r3, #1
 81008c6:	687b      	ldr	r3, [r7, #4]
 81008c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 81008ca:	b662      	cpsie	i
}
 81008cc:	bf00      	nop
	__enable_irq();
}
 81008ce:	bf00      	nop
 81008d0:	3708      	adds	r7, #8
 81008d2:	46bd      	mov	sp, r7
 81008d4:	bd80      	pop	{r7, pc}

081008d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81008d6:	b580      	push	{r7, lr}
 81008d8:	b086      	sub	sp, #24
 81008da:	af00      	add	r7, sp, #0
 81008dc:	60f8      	str	r0, [r7, #12]
 81008de:	60b9      	str	r1, [r7, #8]
 81008e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81008e2:	2300      	movs	r3, #0
 81008e4:	617b      	str	r3, [r7, #20]
 81008e6:	e00a      	b.n	81008fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81008e8:	f3af 8000 	nop.w
 81008ec:	4601      	mov	r1, r0
 81008ee:	68bb      	ldr	r3, [r7, #8]
 81008f0:	1c5a      	adds	r2, r3, #1
 81008f2:	60ba      	str	r2, [r7, #8]
 81008f4:	b2ca      	uxtb	r2, r1
 81008f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81008f8:	697b      	ldr	r3, [r7, #20]
 81008fa:	3301      	adds	r3, #1
 81008fc:	617b      	str	r3, [r7, #20]
 81008fe:	697a      	ldr	r2, [r7, #20]
 8100900:	687b      	ldr	r3, [r7, #4]
 8100902:	429a      	cmp	r2, r3
 8100904:	dbf0      	blt.n	81008e8 <_read+0x12>
  }

  return len;
 8100906:	687b      	ldr	r3, [r7, #4]
}
 8100908:	4618      	mov	r0, r3
 810090a:	3718      	adds	r7, #24
 810090c:	46bd      	mov	sp, r7
 810090e:	bd80      	pop	{r7, pc}

08100910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100910:	b580      	push	{r7, lr}
 8100912:	b086      	sub	sp, #24
 8100914:	af00      	add	r7, sp, #0
 8100916:	60f8      	str	r0, [r7, #12]
 8100918:	60b9      	str	r1, [r7, #8]
 810091a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810091c:	2300      	movs	r3, #0
 810091e:	617b      	str	r3, [r7, #20]
 8100920:	e009      	b.n	8100936 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8100922:	68bb      	ldr	r3, [r7, #8]
 8100924:	1c5a      	adds	r2, r3, #1
 8100926:	60ba      	str	r2, [r7, #8]
 8100928:	781b      	ldrb	r3, [r3, #0]
 810092a:	4618      	mov	r0, r3
 810092c:	f000 f912 	bl	8100b54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100930:	697b      	ldr	r3, [r7, #20]
 8100932:	3301      	adds	r3, #1
 8100934:	617b      	str	r3, [r7, #20]
 8100936:	697a      	ldr	r2, [r7, #20]
 8100938:	687b      	ldr	r3, [r7, #4]
 810093a:	429a      	cmp	r2, r3
 810093c:	dbf1      	blt.n	8100922 <_write+0x12>
  }
  return len;
 810093e:	687b      	ldr	r3, [r7, #4]
}
 8100940:	4618      	mov	r0, r3
 8100942:	3718      	adds	r7, #24
 8100944:	46bd      	mov	sp, r7
 8100946:	bd80      	pop	{r7, pc}

08100948 <_close>:

int _close(int file)
{
 8100948:	b480      	push	{r7}
 810094a:	b083      	sub	sp, #12
 810094c:	af00      	add	r7, sp, #0
 810094e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8100950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100954:	4618      	mov	r0, r3
 8100956:	370c      	adds	r7, #12
 8100958:	46bd      	mov	sp, r7
 810095a:	bc80      	pop	{r7}
 810095c:	4770      	bx	lr

0810095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810095e:	b480      	push	{r7}
 8100960:	b083      	sub	sp, #12
 8100962:	af00      	add	r7, sp, #0
 8100964:	6078      	str	r0, [r7, #4]
 8100966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8100968:	683b      	ldr	r3, [r7, #0]
 810096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810096e:	605a      	str	r2, [r3, #4]
  return 0;
 8100970:	2300      	movs	r3, #0
}
 8100972:	4618      	mov	r0, r3
 8100974:	370c      	adds	r7, #12
 8100976:	46bd      	mov	sp, r7
 8100978:	bc80      	pop	{r7}
 810097a:	4770      	bx	lr

0810097c <_isatty>:

int _isatty(int file)
{
 810097c:	b480      	push	{r7}
 810097e:	b083      	sub	sp, #12
 8100980:	af00      	add	r7, sp, #0
 8100982:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8100984:	2301      	movs	r3, #1
}
 8100986:	4618      	mov	r0, r3
 8100988:	370c      	adds	r7, #12
 810098a:	46bd      	mov	sp, r7
 810098c:	bc80      	pop	{r7}
 810098e:	4770      	bx	lr

08100990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100990:	b480      	push	{r7}
 8100992:	b085      	sub	sp, #20
 8100994:	af00      	add	r7, sp, #0
 8100996:	60f8      	str	r0, [r7, #12]
 8100998:	60b9      	str	r1, [r7, #8]
 810099a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810099c:	2300      	movs	r3, #0
}
 810099e:	4618      	mov	r0, r3
 81009a0:	3714      	adds	r7, #20
 81009a2:	46bd      	mov	sp, r7
 81009a4:	bc80      	pop	{r7}
 81009a6:	4770      	bx	lr

081009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81009a8:	b580      	push	{r7, lr}
 81009aa:	b086      	sub	sp, #24
 81009ac:	af00      	add	r7, sp, #0
 81009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81009b0:	4a14      	ldr	r2, [pc, #80]	; (8100a04 <_sbrk+0x5c>)
 81009b2:	4b15      	ldr	r3, [pc, #84]	; (8100a08 <_sbrk+0x60>)
 81009b4:	1ad3      	subs	r3, r2, r3
 81009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81009b8:	697b      	ldr	r3, [r7, #20]
 81009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81009bc:	4b13      	ldr	r3, [pc, #76]	; (8100a0c <_sbrk+0x64>)
 81009be:	681b      	ldr	r3, [r3, #0]
 81009c0:	2b00      	cmp	r3, #0
 81009c2:	d102      	bne.n	81009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81009c4:	4b11      	ldr	r3, [pc, #68]	; (8100a0c <_sbrk+0x64>)
 81009c6:	4a12      	ldr	r2, [pc, #72]	; (8100a10 <_sbrk+0x68>)
 81009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81009ca:	4b10      	ldr	r3, [pc, #64]	; (8100a0c <_sbrk+0x64>)
 81009cc:	681a      	ldr	r2, [r3, #0]
 81009ce:	687b      	ldr	r3, [r7, #4]
 81009d0:	4413      	add	r3, r2
 81009d2:	693a      	ldr	r2, [r7, #16]
 81009d4:	429a      	cmp	r2, r3
 81009d6:	d207      	bcs.n	81009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81009d8:	f000 fac6 	bl	8100f68 <__errno>
 81009dc:	4603      	mov	r3, r0
 81009de:	220c      	movs	r2, #12
 81009e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81009e2:	f04f 33ff 	mov.w	r3, #4294967295
 81009e6:	e009      	b.n	81009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81009e8:	4b08      	ldr	r3, [pc, #32]	; (8100a0c <_sbrk+0x64>)
 81009ea:	681b      	ldr	r3, [r3, #0]
 81009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81009ee:	4b07      	ldr	r3, [pc, #28]	; (8100a0c <_sbrk+0x64>)
 81009f0:	681a      	ldr	r2, [r3, #0]
 81009f2:	687b      	ldr	r3, [r7, #4]
 81009f4:	4413      	add	r3, r2
 81009f6:	4a05      	ldr	r2, [pc, #20]	; (8100a0c <_sbrk+0x64>)
 81009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81009fa:	68fb      	ldr	r3, [r7, #12]
}
 81009fc:	4618      	mov	r0, r3
 81009fe:	3718      	adds	r7, #24
 8100a00:	46bd      	mov	sp, r7
 8100a02:	bd80      	pop	{r7, pc}
 8100a04:	10048000 	.word	0x10048000
 8100a08:	00000400 	.word	0x00000400
 8100a0c:	10003f6c 	.word	0x10003f6c
 8100a10:	100040c8 	.word	0x100040c8

08100a14 <__NVIC_EnableIRQ>:
{
 8100a14:	b480      	push	{r7}
 8100a16:	b083      	sub	sp, #12
 8100a18:	af00      	add	r7, sp, #0
 8100a1a:	4603      	mov	r3, r0
 8100a1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a22:	2b00      	cmp	r3, #0
 8100a24:	db0b      	blt.n	8100a3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100a26:	88fb      	ldrh	r3, [r7, #6]
 8100a28:	f003 021f 	and.w	r2, r3, #31
 8100a2c:	4906      	ldr	r1, [pc, #24]	; (8100a48 <__NVIC_EnableIRQ+0x34>)
 8100a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a32:	095b      	lsrs	r3, r3, #5
 8100a34:	2001      	movs	r0, #1
 8100a36:	fa00 f202 	lsl.w	r2, r0, r2
 8100a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8100a3e:	bf00      	nop
 8100a40:	370c      	adds	r7, #12
 8100a42:	46bd      	mov	sp, r7
 8100a44:	bc80      	pop	{r7}
 8100a46:	4770      	bx	lr
 8100a48:	e000e100 	.word	0xe000e100

08100a4c <delay>:
volatile uint32_t global_curr_tick;
volatile uint32_t global_curr_tick_prime;
volatile uint32_t tick_freq = 1;
uint32_t cntTask4;

void delay(uint32_t delay){
 8100a4c:	b580      	push	{r7, lr}
 8100a4e:	b084      	sub	sp, #16
 8100a50:	af00      	add	r7, sp, #0
 8100a52:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 8100a54:	f000 f81c 	bl	8100a90 <get_tick>
 8100a58:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 8100a5a:	687b      	ldr	r3, [r7, #4]
 8100a5c:	60fb      	str	r3, [r7, #12]
	if(wait<MAX_DELAY){
 8100a5e:	68fb      	ldr	r3, [r7, #12]
 8100a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100a64:	d004      	beq.n	8100a70 <delay+0x24>
		wait += tick_freq;
 8100a66:	4b09      	ldr	r3, [pc, #36]	; (8100a8c <delay+0x40>)
 8100a68:	681b      	ldr	r3, [r3, #0]
 8100a6a:	68fa      	ldr	r2, [r7, #12]
 8100a6c:	4413      	add	r3, r2
 8100a6e:	60fb      	str	r3, [r7, #12]
	}
	while((get_tick()-tickstart)<wait){}
 8100a70:	bf00      	nop
 8100a72:	f000 f80d 	bl	8100a90 <get_tick>
 8100a76:	4602      	mov	r2, r0
 8100a78:	68bb      	ldr	r3, [r7, #8]
 8100a7a:	1ad3      	subs	r3, r2, r3
 8100a7c:	68fa      	ldr	r2, [r7, #12]
 8100a7e:	429a      	cmp	r2, r3
 8100a80:	d8f7      	bhi.n	8100a72 <delay+0x26>
}
 8100a82:	bf00      	nop
 8100a84:	bf00      	nop
 8100a86:	3710      	adds	r7, #16
 8100a88:	46bd      	mov	sp, r7
 8100a8a:	bd80      	pop	{r7, pc}
 8100a8c:	10000000 	.word	0x10000000

08100a90 <get_tick>:

uint32_t get_tick(void){
 8100a90:	b480      	push	{r7}
 8100a92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8100a94:	b672      	cpsid	i
}
 8100a96:	bf00      	nop
	__disable_irq();
	global_curr_tick_prime = global_curr_tick; //Fetch the current value of global counter
 8100a98:	4b05      	ldr	r3, [pc, #20]	; (8100ab0 <get_tick+0x20>)
 8100a9a:	681b      	ldr	r3, [r3, #0]
 8100a9c:	4a05      	ldr	r2, [pc, #20]	; (8100ab4 <get_tick+0x24>)
 8100a9e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8100aa0:	b662      	cpsie	i
}
 8100aa2:	bf00      	nop
	__enable_irq();
	return global_curr_tick_prime;
 8100aa4:	4b03      	ldr	r3, [pc, #12]	; (8100ab4 <get_tick+0x24>)
 8100aa6:	681b      	ldr	r3, [r3, #0]
}
 8100aa8:	4618      	mov	r0, r3
 8100aaa:	46bd      	mov	sp, r7
 8100aac:	bc80      	pop	{r7}
 8100aae:	4770      	bx	lr
 8100ab0:	10003f70 	.word	0x10003f70
 8100ab4:	10003f74 	.word	0x10003f74

08100ab8 <tick_increment>:

void tick_increment(void){
 8100ab8:	b480      	push	{r7}
 8100aba:	af00      	add	r7, sp, #0
	global_curr_tick += tick_freq;
 8100abc:	4b05      	ldr	r3, [pc, #20]	; (8100ad4 <tick_increment+0x1c>)
 8100abe:	681a      	ldr	r2, [r3, #0]
 8100ac0:	4b05      	ldr	r3, [pc, #20]	; (8100ad8 <tick_increment+0x20>)
 8100ac2:	681b      	ldr	r3, [r3, #0]
 8100ac4:	4413      	add	r3, r2
 8100ac6:	4a04      	ldr	r2, [pc, #16]	; (8100ad8 <tick_increment+0x20>)
 8100ac8:	6013      	str	r3, [r2, #0]
}
 8100aca:	bf00      	nop
 8100acc:	46bd      	mov	sp, r7
 8100ace:	bc80      	pop	{r7}
 8100ad0:	4770      	bx	lr
 8100ad2:	bf00      	nop
 8100ad4:	10000000 	.word	0x10000000
 8100ad8:	10003f70 	.word	0x10003f70

08100adc <tim2_1MS_tick_init>:

void tim2_1MS_tick_init(){
 8100adc:	b580      	push	{r7, lr}
 8100ade:	af00      	add	r7, sp, #0
	//Enable clock access to timer 2
	RCC->APB1LENR |= TIM2EN;
 8100ae0:	4b10      	ldr	r3, [pc, #64]	; (8100b24 <tim2_1MS_tick_init+0x48>)
 8100ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100ae6:	4a0f      	ldr	r2, [pc, #60]	; (8100b24 <tim2_1MS_tick_init+0x48>)
 8100ae8:	f043 0301 	orr.w	r3, r3, #1
 8100aec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	//Set timer prescalar
	TIM2->PSC = 6400-1; // Bus clock is 64000000 dividing by prescalar to get 10000 HZ
 8100af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100af4:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8100af8:	629a      	str	r2, [r3, #40]	; 0x28
	//Set auto reload value
	TIM2->ARR = 10-1; //1000/1000 = 1Hz
 8100afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100afe:	2209      	movs	r2, #9
 8100b00:	62da      	str	r2, [r3, #44]	; 0x2c
	//Clear Counter
	TIM2->CNT = 0;
 8100b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100b06:	2200      	movs	r2, #0
 8100b08:	625a      	str	r2, [r3, #36]	; 0x24
	//Enable timer 2
	TIM2->CR1 = CR1_CEN;
 8100b0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100b0e:	2201      	movs	r2, #1
 8100b10:	601a      	str	r2, [r3, #0]
	//Enable interrupt
	TIM2->DIER = DIER_UIE;
 8100b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100b16:	2201      	movs	r2, #1
 8100b18:	60da      	str	r2, [r3, #12]
	//Enable the timer interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8100b1a:	201c      	movs	r0, #28
 8100b1c:	f7ff ff7a 	bl	8100a14 <__NVIC_EnableIRQ>
}
 8100b20:	bf00      	nop
 8100b22:	bd80      	pop	{r7, pc}
 8100b24:	58024400 	.word	0x58024400

08100b28 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8100b28:	b580      	push	{r7, lr}
 8100b2a:	af00      	add	r7, sp, #0
	//Clear the interrupt flag
	TIM2->SR &= ~SR_UIF;
 8100b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100b30:	691b      	ldr	r3, [r3, #16]
 8100b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100b36:	f023 0301 	bic.w	r3, r3, #1
 8100b3a:	6113      	str	r3, [r2, #16]
	cntTask4++;
 8100b3c:	4b04      	ldr	r3, [pc, #16]	; (8100b50 <TIM2_IRQHandler+0x28>)
 8100b3e:	681b      	ldr	r3, [r3, #0]
 8100b40:	3301      	adds	r3, #1
 8100b42:	4a03      	ldr	r2, [pc, #12]	; (8100b50 <TIM2_IRQHandler+0x28>)
 8100b44:	6013      	str	r3, [r2, #0]
	tick_increment();
 8100b46:	f7ff ffb7 	bl	8100ab8 <tick_increment>
}
 8100b4a:	bf00      	nop
 8100b4c:	bd80      	pop	{r7, pc}
 8100b4e:	bf00      	nop
 8100b50:	10003f78 	.word	0x10003f78

08100b54 <__io_putchar>:
#define APB1_CLK				SYS_FREQ
#define UART_BAUD_RATE			115200
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch){
 8100b54:	b580      	push	{r7, lr}
 8100b56:	b082      	sub	sp, #8
 8100b58:	af00      	add	r7, sp, #0
 8100b5a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8100b5c:	6878      	ldr	r0, [r7, #4]
 8100b5e:	f000 f847 	bl	8100bf0 <uart_write>
	return ch;
 8100b62:	687b      	ldr	r3, [r7, #4]
}
 8100b64:	4618      	mov	r0, r3
 8100b66:	3708      	adds	r7, #8
 8100b68:	46bd      	mov	sp, r7
 8100b6a:	bd80      	pop	{r7, pc}

08100b6c <uart_tx_init>:
void uart_tx_init(void){
 8100b6c:	b580      	push	{r7, lr}
 8100b6e:	af00      	add	r7, sp, #0

	RCC->AHB4ENR |= GPIOAEN; //Starting clock for GPIOA as using pin PA9 AND PA10 for USART
 8100b70:	4b1b      	ldr	r3, [pc, #108]	; (8100be0 <uart_tx_init+0x74>)
 8100b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b76:	4a1a      	ldr	r2, [pc, #104]	; (8100be0 <uart_tx_init+0x74>)
 8100b78:	f043 0301 	orr.w	r3, r3, #1
 8100b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	//Setting the mode as
	GPIOA->MODER &= ~(1U<<18);
 8100b80:	4b18      	ldr	r3, [pc, #96]	; (8100be4 <uart_tx_init+0x78>)
 8100b82:	681b      	ldr	r3, [r3, #0]
 8100b84:	4a17      	ldr	r2, [pc, #92]	; (8100be4 <uart_tx_init+0x78>)
 8100b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8100b8a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8100b8c:	4b15      	ldr	r3, [pc, #84]	; (8100be4 <uart_tx_init+0x78>)
 8100b8e:	681b      	ldr	r3, [r3, #0]
 8100b90:	4a14      	ldr	r2, [pc, #80]	; (8100be4 <uart_tx_init+0x78>)
 8100b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8100b96:	6013      	str	r3, [r2, #0]

	/*GPIOA->MODER &= ~(1U<<20);
	GPIOA->MODER |= (1U<<21);*/

	//Setting GPIO Alternate function for PA9 AND PA10
	GPIOA->AFR[1] |= ((1U<<4)|(1U<<5)|(1U<<6));
 8100b98:	4b12      	ldr	r3, [pc, #72]	; (8100be4 <uart_tx_init+0x78>)
 8100b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100b9c:	4a11      	ldr	r2, [pc, #68]	; (8100be4 <uart_tx_init+0x78>)
 8100b9e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8100ba2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[0] &= ~(1U<<7);
 8100ba4:	4b0f      	ldr	r3, [pc, #60]	; (8100be4 <uart_tx_init+0x78>)
 8100ba6:	6a1b      	ldr	r3, [r3, #32]
 8100ba8:	4a0e      	ldr	r2, [pc, #56]	; (8100be4 <uart_tx_init+0x78>)
 8100baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8100bae:	6213      	str	r3, [r2, #32]

	/*GPIOA->AFR[1] |= ((1U<<8)|(1U<<9)|(1U<<10));
	GPIOA->AFR[0] &= ~(1U<<11);*/

	//Enabling clock for USART1
	RCC->APB2ENR |= (1<<4);
 8100bb0:	4b0b      	ldr	r3, [pc, #44]	; (8100be0 <uart_tx_init+0x74>)
 8100bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100bb6:	4a0a      	ldr	r2, [pc, #40]	; (8100be0 <uart_tx_init+0x74>)
 8100bb8:	f043 0310 	orr.w	r3, r3, #16
 8100bbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

	//Setting USART1 Baud Rate
	uart_set_baudrate(APB1_CLK, UART_BAUD_RATE);
 8100bc0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8100bc4:	4808      	ldr	r0, [pc, #32]	; (8100be8 <uart_tx_init+0x7c>)
 8100bc6:	f000 f829 	bl	8100c1c <uart_set_baudrate>

	//Configuring Transfer Direction
	USART1->CR1 = (1U<<3);
 8100bca:	4b08      	ldr	r3, [pc, #32]	; (8100bec <uart_tx_init+0x80>)
 8100bcc:	2208      	movs	r2, #8
 8100bce:	601a      	str	r2, [r3, #0]

	//Enable the USART Module
	USART1->CR1 |= (1U<<0);
 8100bd0:	4b06      	ldr	r3, [pc, #24]	; (8100bec <uart_tx_init+0x80>)
 8100bd2:	681b      	ldr	r3, [r3, #0]
 8100bd4:	4a05      	ldr	r2, [pc, #20]	; (8100bec <uart_tx_init+0x80>)
 8100bd6:	f043 0301 	orr.w	r3, r3, #1
 8100bda:	6013      	str	r3, [r2, #0]
}
 8100bdc:	bf00      	nop
 8100bde:	bd80      	pop	{r7, pc}
 8100be0:	58024400 	.word	0x58024400
 8100be4:	58020000 	.word	0x58020000
 8100be8:	03d09000 	.word	0x03d09000
 8100bec:	40011000 	.word	0x40011000

08100bf0 <uart_write>:

static void uart_write(int ch){
 8100bf0:	b480      	push	{r7}
 8100bf2:	b083      	sub	sp, #12
 8100bf4:	af00      	add	r7, sp, #0
 8100bf6:	6078      	str	r0, [r7, #4]
	//Make sure data register is not full
	while(!(USART1->ISR & (1U<<7))){}
 8100bf8:	bf00      	nop
 8100bfa:	4b07      	ldr	r3, [pc, #28]	; (8100c18 <uart_write+0x28>)
 8100bfc:	69db      	ldr	r3, [r3, #28]
 8100bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100c02:	2b00      	cmp	r3, #0
 8100c04:	d0f9      	beq.n	8100bfa <uart_write+0xa>

	//Write to data transmit register
	USART1->TDR = (ch & 0xFF);
 8100c06:	687b      	ldr	r3, [r7, #4]
 8100c08:	4a03      	ldr	r2, [pc, #12]	; (8100c18 <uart_write+0x28>)
 8100c0a:	b2db      	uxtb	r3, r3
 8100c0c:	6293      	str	r3, [r2, #40]	; 0x28

}
 8100c0e:	bf00      	nop
 8100c10:	370c      	adds	r7, #12
 8100c12:	46bd      	mov	sp, r7
 8100c14:	bc80      	pop	{r7}
 8100c16:	4770      	bx	lr
 8100c18:	40011000 	.word	0x40011000

08100c1c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 8100c1c:	b480      	push	{r7}
 8100c1e:	b083      	sub	sp, #12
 8100c20:	af00      	add	r7, sp, #0
 8100c22:	6078      	str	r0, [r7, #4]
 8100c24:	6039      	str	r1, [r7, #0]
	USART1->BRR = (periph_clk + (baudrate/2U)) / baudrate;
 8100c26:	683b      	ldr	r3, [r7, #0]
 8100c28:	085a      	lsrs	r2, r3, #1
 8100c2a:	687b      	ldr	r3, [r7, #4]
 8100c2c:	441a      	add	r2, r3
 8100c2e:	4905      	ldr	r1, [pc, #20]	; (8100c44 <uart_set_baudrate+0x28>)
 8100c30:	683b      	ldr	r3, [r7, #0]
 8100c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8100c36:	60cb      	str	r3, [r1, #12]
}
 8100c38:	bf00      	nop
 8100c3a:	370c      	adds	r7, #12
 8100c3c:	46bd      	mov	sp, r7
 8100c3e:	bc80      	pop	{r7}
 8100c40:	4770      	bx	lr
 8100c42:	bf00      	nop
 8100c44:	40011000 	.word	0x40011000

08100c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8100c48:	480d      	ldr	r0, [pc, #52]	; (8100c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8100c4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100c4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100c50:	480c      	ldr	r0, [pc, #48]	; (8100c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8100c52:	490d      	ldr	r1, [pc, #52]	; (8100c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8100c54:	4a0d      	ldr	r2, [pc, #52]	; (8100c8c <LoopForever+0xe>)
  movs r3, #0
 8100c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100c58:	e002      	b.n	8100c60 <LoopCopyDataInit>

08100c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100c5e:	3304      	adds	r3, #4

08100c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100c64:	d3f9      	bcc.n	8100c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100c66:	4a0a      	ldr	r2, [pc, #40]	; (8100c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8100c68:	4c0a      	ldr	r4, [pc, #40]	; (8100c94 <LoopForever+0x16>)
  movs r3, #0
 8100c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100c6c:	e001      	b.n	8100c72 <LoopFillZerobss>

08100c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100c70:	3204      	adds	r2, #4

08100c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100c74:	d3fb      	bcc.n	8100c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8100c76:	f000 f97d 	bl	8100f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8100c7a:	f7ff fbed 	bl	8100458 <main>

08100c7e <LoopForever>:

LoopForever:
  b LoopForever
 8100c7e:	e7fe      	b.n	8100c7e <LoopForever>
  ldr   r0, =_estack
 8100c80:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100c84:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100c88:	10000060 	.word	0x10000060
  ldr r2, =_sidata
 8100c8c:	08101b88 	.word	0x08101b88
  ldr r2, =_sbss
 8100c90:	10000060 	.word	0x10000060
  ldr r4, =_ebss
 8100c94:	100040c8 	.word	0x100040c8

08100c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8100c98:	e7fe      	b.n	8100c98 <ADC1_2_IRQHandler>
	...

08100c9c <std>:
 8100c9c:	2300      	movs	r3, #0
 8100c9e:	b510      	push	{r4, lr}
 8100ca0:	4604      	mov	r4, r0
 8100ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8100ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8100caa:	6083      	str	r3, [r0, #8]
 8100cac:	8181      	strh	r1, [r0, #12]
 8100cae:	6643      	str	r3, [r0, #100]	; 0x64
 8100cb0:	81c2      	strh	r2, [r0, #14]
 8100cb2:	6183      	str	r3, [r0, #24]
 8100cb4:	4619      	mov	r1, r3
 8100cb6:	2208      	movs	r2, #8
 8100cb8:	305c      	adds	r0, #92	; 0x5c
 8100cba:	f000 f906 	bl	8100eca <memset>
 8100cbe:	4b0d      	ldr	r3, [pc, #52]	; (8100cf4 <std+0x58>)
 8100cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8100cc2:	4b0d      	ldr	r3, [pc, #52]	; (8100cf8 <std+0x5c>)
 8100cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8100cc6:	4b0d      	ldr	r3, [pc, #52]	; (8100cfc <std+0x60>)
 8100cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8100cca:	4b0d      	ldr	r3, [pc, #52]	; (8100d00 <std+0x64>)
 8100ccc:	6323      	str	r3, [r4, #48]	; 0x30
 8100cce:	4b0d      	ldr	r3, [pc, #52]	; (8100d04 <std+0x68>)
 8100cd0:	6224      	str	r4, [r4, #32]
 8100cd2:	429c      	cmp	r4, r3
 8100cd4:	d006      	beq.n	8100ce4 <std+0x48>
 8100cd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8100cda:	4294      	cmp	r4, r2
 8100cdc:	d002      	beq.n	8100ce4 <std+0x48>
 8100cde:	33d0      	adds	r3, #208	; 0xd0
 8100ce0:	429c      	cmp	r4, r3
 8100ce2:	d105      	bne.n	8100cf0 <std+0x54>
 8100ce4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8100ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100cec:	f000 b966 	b.w	8100fbc <__retarget_lock_init_recursive>
 8100cf0:	bd10      	pop	{r4, pc}
 8100cf2:	bf00      	nop
 8100cf4:	08100e45 	.word	0x08100e45
 8100cf8:	08100e67 	.word	0x08100e67
 8100cfc:	08100e9f 	.word	0x08100e9f
 8100d00:	08100ec3 	.word	0x08100ec3
 8100d04:	10003f7c 	.word	0x10003f7c

08100d08 <stdio_exit_handler>:
 8100d08:	4a02      	ldr	r2, [pc, #8]	; (8100d14 <stdio_exit_handler+0xc>)
 8100d0a:	4903      	ldr	r1, [pc, #12]	; (8100d18 <stdio_exit_handler+0x10>)
 8100d0c:	4803      	ldr	r0, [pc, #12]	; (8100d1c <stdio_exit_handler+0x14>)
 8100d0e:	f000 b869 	b.w	8100de4 <_fwalk_sglue>
 8100d12:	bf00      	nop
 8100d14:	10000004 	.word	0x10000004
 8100d18:	08101859 	.word	0x08101859
 8100d1c:	10000010 	.word	0x10000010

08100d20 <cleanup_stdio>:
 8100d20:	6841      	ldr	r1, [r0, #4]
 8100d22:	4b0c      	ldr	r3, [pc, #48]	; (8100d54 <cleanup_stdio+0x34>)
 8100d24:	4299      	cmp	r1, r3
 8100d26:	b510      	push	{r4, lr}
 8100d28:	4604      	mov	r4, r0
 8100d2a:	d001      	beq.n	8100d30 <cleanup_stdio+0x10>
 8100d2c:	f000 fd94 	bl	8101858 <_fflush_r>
 8100d30:	68a1      	ldr	r1, [r4, #8]
 8100d32:	4b09      	ldr	r3, [pc, #36]	; (8100d58 <cleanup_stdio+0x38>)
 8100d34:	4299      	cmp	r1, r3
 8100d36:	d002      	beq.n	8100d3e <cleanup_stdio+0x1e>
 8100d38:	4620      	mov	r0, r4
 8100d3a:	f000 fd8d 	bl	8101858 <_fflush_r>
 8100d3e:	68e1      	ldr	r1, [r4, #12]
 8100d40:	4b06      	ldr	r3, [pc, #24]	; (8100d5c <cleanup_stdio+0x3c>)
 8100d42:	4299      	cmp	r1, r3
 8100d44:	d004      	beq.n	8100d50 <cleanup_stdio+0x30>
 8100d46:	4620      	mov	r0, r4
 8100d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100d4c:	f000 bd84 	b.w	8101858 <_fflush_r>
 8100d50:	bd10      	pop	{r4, pc}
 8100d52:	bf00      	nop
 8100d54:	10003f7c 	.word	0x10003f7c
 8100d58:	10003fe4 	.word	0x10003fe4
 8100d5c:	1000404c 	.word	0x1000404c

08100d60 <global_stdio_init.part.0>:
 8100d60:	b510      	push	{r4, lr}
 8100d62:	4b0b      	ldr	r3, [pc, #44]	; (8100d90 <global_stdio_init.part.0+0x30>)
 8100d64:	4c0b      	ldr	r4, [pc, #44]	; (8100d94 <global_stdio_init.part.0+0x34>)
 8100d66:	4a0c      	ldr	r2, [pc, #48]	; (8100d98 <global_stdio_init.part.0+0x38>)
 8100d68:	601a      	str	r2, [r3, #0]
 8100d6a:	4620      	mov	r0, r4
 8100d6c:	2200      	movs	r2, #0
 8100d6e:	2104      	movs	r1, #4
 8100d70:	f7ff ff94 	bl	8100c9c <std>
 8100d74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8100d78:	2201      	movs	r2, #1
 8100d7a:	2109      	movs	r1, #9
 8100d7c:	f7ff ff8e 	bl	8100c9c <std>
 8100d80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8100d84:	2202      	movs	r2, #2
 8100d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100d8a:	2112      	movs	r1, #18
 8100d8c:	f7ff bf86 	b.w	8100c9c <std>
 8100d90:	100040b4 	.word	0x100040b4
 8100d94:	10003f7c 	.word	0x10003f7c
 8100d98:	08100d09 	.word	0x08100d09

08100d9c <__sfp_lock_acquire>:
 8100d9c:	4801      	ldr	r0, [pc, #4]	; (8100da4 <__sfp_lock_acquire+0x8>)
 8100d9e:	f000 b90e 	b.w	8100fbe <__retarget_lock_acquire_recursive>
 8100da2:	bf00      	nop
 8100da4:	100040bd 	.word	0x100040bd

08100da8 <__sfp_lock_release>:
 8100da8:	4801      	ldr	r0, [pc, #4]	; (8100db0 <__sfp_lock_release+0x8>)
 8100daa:	f000 b909 	b.w	8100fc0 <__retarget_lock_release_recursive>
 8100dae:	bf00      	nop
 8100db0:	100040bd 	.word	0x100040bd

08100db4 <__sinit>:
 8100db4:	b510      	push	{r4, lr}
 8100db6:	4604      	mov	r4, r0
 8100db8:	f7ff fff0 	bl	8100d9c <__sfp_lock_acquire>
 8100dbc:	6a23      	ldr	r3, [r4, #32]
 8100dbe:	b11b      	cbz	r3, 8100dc8 <__sinit+0x14>
 8100dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100dc4:	f7ff bff0 	b.w	8100da8 <__sfp_lock_release>
 8100dc8:	4b04      	ldr	r3, [pc, #16]	; (8100ddc <__sinit+0x28>)
 8100dca:	6223      	str	r3, [r4, #32]
 8100dcc:	4b04      	ldr	r3, [pc, #16]	; (8100de0 <__sinit+0x2c>)
 8100dce:	681b      	ldr	r3, [r3, #0]
 8100dd0:	2b00      	cmp	r3, #0
 8100dd2:	d1f5      	bne.n	8100dc0 <__sinit+0xc>
 8100dd4:	f7ff ffc4 	bl	8100d60 <global_stdio_init.part.0>
 8100dd8:	e7f2      	b.n	8100dc0 <__sinit+0xc>
 8100dda:	bf00      	nop
 8100ddc:	08100d21 	.word	0x08100d21
 8100de0:	100040b4 	.word	0x100040b4

08100de4 <_fwalk_sglue>:
 8100de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8100de8:	4607      	mov	r7, r0
 8100dea:	4688      	mov	r8, r1
 8100dec:	4614      	mov	r4, r2
 8100dee:	2600      	movs	r6, #0
 8100df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8100df4:	f1b9 0901 	subs.w	r9, r9, #1
 8100df8:	d505      	bpl.n	8100e06 <_fwalk_sglue+0x22>
 8100dfa:	6824      	ldr	r4, [r4, #0]
 8100dfc:	2c00      	cmp	r4, #0
 8100dfe:	d1f7      	bne.n	8100df0 <_fwalk_sglue+0xc>
 8100e00:	4630      	mov	r0, r6
 8100e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8100e06:	89ab      	ldrh	r3, [r5, #12]
 8100e08:	2b01      	cmp	r3, #1
 8100e0a:	d907      	bls.n	8100e1c <_fwalk_sglue+0x38>
 8100e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8100e10:	3301      	adds	r3, #1
 8100e12:	d003      	beq.n	8100e1c <_fwalk_sglue+0x38>
 8100e14:	4629      	mov	r1, r5
 8100e16:	4638      	mov	r0, r7
 8100e18:	47c0      	blx	r8
 8100e1a:	4306      	orrs	r6, r0
 8100e1c:	3568      	adds	r5, #104	; 0x68
 8100e1e:	e7e9      	b.n	8100df4 <_fwalk_sglue+0x10>

08100e20 <iprintf>:
 8100e20:	b40f      	push	{r0, r1, r2, r3}
 8100e22:	b507      	push	{r0, r1, r2, lr}
 8100e24:	4906      	ldr	r1, [pc, #24]	; (8100e40 <iprintf+0x20>)
 8100e26:	ab04      	add	r3, sp, #16
 8100e28:	6808      	ldr	r0, [r1, #0]
 8100e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8100e2e:	6881      	ldr	r1, [r0, #8]
 8100e30:	9301      	str	r3, [sp, #4]
 8100e32:	f000 f9e5 	bl	8101200 <_vfiprintf_r>
 8100e36:	b003      	add	sp, #12
 8100e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8100e3c:	b004      	add	sp, #16
 8100e3e:	4770      	bx	lr
 8100e40:	1000005c 	.word	0x1000005c

08100e44 <__sread>:
 8100e44:	b510      	push	{r4, lr}
 8100e46:	460c      	mov	r4, r1
 8100e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100e4c:	f000 f868 	bl	8100f20 <_read_r>
 8100e50:	2800      	cmp	r0, #0
 8100e52:	bfab      	itete	ge
 8100e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8100e56:	89a3      	ldrhlt	r3, [r4, #12]
 8100e58:	181b      	addge	r3, r3, r0
 8100e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8100e5e:	bfac      	ite	ge
 8100e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8100e62:	81a3      	strhlt	r3, [r4, #12]
 8100e64:	bd10      	pop	{r4, pc}

08100e66 <__swrite>:
 8100e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100e6a:	461f      	mov	r7, r3
 8100e6c:	898b      	ldrh	r3, [r1, #12]
 8100e6e:	05db      	lsls	r3, r3, #23
 8100e70:	4605      	mov	r5, r0
 8100e72:	460c      	mov	r4, r1
 8100e74:	4616      	mov	r6, r2
 8100e76:	d505      	bpl.n	8100e84 <__swrite+0x1e>
 8100e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100e7c:	2302      	movs	r3, #2
 8100e7e:	2200      	movs	r2, #0
 8100e80:	f000 f83c 	bl	8100efc <_lseek_r>
 8100e84:	89a3      	ldrh	r3, [r4, #12]
 8100e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8100e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8100e8e:	81a3      	strh	r3, [r4, #12]
 8100e90:	4632      	mov	r2, r6
 8100e92:	463b      	mov	r3, r7
 8100e94:	4628      	mov	r0, r5
 8100e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8100e9a:	f000 b853 	b.w	8100f44 <_write_r>

08100e9e <__sseek>:
 8100e9e:	b510      	push	{r4, lr}
 8100ea0:	460c      	mov	r4, r1
 8100ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100ea6:	f000 f829 	bl	8100efc <_lseek_r>
 8100eaa:	1c43      	adds	r3, r0, #1
 8100eac:	89a3      	ldrh	r3, [r4, #12]
 8100eae:	bf15      	itete	ne
 8100eb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8100eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8100eb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8100eba:	81a3      	strheq	r3, [r4, #12]
 8100ebc:	bf18      	it	ne
 8100ebe:	81a3      	strhne	r3, [r4, #12]
 8100ec0:	bd10      	pop	{r4, pc}

08100ec2 <__sclose>:
 8100ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100ec6:	f000 b809 	b.w	8100edc <_close_r>

08100eca <memset>:
 8100eca:	4402      	add	r2, r0
 8100ecc:	4603      	mov	r3, r0
 8100ece:	4293      	cmp	r3, r2
 8100ed0:	d100      	bne.n	8100ed4 <memset+0xa>
 8100ed2:	4770      	bx	lr
 8100ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8100ed8:	e7f9      	b.n	8100ece <memset+0x4>
	...

08100edc <_close_r>:
 8100edc:	b538      	push	{r3, r4, r5, lr}
 8100ede:	4d06      	ldr	r5, [pc, #24]	; (8100ef8 <_close_r+0x1c>)
 8100ee0:	2300      	movs	r3, #0
 8100ee2:	4604      	mov	r4, r0
 8100ee4:	4608      	mov	r0, r1
 8100ee6:	602b      	str	r3, [r5, #0]
 8100ee8:	f7ff fd2e 	bl	8100948 <_close>
 8100eec:	1c43      	adds	r3, r0, #1
 8100eee:	d102      	bne.n	8100ef6 <_close_r+0x1a>
 8100ef0:	682b      	ldr	r3, [r5, #0]
 8100ef2:	b103      	cbz	r3, 8100ef6 <_close_r+0x1a>
 8100ef4:	6023      	str	r3, [r4, #0]
 8100ef6:	bd38      	pop	{r3, r4, r5, pc}
 8100ef8:	100040b8 	.word	0x100040b8

08100efc <_lseek_r>:
 8100efc:	b538      	push	{r3, r4, r5, lr}
 8100efe:	4d07      	ldr	r5, [pc, #28]	; (8100f1c <_lseek_r+0x20>)
 8100f00:	4604      	mov	r4, r0
 8100f02:	4608      	mov	r0, r1
 8100f04:	4611      	mov	r1, r2
 8100f06:	2200      	movs	r2, #0
 8100f08:	602a      	str	r2, [r5, #0]
 8100f0a:	461a      	mov	r2, r3
 8100f0c:	f7ff fd40 	bl	8100990 <_lseek>
 8100f10:	1c43      	adds	r3, r0, #1
 8100f12:	d102      	bne.n	8100f1a <_lseek_r+0x1e>
 8100f14:	682b      	ldr	r3, [r5, #0]
 8100f16:	b103      	cbz	r3, 8100f1a <_lseek_r+0x1e>
 8100f18:	6023      	str	r3, [r4, #0]
 8100f1a:	bd38      	pop	{r3, r4, r5, pc}
 8100f1c:	100040b8 	.word	0x100040b8

08100f20 <_read_r>:
 8100f20:	b538      	push	{r3, r4, r5, lr}
 8100f22:	4d07      	ldr	r5, [pc, #28]	; (8100f40 <_read_r+0x20>)
 8100f24:	4604      	mov	r4, r0
 8100f26:	4608      	mov	r0, r1
 8100f28:	4611      	mov	r1, r2
 8100f2a:	2200      	movs	r2, #0
 8100f2c:	602a      	str	r2, [r5, #0]
 8100f2e:	461a      	mov	r2, r3
 8100f30:	f7ff fcd1 	bl	81008d6 <_read>
 8100f34:	1c43      	adds	r3, r0, #1
 8100f36:	d102      	bne.n	8100f3e <_read_r+0x1e>
 8100f38:	682b      	ldr	r3, [r5, #0]
 8100f3a:	b103      	cbz	r3, 8100f3e <_read_r+0x1e>
 8100f3c:	6023      	str	r3, [r4, #0]
 8100f3e:	bd38      	pop	{r3, r4, r5, pc}
 8100f40:	100040b8 	.word	0x100040b8

08100f44 <_write_r>:
 8100f44:	b538      	push	{r3, r4, r5, lr}
 8100f46:	4d07      	ldr	r5, [pc, #28]	; (8100f64 <_write_r+0x20>)
 8100f48:	4604      	mov	r4, r0
 8100f4a:	4608      	mov	r0, r1
 8100f4c:	4611      	mov	r1, r2
 8100f4e:	2200      	movs	r2, #0
 8100f50:	602a      	str	r2, [r5, #0]
 8100f52:	461a      	mov	r2, r3
 8100f54:	f7ff fcdc 	bl	8100910 <_write>
 8100f58:	1c43      	adds	r3, r0, #1
 8100f5a:	d102      	bne.n	8100f62 <_write_r+0x1e>
 8100f5c:	682b      	ldr	r3, [r5, #0]
 8100f5e:	b103      	cbz	r3, 8100f62 <_write_r+0x1e>
 8100f60:	6023      	str	r3, [r4, #0]
 8100f62:	bd38      	pop	{r3, r4, r5, pc}
 8100f64:	100040b8 	.word	0x100040b8

08100f68 <__errno>:
 8100f68:	4b01      	ldr	r3, [pc, #4]	; (8100f70 <__errno+0x8>)
 8100f6a:	6818      	ldr	r0, [r3, #0]
 8100f6c:	4770      	bx	lr
 8100f6e:	bf00      	nop
 8100f70:	1000005c 	.word	0x1000005c

08100f74 <__libc_init_array>:
 8100f74:	b570      	push	{r4, r5, r6, lr}
 8100f76:	4d0d      	ldr	r5, [pc, #52]	; (8100fac <__libc_init_array+0x38>)
 8100f78:	4c0d      	ldr	r4, [pc, #52]	; (8100fb0 <__libc_init_array+0x3c>)
 8100f7a:	1b64      	subs	r4, r4, r5
 8100f7c:	10a4      	asrs	r4, r4, #2
 8100f7e:	2600      	movs	r6, #0
 8100f80:	42a6      	cmp	r6, r4
 8100f82:	d109      	bne.n	8100f98 <__libc_init_array+0x24>
 8100f84:	4d0b      	ldr	r5, [pc, #44]	; (8100fb4 <__libc_init_array+0x40>)
 8100f86:	4c0c      	ldr	r4, [pc, #48]	; (8100fb8 <__libc_init_array+0x44>)
 8100f88:	f000 fdb8 	bl	8101afc <_init>
 8100f8c:	1b64      	subs	r4, r4, r5
 8100f8e:	10a4      	asrs	r4, r4, #2
 8100f90:	2600      	movs	r6, #0
 8100f92:	42a6      	cmp	r6, r4
 8100f94:	d105      	bne.n	8100fa2 <__libc_init_array+0x2e>
 8100f96:	bd70      	pop	{r4, r5, r6, pc}
 8100f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8100f9c:	4798      	blx	r3
 8100f9e:	3601      	adds	r6, #1
 8100fa0:	e7ee      	b.n	8100f80 <__libc_init_array+0xc>
 8100fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8100fa6:	4798      	blx	r3
 8100fa8:	3601      	adds	r6, #1
 8100faa:	e7f2      	b.n	8100f92 <__libc_init_array+0x1e>
 8100fac:	08101b80 	.word	0x08101b80
 8100fb0:	08101b80 	.word	0x08101b80
 8100fb4:	08101b80 	.word	0x08101b80
 8100fb8:	08101b84 	.word	0x08101b84

08100fbc <__retarget_lock_init_recursive>:
 8100fbc:	4770      	bx	lr

08100fbe <__retarget_lock_acquire_recursive>:
 8100fbe:	4770      	bx	lr

08100fc0 <__retarget_lock_release_recursive>:
 8100fc0:	4770      	bx	lr
	...

08100fc4 <_free_r>:
 8100fc4:	b538      	push	{r3, r4, r5, lr}
 8100fc6:	4605      	mov	r5, r0
 8100fc8:	2900      	cmp	r1, #0
 8100fca:	d041      	beq.n	8101050 <_free_r+0x8c>
 8100fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8100fd0:	1f0c      	subs	r4, r1, #4
 8100fd2:	2b00      	cmp	r3, #0
 8100fd4:	bfb8      	it	lt
 8100fd6:	18e4      	addlt	r4, r4, r3
 8100fd8:	f000 f8de 	bl	8101198 <__malloc_lock>
 8100fdc:	4a1d      	ldr	r2, [pc, #116]	; (8101054 <_free_r+0x90>)
 8100fde:	6813      	ldr	r3, [r2, #0]
 8100fe0:	b933      	cbnz	r3, 8100ff0 <_free_r+0x2c>
 8100fe2:	6063      	str	r3, [r4, #4]
 8100fe4:	6014      	str	r4, [r2, #0]
 8100fe6:	4628      	mov	r0, r5
 8100fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100fec:	f000 b8da 	b.w	81011a4 <__malloc_unlock>
 8100ff0:	42a3      	cmp	r3, r4
 8100ff2:	d908      	bls.n	8101006 <_free_r+0x42>
 8100ff4:	6820      	ldr	r0, [r4, #0]
 8100ff6:	1821      	adds	r1, r4, r0
 8100ff8:	428b      	cmp	r3, r1
 8100ffa:	bf01      	itttt	eq
 8100ffc:	6819      	ldreq	r1, [r3, #0]
 8100ffe:	685b      	ldreq	r3, [r3, #4]
 8101000:	1809      	addeq	r1, r1, r0
 8101002:	6021      	streq	r1, [r4, #0]
 8101004:	e7ed      	b.n	8100fe2 <_free_r+0x1e>
 8101006:	461a      	mov	r2, r3
 8101008:	685b      	ldr	r3, [r3, #4]
 810100a:	b10b      	cbz	r3, 8101010 <_free_r+0x4c>
 810100c:	42a3      	cmp	r3, r4
 810100e:	d9fa      	bls.n	8101006 <_free_r+0x42>
 8101010:	6811      	ldr	r1, [r2, #0]
 8101012:	1850      	adds	r0, r2, r1
 8101014:	42a0      	cmp	r0, r4
 8101016:	d10b      	bne.n	8101030 <_free_r+0x6c>
 8101018:	6820      	ldr	r0, [r4, #0]
 810101a:	4401      	add	r1, r0
 810101c:	1850      	adds	r0, r2, r1
 810101e:	4283      	cmp	r3, r0
 8101020:	6011      	str	r1, [r2, #0]
 8101022:	d1e0      	bne.n	8100fe6 <_free_r+0x22>
 8101024:	6818      	ldr	r0, [r3, #0]
 8101026:	685b      	ldr	r3, [r3, #4]
 8101028:	6053      	str	r3, [r2, #4]
 810102a:	4408      	add	r0, r1
 810102c:	6010      	str	r0, [r2, #0]
 810102e:	e7da      	b.n	8100fe6 <_free_r+0x22>
 8101030:	d902      	bls.n	8101038 <_free_r+0x74>
 8101032:	230c      	movs	r3, #12
 8101034:	602b      	str	r3, [r5, #0]
 8101036:	e7d6      	b.n	8100fe6 <_free_r+0x22>
 8101038:	6820      	ldr	r0, [r4, #0]
 810103a:	1821      	adds	r1, r4, r0
 810103c:	428b      	cmp	r3, r1
 810103e:	bf04      	itt	eq
 8101040:	6819      	ldreq	r1, [r3, #0]
 8101042:	685b      	ldreq	r3, [r3, #4]
 8101044:	6063      	str	r3, [r4, #4]
 8101046:	bf04      	itt	eq
 8101048:	1809      	addeq	r1, r1, r0
 810104a:	6021      	streq	r1, [r4, #0]
 810104c:	6054      	str	r4, [r2, #4]
 810104e:	e7ca      	b.n	8100fe6 <_free_r+0x22>
 8101050:	bd38      	pop	{r3, r4, r5, pc}
 8101052:	bf00      	nop
 8101054:	100040c0 	.word	0x100040c0

08101058 <sbrk_aligned>:
 8101058:	b570      	push	{r4, r5, r6, lr}
 810105a:	4e0e      	ldr	r6, [pc, #56]	; (8101094 <sbrk_aligned+0x3c>)
 810105c:	460c      	mov	r4, r1
 810105e:	6831      	ldr	r1, [r6, #0]
 8101060:	4605      	mov	r5, r0
 8101062:	b911      	cbnz	r1, 810106a <sbrk_aligned+0x12>
 8101064:	f000 fcb6 	bl	81019d4 <_sbrk_r>
 8101068:	6030      	str	r0, [r6, #0]
 810106a:	4621      	mov	r1, r4
 810106c:	4628      	mov	r0, r5
 810106e:	f000 fcb1 	bl	81019d4 <_sbrk_r>
 8101072:	1c43      	adds	r3, r0, #1
 8101074:	d00a      	beq.n	810108c <sbrk_aligned+0x34>
 8101076:	1cc4      	adds	r4, r0, #3
 8101078:	f024 0403 	bic.w	r4, r4, #3
 810107c:	42a0      	cmp	r0, r4
 810107e:	d007      	beq.n	8101090 <sbrk_aligned+0x38>
 8101080:	1a21      	subs	r1, r4, r0
 8101082:	4628      	mov	r0, r5
 8101084:	f000 fca6 	bl	81019d4 <_sbrk_r>
 8101088:	3001      	adds	r0, #1
 810108a:	d101      	bne.n	8101090 <sbrk_aligned+0x38>
 810108c:	f04f 34ff 	mov.w	r4, #4294967295
 8101090:	4620      	mov	r0, r4
 8101092:	bd70      	pop	{r4, r5, r6, pc}
 8101094:	100040c4 	.word	0x100040c4

08101098 <_malloc_r>:
 8101098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810109c:	1ccd      	adds	r5, r1, #3
 810109e:	f025 0503 	bic.w	r5, r5, #3
 81010a2:	3508      	adds	r5, #8
 81010a4:	2d0c      	cmp	r5, #12
 81010a6:	bf38      	it	cc
 81010a8:	250c      	movcc	r5, #12
 81010aa:	2d00      	cmp	r5, #0
 81010ac:	4607      	mov	r7, r0
 81010ae:	db01      	blt.n	81010b4 <_malloc_r+0x1c>
 81010b0:	42a9      	cmp	r1, r5
 81010b2:	d905      	bls.n	81010c0 <_malloc_r+0x28>
 81010b4:	230c      	movs	r3, #12
 81010b6:	603b      	str	r3, [r7, #0]
 81010b8:	2600      	movs	r6, #0
 81010ba:	4630      	mov	r0, r6
 81010bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81010c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8101194 <_malloc_r+0xfc>
 81010c4:	f000 f868 	bl	8101198 <__malloc_lock>
 81010c8:	f8d8 3000 	ldr.w	r3, [r8]
 81010cc:	461c      	mov	r4, r3
 81010ce:	bb5c      	cbnz	r4, 8101128 <_malloc_r+0x90>
 81010d0:	4629      	mov	r1, r5
 81010d2:	4638      	mov	r0, r7
 81010d4:	f7ff ffc0 	bl	8101058 <sbrk_aligned>
 81010d8:	1c43      	adds	r3, r0, #1
 81010da:	4604      	mov	r4, r0
 81010dc:	d155      	bne.n	810118a <_malloc_r+0xf2>
 81010de:	f8d8 4000 	ldr.w	r4, [r8]
 81010e2:	4626      	mov	r6, r4
 81010e4:	2e00      	cmp	r6, #0
 81010e6:	d145      	bne.n	8101174 <_malloc_r+0xdc>
 81010e8:	2c00      	cmp	r4, #0
 81010ea:	d048      	beq.n	810117e <_malloc_r+0xe6>
 81010ec:	6823      	ldr	r3, [r4, #0]
 81010ee:	4631      	mov	r1, r6
 81010f0:	4638      	mov	r0, r7
 81010f2:	eb04 0903 	add.w	r9, r4, r3
 81010f6:	f000 fc6d 	bl	81019d4 <_sbrk_r>
 81010fa:	4581      	cmp	r9, r0
 81010fc:	d13f      	bne.n	810117e <_malloc_r+0xe6>
 81010fe:	6821      	ldr	r1, [r4, #0]
 8101100:	1a6d      	subs	r5, r5, r1
 8101102:	4629      	mov	r1, r5
 8101104:	4638      	mov	r0, r7
 8101106:	f7ff ffa7 	bl	8101058 <sbrk_aligned>
 810110a:	3001      	adds	r0, #1
 810110c:	d037      	beq.n	810117e <_malloc_r+0xe6>
 810110e:	6823      	ldr	r3, [r4, #0]
 8101110:	442b      	add	r3, r5
 8101112:	6023      	str	r3, [r4, #0]
 8101114:	f8d8 3000 	ldr.w	r3, [r8]
 8101118:	2b00      	cmp	r3, #0
 810111a:	d038      	beq.n	810118e <_malloc_r+0xf6>
 810111c:	685a      	ldr	r2, [r3, #4]
 810111e:	42a2      	cmp	r2, r4
 8101120:	d12b      	bne.n	810117a <_malloc_r+0xe2>
 8101122:	2200      	movs	r2, #0
 8101124:	605a      	str	r2, [r3, #4]
 8101126:	e00f      	b.n	8101148 <_malloc_r+0xb0>
 8101128:	6822      	ldr	r2, [r4, #0]
 810112a:	1b52      	subs	r2, r2, r5
 810112c:	d41f      	bmi.n	810116e <_malloc_r+0xd6>
 810112e:	2a0b      	cmp	r2, #11
 8101130:	d917      	bls.n	8101162 <_malloc_r+0xca>
 8101132:	1961      	adds	r1, r4, r5
 8101134:	42a3      	cmp	r3, r4
 8101136:	6025      	str	r5, [r4, #0]
 8101138:	bf18      	it	ne
 810113a:	6059      	strne	r1, [r3, #4]
 810113c:	6863      	ldr	r3, [r4, #4]
 810113e:	bf08      	it	eq
 8101140:	f8c8 1000 	streq.w	r1, [r8]
 8101144:	5162      	str	r2, [r4, r5]
 8101146:	604b      	str	r3, [r1, #4]
 8101148:	4638      	mov	r0, r7
 810114a:	f104 060b 	add.w	r6, r4, #11
 810114e:	f000 f829 	bl	81011a4 <__malloc_unlock>
 8101152:	f026 0607 	bic.w	r6, r6, #7
 8101156:	1d23      	adds	r3, r4, #4
 8101158:	1af2      	subs	r2, r6, r3
 810115a:	d0ae      	beq.n	81010ba <_malloc_r+0x22>
 810115c:	1b9b      	subs	r3, r3, r6
 810115e:	50a3      	str	r3, [r4, r2]
 8101160:	e7ab      	b.n	81010ba <_malloc_r+0x22>
 8101162:	42a3      	cmp	r3, r4
 8101164:	6862      	ldr	r2, [r4, #4]
 8101166:	d1dd      	bne.n	8101124 <_malloc_r+0x8c>
 8101168:	f8c8 2000 	str.w	r2, [r8]
 810116c:	e7ec      	b.n	8101148 <_malloc_r+0xb0>
 810116e:	4623      	mov	r3, r4
 8101170:	6864      	ldr	r4, [r4, #4]
 8101172:	e7ac      	b.n	81010ce <_malloc_r+0x36>
 8101174:	4634      	mov	r4, r6
 8101176:	6876      	ldr	r6, [r6, #4]
 8101178:	e7b4      	b.n	81010e4 <_malloc_r+0x4c>
 810117a:	4613      	mov	r3, r2
 810117c:	e7cc      	b.n	8101118 <_malloc_r+0x80>
 810117e:	230c      	movs	r3, #12
 8101180:	603b      	str	r3, [r7, #0]
 8101182:	4638      	mov	r0, r7
 8101184:	f000 f80e 	bl	81011a4 <__malloc_unlock>
 8101188:	e797      	b.n	81010ba <_malloc_r+0x22>
 810118a:	6025      	str	r5, [r4, #0]
 810118c:	e7dc      	b.n	8101148 <_malloc_r+0xb0>
 810118e:	605b      	str	r3, [r3, #4]
 8101190:	deff      	udf	#255	; 0xff
 8101192:	bf00      	nop
 8101194:	100040c0 	.word	0x100040c0

08101198 <__malloc_lock>:
 8101198:	4801      	ldr	r0, [pc, #4]	; (81011a0 <__malloc_lock+0x8>)
 810119a:	f7ff bf10 	b.w	8100fbe <__retarget_lock_acquire_recursive>
 810119e:	bf00      	nop
 81011a0:	100040bc 	.word	0x100040bc

081011a4 <__malloc_unlock>:
 81011a4:	4801      	ldr	r0, [pc, #4]	; (81011ac <__malloc_unlock+0x8>)
 81011a6:	f7ff bf0b 	b.w	8100fc0 <__retarget_lock_release_recursive>
 81011aa:	bf00      	nop
 81011ac:	100040bc 	.word	0x100040bc

081011b0 <__sfputc_r>:
 81011b0:	6893      	ldr	r3, [r2, #8]
 81011b2:	3b01      	subs	r3, #1
 81011b4:	2b00      	cmp	r3, #0
 81011b6:	b410      	push	{r4}
 81011b8:	6093      	str	r3, [r2, #8]
 81011ba:	da07      	bge.n	81011cc <__sfputc_r+0x1c>
 81011bc:	6994      	ldr	r4, [r2, #24]
 81011be:	42a3      	cmp	r3, r4
 81011c0:	db01      	blt.n	81011c6 <__sfputc_r+0x16>
 81011c2:	290a      	cmp	r1, #10
 81011c4:	d102      	bne.n	81011cc <__sfputc_r+0x1c>
 81011c6:	bc10      	pop	{r4}
 81011c8:	f000 bb6e 	b.w	81018a8 <__swbuf_r>
 81011cc:	6813      	ldr	r3, [r2, #0]
 81011ce:	1c58      	adds	r0, r3, #1
 81011d0:	6010      	str	r0, [r2, #0]
 81011d2:	7019      	strb	r1, [r3, #0]
 81011d4:	4608      	mov	r0, r1
 81011d6:	bc10      	pop	{r4}
 81011d8:	4770      	bx	lr

081011da <__sfputs_r>:
 81011da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81011dc:	4606      	mov	r6, r0
 81011de:	460f      	mov	r7, r1
 81011e0:	4614      	mov	r4, r2
 81011e2:	18d5      	adds	r5, r2, r3
 81011e4:	42ac      	cmp	r4, r5
 81011e6:	d101      	bne.n	81011ec <__sfputs_r+0x12>
 81011e8:	2000      	movs	r0, #0
 81011ea:	e007      	b.n	81011fc <__sfputs_r+0x22>
 81011ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 81011f0:	463a      	mov	r2, r7
 81011f2:	4630      	mov	r0, r6
 81011f4:	f7ff ffdc 	bl	81011b0 <__sfputc_r>
 81011f8:	1c43      	adds	r3, r0, #1
 81011fa:	d1f3      	bne.n	81011e4 <__sfputs_r+0xa>
 81011fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08101200 <_vfiprintf_r>:
 8101200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101204:	460d      	mov	r5, r1
 8101206:	b09d      	sub	sp, #116	; 0x74
 8101208:	4614      	mov	r4, r2
 810120a:	4698      	mov	r8, r3
 810120c:	4606      	mov	r6, r0
 810120e:	b118      	cbz	r0, 8101218 <_vfiprintf_r+0x18>
 8101210:	6a03      	ldr	r3, [r0, #32]
 8101212:	b90b      	cbnz	r3, 8101218 <_vfiprintf_r+0x18>
 8101214:	f7ff fdce 	bl	8100db4 <__sinit>
 8101218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810121a:	07d9      	lsls	r1, r3, #31
 810121c:	d405      	bmi.n	810122a <_vfiprintf_r+0x2a>
 810121e:	89ab      	ldrh	r3, [r5, #12]
 8101220:	059a      	lsls	r2, r3, #22
 8101222:	d402      	bmi.n	810122a <_vfiprintf_r+0x2a>
 8101224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8101226:	f7ff feca 	bl	8100fbe <__retarget_lock_acquire_recursive>
 810122a:	89ab      	ldrh	r3, [r5, #12]
 810122c:	071b      	lsls	r3, r3, #28
 810122e:	d501      	bpl.n	8101234 <_vfiprintf_r+0x34>
 8101230:	692b      	ldr	r3, [r5, #16]
 8101232:	b99b      	cbnz	r3, 810125c <_vfiprintf_r+0x5c>
 8101234:	4629      	mov	r1, r5
 8101236:	4630      	mov	r0, r6
 8101238:	f000 fb74 	bl	8101924 <__swsetup_r>
 810123c:	b170      	cbz	r0, 810125c <_vfiprintf_r+0x5c>
 810123e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8101240:	07dc      	lsls	r4, r3, #31
 8101242:	d504      	bpl.n	810124e <_vfiprintf_r+0x4e>
 8101244:	f04f 30ff 	mov.w	r0, #4294967295
 8101248:	b01d      	add	sp, #116	; 0x74
 810124a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810124e:	89ab      	ldrh	r3, [r5, #12]
 8101250:	0598      	lsls	r0, r3, #22
 8101252:	d4f7      	bmi.n	8101244 <_vfiprintf_r+0x44>
 8101254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8101256:	f7ff feb3 	bl	8100fc0 <__retarget_lock_release_recursive>
 810125a:	e7f3      	b.n	8101244 <_vfiprintf_r+0x44>
 810125c:	2300      	movs	r3, #0
 810125e:	9309      	str	r3, [sp, #36]	; 0x24
 8101260:	2320      	movs	r3, #32
 8101262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8101266:	f8cd 800c 	str.w	r8, [sp, #12]
 810126a:	2330      	movs	r3, #48	; 0x30
 810126c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8101420 <_vfiprintf_r+0x220>
 8101270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8101274:	f04f 0901 	mov.w	r9, #1
 8101278:	4623      	mov	r3, r4
 810127a:	469a      	mov	sl, r3
 810127c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8101280:	b10a      	cbz	r2, 8101286 <_vfiprintf_r+0x86>
 8101282:	2a25      	cmp	r2, #37	; 0x25
 8101284:	d1f9      	bne.n	810127a <_vfiprintf_r+0x7a>
 8101286:	ebba 0b04 	subs.w	fp, sl, r4
 810128a:	d00b      	beq.n	81012a4 <_vfiprintf_r+0xa4>
 810128c:	465b      	mov	r3, fp
 810128e:	4622      	mov	r2, r4
 8101290:	4629      	mov	r1, r5
 8101292:	4630      	mov	r0, r6
 8101294:	f7ff ffa1 	bl	81011da <__sfputs_r>
 8101298:	3001      	adds	r0, #1
 810129a:	f000 80a9 	beq.w	81013f0 <_vfiprintf_r+0x1f0>
 810129e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81012a0:	445a      	add	r2, fp
 81012a2:	9209      	str	r2, [sp, #36]	; 0x24
 81012a4:	f89a 3000 	ldrb.w	r3, [sl]
 81012a8:	2b00      	cmp	r3, #0
 81012aa:	f000 80a1 	beq.w	81013f0 <_vfiprintf_r+0x1f0>
 81012ae:	2300      	movs	r3, #0
 81012b0:	f04f 32ff 	mov.w	r2, #4294967295
 81012b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81012b8:	f10a 0a01 	add.w	sl, sl, #1
 81012bc:	9304      	str	r3, [sp, #16]
 81012be:	9307      	str	r3, [sp, #28]
 81012c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81012c4:	931a      	str	r3, [sp, #104]	; 0x68
 81012c6:	4654      	mov	r4, sl
 81012c8:	2205      	movs	r2, #5
 81012ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 81012ce:	4854      	ldr	r0, [pc, #336]	; (8101420 <_vfiprintf_r+0x220>)
 81012d0:	f7ff f806 	bl	81002e0 <memchr>
 81012d4:	9a04      	ldr	r2, [sp, #16]
 81012d6:	b9d8      	cbnz	r0, 8101310 <_vfiprintf_r+0x110>
 81012d8:	06d1      	lsls	r1, r2, #27
 81012da:	bf44      	itt	mi
 81012dc:	2320      	movmi	r3, #32
 81012de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81012e2:	0713      	lsls	r3, r2, #28
 81012e4:	bf44      	itt	mi
 81012e6:	232b      	movmi	r3, #43	; 0x2b
 81012e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81012ec:	f89a 3000 	ldrb.w	r3, [sl]
 81012f0:	2b2a      	cmp	r3, #42	; 0x2a
 81012f2:	d015      	beq.n	8101320 <_vfiprintf_r+0x120>
 81012f4:	9a07      	ldr	r2, [sp, #28]
 81012f6:	4654      	mov	r4, sl
 81012f8:	2000      	movs	r0, #0
 81012fa:	f04f 0c0a 	mov.w	ip, #10
 81012fe:	4621      	mov	r1, r4
 8101300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8101304:	3b30      	subs	r3, #48	; 0x30
 8101306:	2b09      	cmp	r3, #9
 8101308:	d94d      	bls.n	81013a6 <_vfiprintf_r+0x1a6>
 810130a:	b1b0      	cbz	r0, 810133a <_vfiprintf_r+0x13a>
 810130c:	9207      	str	r2, [sp, #28]
 810130e:	e014      	b.n	810133a <_vfiprintf_r+0x13a>
 8101310:	eba0 0308 	sub.w	r3, r0, r8
 8101314:	fa09 f303 	lsl.w	r3, r9, r3
 8101318:	4313      	orrs	r3, r2
 810131a:	9304      	str	r3, [sp, #16]
 810131c:	46a2      	mov	sl, r4
 810131e:	e7d2      	b.n	81012c6 <_vfiprintf_r+0xc6>
 8101320:	9b03      	ldr	r3, [sp, #12]
 8101322:	1d19      	adds	r1, r3, #4
 8101324:	681b      	ldr	r3, [r3, #0]
 8101326:	9103      	str	r1, [sp, #12]
 8101328:	2b00      	cmp	r3, #0
 810132a:	bfbb      	ittet	lt
 810132c:	425b      	neglt	r3, r3
 810132e:	f042 0202 	orrlt.w	r2, r2, #2
 8101332:	9307      	strge	r3, [sp, #28]
 8101334:	9307      	strlt	r3, [sp, #28]
 8101336:	bfb8      	it	lt
 8101338:	9204      	strlt	r2, [sp, #16]
 810133a:	7823      	ldrb	r3, [r4, #0]
 810133c:	2b2e      	cmp	r3, #46	; 0x2e
 810133e:	d10c      	bne.n	810135a <_vfiprintf_r+0x15a>
 8101340:	7863      	ldrb	r3, [r4, #1]
 8101342:	2b2a      	cmp	r3, #42	; 0x2a
 8101344:	d134      	bne.n	81013b0 <_vfiprintf_r+0x1b0>
 8101346:	9b03      	ldr	r3, [sp, #12]
 8101348:	1d1a      	adds	r2, r3, #4
 810134a:	681b      	ldr	r3, [r3, #0]
 810134c:	9203      	str	r2, [sp, #12]
 810134e:	2b00      	cmp	r3, #0
 8101350:	bfb8      	it	lt
 8101352:	f04f 33ff 	movlt.w	r3, #4294967295
 8101356:	3402      	adds	r4, #2
 8101358:	9305      	str	r3, [sp, #20]
 810135a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8101424 <_vfiprintf_r+0x224>
 810135e:	7821      	ldrb	r1, [r4, #0]
 8101360:	2203      	movs	r2, #3
 8101362:	4650      	mov	r0, sl
 8101364:	f7fe ffbc 	bl	81002e0 <memchr>
 8101368:	b138      	cbz	r0, 810137a <_vfiprintf_r+0x17a>
 810136a:	9b04      	ldr	r3, [sp, #16]
 810136c:	eba0 000a 	sub.w	r0, r0, sl
 8101370:	2240      	movs	r2, #64	; 0x40
 8101372:	4082      	lsls	r2, r0
 8101374:	4313      	orrs	r3, r2
 8101376:	3401      	adds	r4, #1
 8101378:	9304      	str	r3, [sp, #16]
 810137a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810137e:	482a      	ldr	r0, [pc, #168]	; (8101428 <_vfiprintf_r+0x228>)
 8101380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8101384:	2206      	movs	r2, #6
 8101386:	f7fe ffab 	bl	81002e0 <memchr>
 810138a:	2800      	cmp	r0, #0
 810138c:	d03f      	beq.n	810140e <_vfiprintf_r+0x20e>
 810138e:	4b27      	ldr	r3, [pc, #156]	; (810142c <_vfiprintf_r+0x22c>)
 8101390:	bb1b      	cbnz	r3, 81013da <_vfiprintf_r+0x1da>
 8101392:	9b03      	ldr	r3, [sp, #12]
 8101394:	3307      	adds	r3, #7
 8101396:	f023 0307 	bic.w	r3, r3, #7
 810139a:	3308      	adds	r3, #8
 810139c:	9303      	str	r3, [sp, #12]
 810139e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81013a0:	443b      	add	r3, r7
 81013a2:	9309      	str	r3, [sp, #36]	; 0x24
 81013a4:	e768      	b.n	8101278 <_vfiprintf_r+0x78>
 81013a6:	fb0c 3202 	mla	r2, ip, r2, r3
 81013aa:	460c      	mov	r4, r1
 81013ac:	2001      	movs	r0, #1
 81013ae:	e7a6      	b.n	81012fe <_vfiprintf_r+0xfe>
 81013b0:	2300      	movs	r3, #0
 81013b2:	3401      	adds	r4, #1
 81013b4:	9305      	str	r3, [sp, #20]
 81013b6:	4619      	mov	r1, r3
 81013b8:	f04f 0c0a 	mov.w	ip, #10
 81013bc:	4620      	mov	r0, r4
 81013be:	f810 2b01 	ldrb.w	r2, [r0], #1
 81013c2:	3a30      	subs	r2, #48	; 0x30
 81013c4:	2a09      	cmp	r2, #9
 81013c6:	d903      	bls.n	81013d0 <_vfiprintf_r+0x1d0>
 81013c8:	2b00      	cmp	r3, #0
 81013ca:	d0c6      	beq.n	810135a <_vfiprintf_r+0x15a>
 81013cc:	9105      	str	r1, [sp, #20]
 81013ce:	e7c4      	b.n	810135a <_vfiprintf_r+0x15a>
 81013d0:	fb0c 2101 	mla	r1, ip, r1, r2
 81013d4:	4604      	mov	r4, r0
 81013d6:	2301      	movs	r3, #1
 81013d8:	e7f0      	b.n	81013bc <_vfiprintf_r+0x1bc>
 81013da:	ab03      	add	r3, sp, #12
 81013dc:	9300      	str	r3, [sp, #0]
 81013de:	462a      	mov	r2, r5
 81013e0:	4b13      	ldr	r3, [pc, #76]	; (8101430 <_vfiprintf_r+0x230>)
 81013e2:	a904      	add	r1, sp, #16
 81013e4:	4630      	mov	r0, r6
 81013e6:	f3af 8000 	nop.w
 81013ea:	4607      	mov	r7, r0
 81013ec:	1c78      	adds	r0, r7, #1
 81013ee:	d1d6      	bne.n	810139e <_vfiprintf_r+0x19e>
 81013f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81013f2:	07d9      	lsls	r1, r3, #31
 81013f4:	d405      	bmi.n	8101402 <_vfiprintf_r+0x202>
 81013f6:	89ab      	ldrh	r3, [r5, #12]
 81013f8:	059a      	lsls	r2, r3, #22
 81013fa:	d402      	bmi.n	8101402 <_vfiprintf_r+0x202>
 81013fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81013fe:	f7ff fddf 	bl	8100fc0 <__retarget_lock_release_recursive>
 8101402:	89ab      	ldrh	r3, [r5, #12]
 8101404:	065b      	lsls	r3, r3, #25
 8101406:	f53f af1d 	bmi.w	8101244 <_vfiprintf_r+0x44>
 810140a:	9809      	ldr	r0, [sp, #36]	; 0x24
 810140c:	e71c      	b.n	8101248 <_vfiprintf_r+0x48>
 810140e:	ab03      	add	r3, sp, #12
 8101410:	9300      	str	r3, [sp, #0]
 8101412:	462a      	mov	r2, r5
 8101414:	4b06      	ldr	r3, [pc, #24]	; (8101430 <_vfiprintf_r+0x230>)
 8101416:	a904      	add	r1, sp, #16
 8101418:	4630      	mov	r0, r6
 810141a:	f000 f879 	bl	8101510 <_printf_i>
 810141e:	e7e4      	b.n	81013ea <_vfiprintf_r+0x1ea>
 8101420:	08101b4d 	.word	0x08101b4d
 8101424:	08101b53 	.word	0x08101b53
 8101428:	08101b57 	.word	0x08101b57
 810142c:	00000000 	.word	0x00000000
 8101430:	081011db 	.word	0x081011db

08101434 <_printf_common>:
 8101434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8101438:	4616      	mov	r6, r2
 810143a:	4699      	mov	r9, r3
 810143c:	688a      	ldr	r2, [r1, #8]
 810143e:	690b      	ldr	r3, [r1, #16]
 8101440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8101444:	4293      	cmp	r3, r2
 8101446:	bfb8      	it	lt
 8101448:	4613      	movlt	r3, r2
 810144a:	6033      	str	r3, [r6, #0]
 810144c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8101450:	4607      	mov	r7, r0
 8101452:	460c      	mov	r4, r1
 8101454:	b10a      	cbz	r2, 810145a <_printf_common+0x26>
 8101456:	3301      	adds	r3, #1
 8101458:	6033      	str	r3, [r6, #0]
 810145a:	6823      	ldr	r3, [r4, #0]
 810145c:	0699      	lsls	r1, r3, #26
 810145e:	bf42      	ittt	mi
 8101460:	6833      	ldrmi	r3, [r6, #0]
 8101462:	3302      	addmi	r3, #2
 8101464:	6033      	strmi	r3, [r6, #0]
 8101466:	6825      	ldr	r5, [r4, #0]
 8101468:	f015 0506 	ands.w	r5, r5, #6
 810146c:	d106      	bne.n	810147c <_printf_common+0x48>
 810146e:	f104 0a19 	add.w	sl, r4, #25
 8101472:	68e3      	ldr	r3, [r4, #12]
 8101474:	6832      	ldr	r2, [r6, #0]
 8101476:	1a9b      	subs	r3, r3, r2
 8101478:	42ab      	cmp	r3, r5
 810147a:	dc26      	bgt.n	81014ca <_printf_common+0x96>
 810147c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8101480:	1e13      	subs	r3, r2, #0
 8101482:	6822      	ldr	r2, [r4, #0]
 8101484:	bf18      	it	ne
 8101486:	2301      	movne	r3, #1
 8101488:	0692      	lsls	r2, r2, #26
 810148a:	d42b      	bmi.n	81014e4 <_printf_common+0xb0>
 810148c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8101490:	4649      	mov	r1, r9
 8101492:	4638      	mov	r0, r7
 8101494:	47c0      	blx	r8
 8101496:	3001      	adds	r0, #1
 8101498:	d01e      	beq.n	81014d8 <_printf_common+0xa4>
 810149a:	6823      	ldr	r3, [r4, #0]
 810149c:	6922      	ldr	r2, [r4, #16]
 810149e:	f003 0306 	and.w	r3, r3, #6
 81014a2:	2b04      	cmp	r3, #4
 81014a4:	bf02      	ittt	eq
 81014a6:	68e5      	ldreq	r5, [r4, #12]
 81014a8:	6833      	ldreq	r3, [r6, #0]
 81014aa:	1aed      	subeq	r5, r5, r3
 81014ac:	68a3      	ldr	r3, [r4, #8]
 81014ae:	bf0c      	ite	eq
 81014b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81014b4:	2500      	movne	r5, #0
 81014b6:	4293      	cmp	r3, r2
 81014b8:	bfc4      	itt	gt
 81014ba:	1a9b      	subgt	r3, r3, r2
 81014bc:	18ed      	addgt	r5, r5, r3
 81014be:	2600      	movs	r6, #0
 81014c0:	341a      	adds	r4, #26
 81014c2:	42b5      	cmp	r5, r6
 81014c4:	d11a      	bne.n	81014fc <_printf_common+0xc8>
 81014c6:	2000      	movs	r0, #0
 81014c8:	e008      	b.n	81014dc <_printf_common+0xa8>
 81014ca:	2301      	movs	r3, #1
 81014cc:	4652      	mov	r2, sl
 81014ce:	4649      	mov	r1, r9
 81014d0:	4638      	mov	r0, r7
 81014d2:	47c0      	blx	r8
 81014d4:	3001      	adds	r0, #1
 81014d6:	d103      	bne.n	81014e0 <_printf_common+0xac>
 81014d8:	f04f 30ff 	mov.w	r0, #4294967295
 81014dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81014e0:	3501      	adds	r5, #1
 81014e2:	e7c6      	b.n	8101472 <_printf_common+0x3e>
 81014e4:	18e1      	adds	r1, r4, r3
 81014e6:	1c5a      	adds	r2, r3, #1
 81014e8:	2030      	movs	r0, #48	; 0x30
 81014ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81014ee:	4422      	add	r2, r4
 81014f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81014f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81014f8:	3302      	adds	r3, #2
 81014fa:	e7c7      	b.n	810148c <_printf_common+0x58>
 81014fc:	2301      	movs	r3, #1
 81014fe:	4622      	mov	r2, r4
 8101500:	4649      	mov	r1, r9
 8101502:	4638      	mov	r0, r7
 8101504:	47c0      	blx	r8
 8101506:	3001      	adds	r0, #1
 8101508:	d0e6      	beq.n	81014d8 <_printf_common+0xa4>
 810150a:	3601      	adds	r6, #1
 810150c:	e7d9      	b.n	81014c2 <_printf_common+0x8e>
	...

08101510 <_printf_i>:
 8101510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8101514:	7e0f      	ldrb	r7, [r1, #24]
 8101516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8101518:	2f78      	cmp	r7, #120	; 0x78
 810151a:	4691      	mov	r9, r2
 810151c:	4680      	mov	r8, r0
 810151e:	460c      	mov	r4, r1
 8101520:	469a      	mov	sl, r3
 8101522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8101526:	d807      	bhi.n	8101538 <_printf_i+0x28>
 8101528:	2f62      	cmp	r7, #98	; 0x62
 810152a:	d80a      	bhi.n	8101542 <_printf_i+0x32>
 810152c:	2f00      	cmp	r7, #0
 810152e:	f000 80d4 	beq.w	81016da <_printf_i+0x1ca>
 8101532:	2f58      	cmp	r7, #88	; 0x58
 8101534:	f000 80c0 	beq.w	81016b8 <_printf_i+0x1a8>
 8101538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810153c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8101540:	e03a      	b.n	81015b8 <_printf_i+0xa8>
 8101542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8101546:	2b15      	cmp	r3, #21
 8101548:	d8f6      	bhi.n	8101538 <_printf_i+0x28>
 810154a:	a101      	add	r1, pc, #4	; (adr r1, 8101550 <_printf_i+0x40>)
 810154c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8101550:	081015a9 	.word	0x081015a9
 8101554:	081015bd 	.word	0x081015bd
 8101558:	08101539 	.word	0x08101539
 810155c:	08101539 	.word	0x08101539
 8101560:	08101539 	.word	0x08101539
 8101564:	08101539 	.word	0x08101539
 8101568:	081015bd 	.word	0x081015bd
 810156c:	08101539 	.word	0x08101539
 8101570:	08101539 	.word	0x08101539
 8101574:	08101539 	.word	0x08101539
 8101578:	08101539 	.word	0x08101539
 810157c:	081016c1 	.word	0x081016c1
 8101580:	081015e9 	.word	0x081015e9
 8101584:	0810167b 	.word	0x0810167b
 8101588:	08101539 	.word	0x08101539
 810158c:	08101539 	.word	0x08101539
 8101590:	081016e3 	.word	0x081016e3
 8101594:	08101539 	.word	0x08101539
 8101598:	081015e9 	.word	0x081015e9
 810159c:	08101539 	.word	0x08101539
 81015a0:	08101539 	.word	0x08101539
 81015a4:	08101683 	.word	0x08101683
 81015a8:	682b      	ldr	r3, [r5, #0]
 81015aa:	1d1a      	adds	r2, r3, #4
 81015ac:	681b      	ldr	r3, [r3, #0]
 81015ae:	602a      	str	r2, [r5, #0]
 81015b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81015b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81015b8:	2301      	movs	r3, #1
 81015ba:	e09f      	b.n	81016fc <_printf_i+0x1ec>
 81015bc:	6820      	ldr	r0, [r4, #0]
 81015be:	682b      	ldr	r3, [r5, #0]
 81015c0:	0607      	lsls	r7, r0, #24
 81015c2:	f103 0104 	add.w	r1, r3, #4
 81015c6:	6029      	str	r1, [r5, #0]
 81015c8:	d501      	bpl.n	81015ce <_printf_i+0xbe>
 81015ca:	681e      	ldr	r6, [r3, #0]
 81015cc:	e003      	b.n	81015d6 <_printf_i+0xc6>
 81015ce:	0646      	lsls	r6, r0, #25
 81015d0:	d5fb      	bpl.n	81015ca <_printf_i+0xba>
 81015d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 81015d6:	2e00      	cmp	r6, #0
 81015d8:	da03      	bge.n	81015e2 <_printf_i+0xd2>
 81015da:	232d      	movs	r3, #45	; 0x2d
 81015dc:	4276      	negs	r6, r6
 81015de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81015e2:	485a      	ldr	r0, [pc, #360]	; (810174c <_printf_i+0x23c>)
 81015e4:	230a      	movs	r3, #10
 81015e6:	e012      	b.n	810160e <_printf_i+0xfe>
 81015e8:	682b      	ldr	r3, [r5, #0]
 81015ea:	6820      	ldr	r0, [r4, #0]
 81015ec:	1d19      	adds	r1, r3, #4
 81015ee:	6029      	str	r1, [r5, #0]
 81015f0:	0605      	lsls	r5, r0, #24
 81015f2:	d501      	bpl.n	81015f8 <_printf_i+0xe8>
 81015f4:	681e      	ldr	r6, [r3, #0]
 81015f6:	e002      	b.n	81015fe <_printf_i+0xee>
 81015f8:	0641      	lsls	r1, r0, #25
 81015fa:	d5fb      	bpl.n	81015f4 <_printf_i+0xe4>
 81015fc:	881e      	ldrh	r6, [r3, #0]
 81015fe:	4853      	ldr	r0, [pc, #332]	; (810174c <_printf_i+0x23c>)
 8101600:	2f6f      	cmp	r7, #111	; 0x6f
 8101602:	bf0c      	ite	eq
 8101604:	2308      	moveq	r3, #8
 8101606:	230a      	movne	r3, #10
 8101608:	2100      	movs	r1, #0
 810160a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810160e:	6865      	ldr	r5, [r4, #4]
 8101610:	60a5      	str	r5, [r4, #8]
 8101612:	2d00      	cmp	r5, #0
 8101614:	bfa2      	ittt	ge
 8101616:	6821      	ldrge	r1, [r4, #0]
 8101618:	f021 0104 	bicge.w	r1, r1, #4
 810161c:	6021      	strge	r1, [r4, #0]
 810161e:	b90e      	cbnz	r6, 8101624 <_printf_i+0x114>
 8101620:	2d00      	cmp	r5, #0
 8101622:	d04b      	beq.n	81016bc <_printf_i+0x1ac>
 8101624:	4615      	mov	r5, r2
 8101626:	fbb6 f1f3 	udiv	r1, r6, r3
 810162a:	fb03 6711 	mls	r7, r3, r1, r6
 810162e:	5dc7      	ldrb	r7, [r0, r7]
 8101630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8101634:	4637      	mov	r7, r6
 8101636:	42bb      	cmp	r3, r7
 8101638:	460e      	mov	r6, r1
 810163a:	d9f4      	bls.n	8101626 <_printf_i+0x116>
 810163c:	2b08      	cmp	r3, #8
 810163e:	d10b      	bne.n	8101658 <_printf_i+0x148>
 8101640:	6823      	ldr	r3, [r4, #0]
 8101642:	07de      	lsls	r6, r3, #31
 8101644:	d508      	bpl.n	8101658 <_printf_i+0x148>
 8101646:	6923      	ldr	r3, [r4, #16]
 8101648:	6861      	ldr	r1, [r4, #4]
 810164a:	4299      	cmp	r1, r3
 810164c:	bfde      	ittt	le
 810164e:	2330      	movle	r3, #48	; 0x30
 8101650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8101654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8101658:	1b52      	subs	r2, r2, r5
 810165a:	6122      	str	r2, [r4, #16]
 810165c:	f8cd a000 	str.w	sl, [sp]
 8101660:	464b      	mov	r3, r9
 8101662:	aa03      	add	r2, sp, #12
 8101664:	4621      	mov	r1, r4
 8101666:	4640      	mov	r0, r8
 8101668:	f7ff fee4 	bl	8101434 <_printf_common>
 810166c:	3001      	adds	r0, #1
 810166e:	d14a      	bne.n	8101706 <_printf_i+0x1f6>
 8101670:	f04f 30ff 	mov.w	r0, #4294967295
 8101674:	b004      	add	sp, #16
 8101676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810167a:	6823      	ldr	r3, [r4, #0]
 810167c:	f043 0320 	orr.w	r3, r3, #32
 8101680:	6023      	str	r3, [r4, #0]
 8101682:	4833      	ldr	r0, [pc, #204]	; (8101750 <_printf_i+0x240>)
 8101684:	2778      	movs	r7, #120	; 0x78
 8101686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810168a:	6823      	ldr	r3, [r4, #0]
 810168c:	6829      	ldr	r1, [r5, #0]
 810168e:	061f      	lsls	r7, r3, #24
 8101690:	f851 6b04 	ldr.w	r6, [r1], #4
 8101694:	d402      	bmi.n	810169c <_printf_i+0x18c>
 8101696:	065f      	lsls	r7, r3, #25
 8101698:	bf48      	it	mi
 810169a:	b2b6      	uxthmi	r6, r6
 810169c:	07df      	lsls	r7, r3, #31
 810169e:	bf48      	it	mi
 81016a0:	f043 0320 	orrmi.w	r3, r3, #32
 81016a4:	6029      	str	r1, [r5, #0]
 81016a6:	bf48      	it	mi
 81016a8:	6023      	strmi	r3, [r4, #0]
 81016aa:	b91e      	cbnz	r6, 81016b4 <_printf_i+0x1a4>
 81016ac:	6823      	ldr	r3, [r4, #0]
 81016ae:	f023 0320 	bic.w	r3, r3, #32
 81016b2:	6023      	str	r3, [r4, #0]
 81016b4:	2310      	movs	r3, #16
 81016b6:	e7a7      	b.n	8101608 <_printf_i+0xf8>
 81016b8:	4824      	ldr	r0, [pc, #144]	; (810174c <_printf_i+0x23c>)
 81016ba:	e7e4      	b.n	8101686 <_printf_i+0x176>
 81016bc:	4615      	mov	r5, r2
 81016be:	e7bd      	b.n	810163c <_printf_i+0x12c>
 81016c0:	682b      	ldr	r3, [r5, #0]
 81016c2:	6826      	ldr	r6, [r4, #0]
 81016c4:	6961      	ldr	r1, [r4, #20]
 81016c6:	1d18      	adds	r0, r3, #4
 81016c8:	6028      	str	r0, [r5, #0]
 81016ca:	0635      	lsls	r5, r6, #24
 81016cc:	681b      	ldr	r3, [r3, #0]
 81016ce:	d501      	bpl.n	81016d4 <_printf_i+0x1c4>
 81016d0:	6019      	str	r1, [r3, #0]
 81016d2:	e002      	b.n	81016da <_printf_i+0x1ca>
 81016d4:	0670      	lsls	r0, r6, #25
 81016d6:	d5fb      	bpl.n	81016d0 <_printf_i+0x1c0>
 81016d8:	8019      	strh	r1, [r3, #0]
 81016da:	2300      	movs	r3, #0
 81016dc:	6123      	str	r3, [r4, #16]
 81016de:	4615      	mov	r5, r2
 81016e0:	e7bc      	b.n	810165c <_printf_i+0x14c>
 81016e2:	682b      	ldr	r3, [r5, #0]
 81016e4:	1d1a      	adds	r2, r3, #4
 81016e6:	602a      	str	r2, [r5, #0]
 81016e8:	681d      	ldr	r5, [r3, #0]
 81016ea:	6862      	ldr	r2, [r4, #4]
 81016ec:	2100      	movs	r1, #0
 81016ee:	4628      	mov	r0, r5
 81016f0:	f7fe fdf6 	bl	81002e0 <memchr>
 81016f4:	b108      	cbz	r0, 81016fa <_printf_i+0x1ea>
 81016f6:	1b40      	subs	r0, r0, r5
 81016f8:	6060      	str	r0, [r4, #4]
 81016fa:	6863      	ldr	r3, [r4, #4]
 81016fc:	6123      	str	r3, [r4, #16]
 81016fe:	2300      	movs	r3, #0
 8101700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8101704:	e7aa      	b.n	810165c <_printf_i+0x14c>
 8101706:	6923      	ldr	r3, [r4, #16]
 8101708:	462a      	mov	r2, r5
 810170a:	4649      	mov	r1, r9
 810170c:	4640      	mov	r0, r8
 810170e:	47d0      	blx	sl
 8101710:	3001      	adds	r0, #1
 8101712:	d0ad      	beq.n	8101670 <_printf_i+0x160>
 8101714:	6823      	ldr	r3, [r4, #0]
 8101716:	079b      	lsls	r3, r3, #30
 8101718:	d413      	bmi.n	8101742 <_printf_i+0x232>
 810171a:	68e0      	ldr	r0, [r4, #12]
 810171c:	9b03      	ldr	r3, [sp, #12]
 810171e:	4298      	cmp	r0, r3
 8101720:	bfb8      	it	lt
 8101722:	4618      	movlt	r0, r3
 8101724:	e7a6      	b.n	8101674 <_printf_i+0x164>
 8101726:	2301      	movs	r3, #1
 8101728:	4632      	mov	r2, r6
 810172a:	4649      	mov	r1, r9
 810172c:	4640      	mov	r0, r8
 810172e:	47d0      	blx	sl
 8101730:	3001      	adds	r0, #1
 8101732:	d09d      	beq.n	8101670 <_printf_i+0x160>
 8101734:	3501      	adds	r5, #1
 8101736:	68e3      	ldr	r3, [r4, #12]
 8101738:	9903      	ldr	r1, [sp, #12]
 810173a:	1a5b      	subs	r3, r3, r1
 810173c:	42ab      	cmp	r3, r5
 810173e:	dcf2      	bgt.n	8101726 <_printf_i+0x216>
 8101740:	e7eb      	b.n	810171a <_printf_i+0x20a>
 8101742:	2500      	movs	r5, #0
 8101744:	f104 0619 	add.w	r6, r4, #25
 8101748:	e7f5      	b.n	8101736 <_printf_i+0x226>
 810174a:	bf00      	nop
 810174c:	08101b5e 	.word	0x08101b5e
 8101750:	08101b6f 	.word	0x08101b6f

08101754 <__sflush_r>:
 8101754:	898a      	ldrh	r2, [r1, #12]
 8101756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101758:	4605      	mov	r5, r0
 810175a:	0710      	lsls	r0, r2, #28
 810175c:	460c      	mov	r4, r1
 810175e:	d457      	bmi.n	8101810 <__sflush_r+0xbc>
 8101760:	684b      	ldr	r3, [r1, #4]
 8101762:	2b00      	cmp	r3, #0
 8101764:	dc04      	bgt.n	8101770 <__sflush_r+0x1c>
 8101766:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8101768:	2b00      	cmp	r3, #0
 810176a:	dc01      	bgt.n	8101770 <__sflush_r+0x1c>
 810176c:	2000      	movs	r0, #0
 810176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8101772:	2e00      	cmp	r6, #0
 8101774:	d0fa      	beq.n	810176c <__sflush_r+0x18>
 8101776:	2300      	movs	r3, #0
 8101778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810177c:	682f      	ldr	r7, [r5, #0]
 810177e:	6a21      	ldr	r1, [r4, #32]
 8101780:	602b      	str	r3, [r5, #0]
 8101782:	d032      	beq.n	81017ea <__sflush_r+0x96>
 8101784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8101786:	89a3      	ldrh	r3, [r4, #12]
 8101788:	075a      	lsls	r2, r3, #29
 810178a:	d505      	bpl.n	8101798 <__sflush_r+0x44>
 810178c:	6863      	ldr	r3, [r4, #4]
 810178e:	1ac0      	subs	r0, r0, r3
 8101790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8101792:	b10b      	cbz	r3, 8101798 <__sflush_r+0x44>
 8101794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8101796:	1ac0      	subs	r0, r0, r3
 8101798:	2300      	movs	r3, #0
 810179a:	4602      	mov	r2, r0
 810179c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810179e:	6a21      	ldr	r1, [r4, #32]
 81017a0:	4628      	mov	r0, r5
 81017a2:	47b0      	blx	r6
 81017a4:	1c43      	adds	r3, r0, #1
 81017a6:	89a3      	ldrh	r3, [r4, #12]
 81017a8:	d106      	bne.n	81017b8 <__sflush_r+0x64>
 81017aa:	6829      	ldr	r1, [r5, #0]
 81017ac:	291d      	cmp	r1, #29
 81017ae:	d82b      	bhi.n	8101808 <__sflush_r+0xb4>
 81017b0:	4a28      	ldr	r2, [pc, #160]	; (8101854 <__sflush_r+0x100>)
 81017b2:	410a      	asrs	r2, r1
 81017b4:	07d6      	lsls	r6, r2, #31
 81017b6:	d427      	bmi.n	8101808 <__sflush_r+0xb4>
 81017b8:	2200      	movs	r2, #0
 81017ba:	6062      	str	r2, [r4, #4]
 81017bc:	04d9      	lsls	r1, r3, #19
 81017be:	6922      	ldr	r2, [r4, #16]
 81017c0:	6022      	str	r2, [r4, #0]
 81017c2:	d504      	bpl.n	81017ce <__sflush_r+0x7a>
 81017c4:	1c42      	adds	r2, r0, #1
 81017c6:	d101      	bne.n	81017cc <__sflush_r+0x78>
 81017c8:	682b      	ldr	r3, [r5, #0]
 81017ca:	b903      	cbnz	r3, 81017ce <__sflush_r+0x7a>
 81017cc:	6560      	str	r0, [r4, #84]	; 0x54
 81017ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81017d0:	602f      	str	r7, [r5, #0]
 81017d2:	2900      	cmp	r1, #0
 81017d4:	d0ca      	beq.n	810176c <__sflush_r+0x18>
 81017d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81017da:	4299      	cmp	r1, r3
 81017dc:	d002      	beq.n	81017e4 <__sflush_r+0x90>
 81017de:	4628      	mov	r0, r5
 81017e0:	f7ff fbf0 	bl	8100fc4 <_free_r>
 81017e4:	2000      	movs	r0, #0
 81017e6:	6360      	str	r0, [r4, #52]	; 0x34
 81017e8:	e7c1      	b.n	810176e <__sflush_r+0x1a>
 81017ea:	2301      	movs	r3, #1
 81017ec:	4628      	mov	r0, r5
 81017ee:	47b0      	blx	r6
 81017f0:	1c41      	adds	r1, r0, #1
 81017f2:	d1c8      	bne.n	8101786 <__sflush_r+0x32>
 81017f4:	682b      	ldr	r3, [r5, #0]
 81017f6:	2b00      	cmp	r3, #0
 81017f8:	d0c5      	beq.n	8101786 <__sflush_r+0x32>
 81017fa:	2b1d      	cmp	r3, #29
 81017fc:	d001      	beq.n	8101802 <__sflush_r+0xae>
 81017fe:	2b16      	cmp	r3, #22
 8101800:	d101      	bne.n	8101806 <__sflush_r+0xb2>
 8101802:	602f      	str	r7, [r5, #0]
 8101804:	e7b2      	b.n	810176c <__sflush_r+0x18>
 8101806:	89a3      	ldrh	r3, [r4, #12]
 8101808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810180c:	81a3      	strh	r3, [r4, #12]
 810180e:	e7ae      	b.n	810176e <__sflush_r+0x1a>
 8101810:	690f      	ldr	r7, [r1, #16]
 8101812:	2f00      	cmp	r7, #0
 8101814:	d0aa      	beq.n	810176c <__sflush_r+0x18>
 8101816:	0793      	lsls	r3, r2, #30
 8101818:	680e      	ldr	r6, [r1, #0]
 810181a:	bf08      	it	eq
 810181c:	694b      	ldreq	r3, [r1, #20]
 810181e:	600f      	str	r7, [r1, #0]
 8101820:	bf18      	it	ne
 8101822:	2300      	movne	r3, #0
 8101824:	1bf6      	subs	r6, r6, r7
 8101826:	608b      	str	r3, [r1, #8]
 8101828:	2e00      	cmp	r6, #0
 810182a:	dd9f      	ble.n	810176c <__sflush_r+0x18>
 810182c:	6a21      	ldr	r1, [r4, #32]
 810182e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8101832:	4633      	mov	r3, r6
 8101834:	463a      	mov	r2, r7
 8101836:	4628      	mov	r0, r5
 8101838:	47e0      	blx	ip
 810183a:	2800      	cmp	r0, #0
 810183c:	dc06      	bgt.n	810184c <__sflush_r+0xf8>
 810183e:	89a3      	ldrh	r3, [r4, #12]
 8101840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101844:	81a3      	strh	r3, [r4, #12]
 8101846:	f04f 30ff 	mov.w	r0, #4294967295
 810184a:	e790      	b.n	810176e <__sflush_r+0x1a>
 810184c:	4407      	add	r7, r0
 810184e:	1a36      	subs	r6, r6, r0
 8101850:	e7ea      	b.n	8101828 <__sflush_r+0xd4>
 8101852:	bf00      	nop
 8101854:	dfbffffe 	.word	0xdfbffffe

08101858 <_fflush_r>:
 8101858:	b538      	push	{r3, r4, r5, lr}
 810185a:	690b      	ldr	r3, [r1, #16]
 810185c:	4605      	mov	r5, r0
 810185e:	460c      	mov	r4, r1
 8101860:	b913      	cbnz	r3, 8101868 <_fflush_r+0x10>
 8101862:	2500      	movs	r5, #0
 8101864:	4628      	mov	r0, r5
 8101866:	bd38      	pop	{r3, r4, r5, pc}
 8101868:	b118      	cbz	r0, 8101872 <_fflush_r+0x1a>
 810186a:	6a03      	ldr	r3, [r0, #32]
 810186c:	b90b      	cbnz	r3, 8101872 <_fflush_r+0x1a>
 810186e:	f7ff faa1 	bl	8100db4 <__sinit>
 8101872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8101876:	2b00      	cmp	r3, #0
 8101878:	d0f3      	beq.n	8101862 <_fflush_r+0xa>
 810187a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810187c:	07d0      	lsls	r0, r2, #31
 810187e:	d404      	bmi.n	810188a <_fflush_r+0x32>
 8101880:	0599      	lsls	r1, r3, #22
 8101882:	d402      	bmi.n	810188a <_fflush_r+0x32>
 8101884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8101886:	f7ff fb9a 	bl	8100fbe <__retarget_lock_acquire_recursive>
 810188a:	4628      	mov	r0, r5
 810188c:	4621      	mov	r1, r4
 810188e:	f7ff ff61 	bl	8101754 <__sflush_r>
 8101892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8101894:	07da      	lsls	r2, r3, #31
 8101896:	4605      	mov	r5, r0
 8101898:	d4e4      	bmi.n	8101864 <_fflush_r+0xc>
 810189a:	89a3      	ldrh	r3, [r4, #12]
 810189c:	059b      	lsls	r3, r3, #22
 810189e:	d4e1      	bmi.n	8101864 <_fflush_r+0xc>
 81018a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81018a2:	f7ff fb8d 	bl	8100fc0 <__retarget_lock_release_recursive>
 81018a6:	e7dd      	b.n	8101864 <_fflush_r+0xc>

081018a8 <__swbuf_r>:
 81018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81018aa:	460e      	mov	r6, r1
 81018ac:	4614      	mov	r4, r2
 81018ae:	4605      	mov	r5, r0
 81018b0:	b118      	cbz	r0, 81018ba <__swbuf_r+0x12>
 81018b2:	6a03      	ldr	r3, [r0, #32]
 81018b4:	b90b      	cbnz	r3, 81018ba <__swbuf_r+0x12>
 81018b6:	f7ff fa7d 	bl	8100db4 <__sinit>
 81018ba:	69a3      	ldr	r3, [r4, #24]
 81018bc:	60a3      	str	r3, [r4, #8]
 81018be:	89a3      	ldrh	r3, [r4, #12]
 81018c0:	071a      	lsls	r2, r3, #28
 81018c2:	d525      	bpl.n	8101910 <__swbuf_r+0x68>
 81018c4:	6923      	ldr	r3, [r4, #16]
 81018c6:	b31b      	cbz	r3, 8101910 <__swbuf_r+0x68>
 81018c8:	6823      	ldr	r3, [r4, #0]
 81018ca:	6922      	ldr	r2, [r4, #16]
 81018cc:	1a98      	subs	r0, r3, r2
 81018ce:	6963      	ldr	r3, [r4, #20]
 81018d0:	b2f6      	uxtb	r6, r6
 81018d2:	4283      	cmp	r3, r0
 81018d4:	4637      	mov	r7, r6
 81018d6:	dc04      	bgt.n	81018e2 <__swbuf_r+0x3a>
 81018d8:	4621      	mov	r1, r4
 81018da:	4628      	mov	r0, r5
 81018dc:	f7ff ffbc 	bl	8101858 <_fflush_r>
 81018e0:	b9e0      	cbnz	r0, 810191c <__swbuf_r+0x74>
 81018e2:	68a3      	ldr	r3, [r4, #8]
 81018e4:	3b01      	subs	r3, #1
 81018e6:	60a3      	str	r3, [r4, #8]
 81018e8:	6823      	ldr	r3, [r4, #0]
 81018ea:	1c5a      	adds	r2, r3, #1
 81018ec:	6022      	str	r2, [r4, #0]
 81018ee:	701e      	strb	r6, [r3, #0]
 81018f0:	6962      	ldr	r2, [r4, #20]
 81018f2:	1c43      	adds	r3, r0, #1
 81018f4:	429a      	cmp	r2, r3
 81018f6:	d004      	beq.n	8101902 <__swbuf_r+0x5a>
 81018f8:	89a3      	ldrh	r3, [r4, #12]
 81018fa:	07db      	lsls	r3, r3, #31
 81018fc:	d506      	bpl.n	810190c <__swbuf_r+0x64>
 81018fe:	2e0a      	cmp	r6, #10
 8101900:	d104      	bne.n	810190c <__swbuf_r+0x64>
 8101902:	4621      	mov	r1, r4
 8101904:	4628      	mov	r0, r5
 8101906:	f7ff ffa7 	bl	8101858 <_fflush_r>
 810190a:	b938      	cbnz	r0, 810191c <__swbuf_r+0x74>
 810190c:	4638      	mov	r0, r7
 810190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101910:	4621      	mov	r1, r4
 8101912:	4628      	mov	r0, r5
 8101914:	f000 f806 	bl	8101924 <__swsetup_r>
 8101918:	2800      	cmp	r0, #0
 810191a:	d0d5      	beq.n	81018c8 <__swbuf_r+0x20>
 810191c:	f04f 37ff 	mov.w	r7, #4294967295
 8101920:	e7f4      	b.n	810190c <__swbuf_r+0x64>
	...

08101924 <__swsetup_r>:
 8101924:	b538      	push	{r3, r4, r5, lr}
 8101926:	4b2a      	ldr	r3, [pc, #168]	; (81019d0 <__swsetup_r+0xac>)
 8101928:	4605      	mov	r5, r0
 810192a:	6818      	ldr	r0, [r3, #0]
 810192c:	460c      	mov	r4, r1
 810192e:	b118      	cbz	r0, 8101938 <__swsetup_r+0x14>
 8101930:	6a03      	ldr	r3, [r0, #32]
 8101932:	b90b      	cbnz	r3, 8101938 <__swsetup_r+0x14>
 8101934:	f7ff fa3e 	bl	8100db4 <__sinit>
 8101938:	89a3      	ldrh	r3, [r4, #12]
 810193a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810193e:	0718      	lsls	r0, r3, #28
 8101940:	d422      	bmi.n	8101988 <__swsetup_r+0x64>
 8101942:	06d9      	lsls	r1, r3, #27
 8101944:	d407      	bmi.n	8101956 <__swsetup_r+0x32>
 8101946:	2309      	movs	r3, #9
 8101948:	602b      	str	r3, [r5, #0]
 810194a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810194e:	81a3      	strh	r3, [r4, #12]
 8101950:	f04f 30ff 	mov.w	r0, #4294967295
 8101954:	e034      	b.n	81019c0 <__swsetup_r+0x9c>
 8101956:	0758      	lsls	r0, r3, #29
 8101958:	d512      	bpl.n	8101980 <__swsetup_r+0x5c>
 810195a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810195c:	b141      	cbz	r1, 8101970 <__swsetup_r+0x4c>
 810195e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8101962:	4299      	cmp	r1, r3
 8101964:	d002      	beq.n	810196c <__swsetup_r+0x48>
 8101966:	4628      	mov	r0, r5
 8101968:	f7ff fb2c 	bl	8100fc4 <_free_r>
 810196c:	2300      	movs	r3, #0
 810196e:	6363      	str	r3, [r4, #52]	; 0x34
 8101970:	89a3      	ldrh	r3, [r4, #12]
 8101972:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8101976:	81a3      	strh	r3, [r4, #12]
 8101978:	2300      	movs	r3, #0
 810197a:	6063      	str	r3, [r4, #4]
 810197c:	6923      	ldr	r3, [r4, #16]
 810197e:	6023      	str	r3, [r4, #0]
 8101980:	89a3      	ldrh	r3, [r4, #12]
 8101982:	f043 0308 	orr.w	r3, r3, #8
 8101986:	81a3      	strh	r3, [r4, #12]
 8101988:	6923      	ldr	r3, [r4, #16]
 810198a:	b94b      	cbnz	r3, 81019a0 <__swsetup_r+0x7c>
 810198c:	89a3      	ldrh	r3, [r4, #12]
 810198e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8101992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8101996:	d003      	beq.n	81019a0 <__swsetup_r+0x7c>
 8101998:	4621      	mov	r1, r4
 810199a:	4628      	mov	r0, r5
 810199c:	f000 f850 	bl	8101a40 <__smakebuf_r>
 81019a0:	89a0      	ldrh	r0, [r4, #12]
 81019a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81019a6:	f010 0301 	ands.w	r3, r0, #1
 81019aa:	d00a      	beq.n	81019c2 <__swsetup_r+0x9e>
 81019ac:	2300      	movs	r3, #0
 81019ae:	60a3      	str	r3, [r4, #8]
 81019b0:	6963      	ldr	r3, [r4, #20]
 81019b2:	425b      	negs	r3, r3
 81019b4:	61a3      	str	r3, [r4, #24]
 81019b6:	6923      	ldr	r3, [r4, #16]
 81019b8:	b943      	cbnz	r3, 81019cc <__swsetup_r+0xa8>
 81019ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81019be:	d1c4      	bne.n	810194a <__swsetup_r+0x26>
 81019c0:	bd38      	pop	{r3, r4, r5, pc}
 81019c2:	0781      	lsls	r1, r0, #30
 81019c4:	bf58      	it	pl
 81019c6:	6963      	ldrpl	r3, [r4, #20]
 81019c8:	60a3      	str	r3, [r4, #8]
 81019ca:	e7f4      	b.n	81019b6 <__swsetup_r+0x92>
 81019cc:	2000      	movs	r0, #0
 81019ce:	e7f7      	b.n	81019c0 <__swsetup_r+0x9c>
 81019d0:	1000005c 	.word	0x1000005c

081019d4 <_sbrk_r>:
 81019d4:	b538      	push	{r3, r4, r5, lr}
 81019d6:	4d06      	ldr	r5, [pc, #24]	; (81019f0 <_sbrk_r+0x1c>)
 81019d8:	2300      	movs	r3, #0
 81019da:	4604      	mov	r4, r0
 81019dc:	4608      	mov	r0, r1
 81019de:	602b      	str	r3, [r5, #0]
 81019e0:	f7fe ffe2 	bl	81009a8 <_sbrk>
 81019e4:	1c43      	adds	r3, r0, #1
 81019e6:	d102      	bne.n	81019ee <_sbrk_r+0x1a>
 81019e8:	682b      	ldr	r3, [r5, #0]
 81019ea:	b103      	cbz	r3, 81019ee <_sbrk_r+0x1a>
 81019ec:	6023      	str	r3, [r4, #0]
 81019ee:	bd38      	pop	{r3, r4, r5, pc}
 81019f0:	100040b8 	.word	0x100040b8

081019f4 <__swhatbuf_r>:
 81019f4:	b570      	push	{r4, r5, r6, lr}
 81019f6:	460c      	mov	r4, r1
 81019f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81019fc:	2900      	cmp	r1, #0
 81019fe:	b096      	sub	sp, #88	; 0x58
 8101a00:	4615      	mov	r5, r2
 8101a02:	461e      	mov	r6, r3
 8101a04:	da0d      	bge.n	8101a22 <__swhatbuf_r+0x2e>
 8101a06:	89a3      	ldrh	r3, [r4, #12]
 8101a08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8101a0c:	f04f 0100 	mov.w	r1, #0
 8101a10:	bf0c      	ite	eq
 8101a12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8101a16:	2340      	movne	r3, #64	; 0x40
 8101a18:	2000      	movs	r0, #0
 8101a1a:	6031      	str	r1, [r6, #0]
 8101a1c:	602b      	str	r3, [r5, #0]
 8101a1e:	b016      	add	sp, #88	; 0x58
 8101a20:	bd70      	pop	{r4, r5, r6, pc}
 8101a22:	466a      	mov	r2, sp
 8101a24:	f000 f848 	bl	8101ab8 <_fstat_r>
 8101a28:	2800      	cmp	r0, #0
 8101a2a:	dbec      	blt.n	8101a06 <__swhatbuf_r+0x12>
 8101a2c:	9901      	ldr	r1, [sp, #4]
 8101a2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8101a32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8101a36:	4259      	negs	r1, r3
 8101a38:	4159      	adcs	r1, r3
 8101a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101a3e:	e7eb      	b.n	8101a18 <__swhatbuf_r+0x24>

08101a40 <__smakebuf_r>:
 8101a40:	898b      	ldrh	r3, [r1, #12]
 8101a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8101a44:	079d      	lsls	r5, r3, #30
 8101a46:	4606      	mov	r6, r0
 8101a48:	460c      	mov	r4, r1
 8101a4a:	d507      	bpl.n	8101a5c <__smakebuf_r+0x1c>
 8101a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8101a50:	6023      	str	r3, [r4, #0]
 8101a52:	6123      	str	r3, [r4, #16]
 8101a54:	2301      	movs	r3, #1
 8101a56:	6163      	str	r3, [r4, #20]
 8101a58:	b002      	add	sp, #8
 8101a5a:	bd70      	pop	{r4, r5, r6, pc}
 8101a5c:	ab01      	add	r3, sp, #4
 8101a5e:	466a      	mov	r2, sp
 8101a60:	f7ff ffc8 	bl	81019f4 <__swhatbuf_r>
 8101a64:	9900      	ldr	r1, [sp, #0]
 8101a66:	4605      	mov	r5, r0
 8101a68:	4630      	mov	r0, r6
 8101a6a:	f7ff fb15 	bl	8101098 <_malloc_r>
 8101a6e:	b948      	cbnz	r0, 8101a84 <__smakebuf_r+0x44>
 8101a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8101a74:	059a      	lsls	r2, r3, #22
 8101a76:	d4ef      	bmi.n	8101a58 <__smakebuf_r+0x18>
 8101a78:	f023 0303 	bic.w	r3, r3, #3
 8101a7c:	f043 0302 	orr.w	r3, r3, #2
 8101a80:	81a3      	strh	r3, [r4, #12]
 8101a82:	e7e3      	b.n	8101a4c <__smakebuf_r+0xc>
 8101a84:	89a3      	ldrh	r3, [r4, #12]
 8101a86:	6020      	str	r0, [r4, #0]
 8101a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101a8c:	81a3      	strh	r3, [r4, #12]
 8101a8e:	9b00      	ldr	r3, [sp, #0]
 8101a90:	6163      	str	r3, [r4, #20]
 8101a92:	9b01      	ldr	r3, [sp, #4]
 8101a94:	6120      	str	r0, [r4, #16]
 8101a96:	b15b      	cbz	r3, 8101ab0 <__smakebuf_r+0x70>
 8101a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8101a9c:	4630      	mov	r0, r6
 8101a9e:	f000 f81d 	bl	8101adc <_isatty_r>
 8101aa2:	b128      	cbz	r0, 8101ab0 <__smakebuf_r+0x70>
 8101aa4:	89a3      	ldrh	r3, [r4, #12]
 8101aa6:	f023 0303 	bic.w	r3, r3, #3
 8101aaa:	f043 0301 	orr.w	r3, r3, #1
 8101aae:	81a3      	strh	r3, [r4, #12]
 8101ab0:	89a3      	ldrh	r3, [r4, #12]
 8101ab2:	431d      	orrs	r5, r3
 8101ab4:	81a5      	strh	r5, [r4, #12]
 8101ab6:	e7cf      	b.n	8101a58 <__smakebuf_r+0x18>

08101ab8 <_fstat_r>:
 8101ab8:	b538      	push	{r3, r4, r5, lr}
 8101aba:	4d07      	ldr	r5, [pc, #28]	; (8101ad8 <_fstat_r+0x20>)
 8101abc:	2300      	movs	r3, #0
 8101abe:	4604      	mov	r4, r0
 8101ac0:	4608      	mov	r0, r1
 8101ac2:	4611      	mov	r1, r2
 8101ac4:	602b      	str	r3, [r5, #0]
 8101ac6:	f7fe ff4a 	bl	810095e <_fstat>
 8101aca:	1c43      	adds	r3, r0, #1
 8101acc:	d102      	bne.n	8101ad4 <_fstat_r+0x1c>
 8101ace:	682b      	ldr	r3, [r5, #0]
 8101ad0:	b103      	cbz	r3, 8101ad4 <_fstat_r+0x1c>
 8101ad2:	6023      	str	r3, [r4, #0]
 8101ad4:	bd38      	pop	{r3, r4, r5, pc}
 8101ad6:	bf00      	nop
 8101ad8:	100040b8 	.word	0x100040b8

08101adc <_isatty_r>:
 8101adc:	b538      	push	{r3, r4, r5, lr}
 8101ade:	4d06      	ldr	r5, [pc, #24]	; (8101af8 <_isatty_r+0x1c>)
 8101ae0:	2300      	movs	r3, #0
 8101ae2:	4604      	mov	r4, r0
 8101ae4:	4608      	mov	r0, r1
 8101ae6:	602b      	str	r3, [r5, #0]
 8101ae8:	f7fe ff48 	bl	810097c <_isatty>
 8101aec:	1c43      	adds	r3, r0, #1
 8101aee:	d102      	bne.n	8101af6 <_isatty_r+0x1a>
 8101af0:	682b      	ldr	r3, [r5, #0]
 8101af2:	b103      	cbz	r3, 8101af6 <_isatty_r+0x1a>
 8101af4:	6023      	str	r3, [r4, #0]
 8101af6:	bd38      	pop	{r3, r4, r5, pc}
 8101af8:	100040b8 	.word	0x100040b8

08101afc <_init>:
 8101afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101afe:	bf00      	nop
 8101b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101b02:	bc08      	pop	{r3}
 8101b04:	469e      	mov	lr, r3
 8101b06:	4770      	bx	lr

08101b08 <_fini>:
 8101b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101b0a:	bf00      	nop
 8101b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101b0e:	bc08      	pop	{r3}
 8101b10:	469e      	mov	lr, r3
 8101b12:	4770      	bx	lr
