
003_RTOS_Devlopment_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001830  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08101ad0  08101ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101b1c  08101b1c  00011b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101b20  08101b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  10000000  08101b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004060  10000060  08101b84  00020060  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100040c0  08101b84  000240c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002bc1  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000a00  00000000  00000000  00022c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000248  00000000  00000000  00023690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000190  00000000  00000000  000238d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030b4c  00000000  00000000  00023a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00003158  00000000  00000000  000545b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010e362  00000000  00000000  0005770c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000eb4  00000000  00000000  00165a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000070  00000000  00000000  00166924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000060 	.word	0x10000060
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08101ab8 	.word	0x08101ab8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000064 	.word	0x10000064
 81002dc:	08101ab8 	.word	0x08101ab8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <led_init>:
#include "led.h"

#define GPIOIEN				   	(1U<<8)
#define LEDA_PIN				(1U<<12)
void led_init(void){
 8100380:	b480      	push	{r7}
 8100382:	af00      	add	r7, sp, #0
	//Enable LED PI12 Clock
	RCC->AHB4ENR |= GPIOIEN;
 8100384:	4b0b      	ldr	r3, [pc, #44]	; (81003b4 <led_init+0x34>)
 8100386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810038a:	4a0a      	ldr	r2, [pc, #40]	; (81003b4 <led_init+0x34>)
 810038c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	//Set the pin mode as output
	GPIOI->MODER |= (1U<<24);
 8100394:	4b08      	ldr	r3, [pc, #32]	; (81003b8 <led_init+0x38>)
 8100396:	681b      	ldr	r3, [r3, #0]
 8100398:	4a07      	ldr	r2, [pc, #28]	; (81003b8 <led_init+0x38>)
 810039a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810039e:	6013      	str	r3, [r2, #0]
	GPIOI->MODER &= ~(1U<<25);
 81003a0:	4b05      	ldr	r3, [pc, #20]	; (81003b8 <led_init+0x38>)
 81003a2:	681b      	ldr	r3, [r3, #0]
 81003a4:	4a04      	ldr	r2, [pc, #16]	; (81003b8 <led_init+0x38>)
 81003a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 81003aa:	6013      	str	r3, [r2, #0]
}
 81003ac:	bf00      	nop
 81003ae:	46bd      	mov	sp, r7
 81003b0:	bc80      	pop	{r7}
 81003b2:	4770      	bx	lr
 81003b4:	58024400 	.word	0x58024400
 81003b8:	58022000 	.word	0x58022000

081003bc <thread0>:
uint32_t cntTask0, cntTask1, cntTask2;
int sharedVariable;
int32_t semaphore1, semaphore2;


static void thread0(){
 81003bc:	b580      	push	{r7, lr}
 81003be:	b082      	sub	sp, #8
 81003c0:	af00      	add	r7, sp, #0
	int temp0 = 0;
 81003c2:	2300      	movs	r3, #0
 81003c4:	607b      	str	r3, [r7, #4]
	while(1){
		rtosSemaphoreCntTake(&semaphore1);
 81003c6:	4809      	ldr	r0, [pc, #36]	; (81003ec <thread0+0x30>)
 81003c8:	f000 fa47 	bl	810085a <rtosSemaphoreCntTake>
		temp0 = sharedVariable;
 81003cc:	4b08      	ldr	r3, [pc, #32]	; (81003f0 <thread0+0x34>)
 81003ce:	681b      	ldr	r3, [r3, #0]
 81003d0:	607b      	str	r3, [r7, #4]
		delay(15);//Somework
 81003d2:	200f      	movs	r0, #15
 81003d4:	f000 fb18 	bl	8100a08 <delay>
		temp0++;
 81003d8:	687b      	ldr	r3, [r7, #4]
 81003da:	3301      	adds	r3, #1
 81003dc:	607b      	str	r3, [r7, #4]
		sharedVariable=temp0;
 81003de:	4a04      	ldr	r2, [pc, #16]	; (81003f0 <thread0+0x34>)
 81003e0:	687b      	ldr	r3, [r7, #4]
 81003e2:	6013      	str	r3, [r2, #0]
		rtosSemaphoreCntGive(&semaphore2);
 81003e4:	4803      	ldr	r0, [pc, #12]	; (81003f4 <thread0+0x38>)
 81003e6:	f000 fa26 	bl	8100836 <rtosSemaphoreCntGive>
		rtosSemaphoreCntTake(&semaphore1);
 81003ea:	e7ec      	b.n	81003c6 <thread0+0xa>
 81003ec:	10000080 	.word	0x10000080
 81003f0:	1000007c 	.word	0x1000007c
 81003f4:	10000084 	.word	0x10000084

081003f8 <thread1>:
	}
}

static void thread1(){
 81003f8:	b580      	push	{r7, lr}
 81003fa:	af00      	add	r7, sp, #0
	while(1){
		rtosSemaphoreCntTake(&semaphore2);
 81003fc:	4808      	ldr	r0, [pc, #32]	; (8100420 <thread1+0x28>)
 81003fe:	f000 fa2c 	bl	810085a <rtosSemaphoreCntTake>
		sharedVariable++;
 8100402:	4b08      	ldr	r3, [pc, #32]	; (8100424 <thread1+0x2c>)
 8100404:	681b      	ldr	r3, [r3, #0]
 8100406:	3301      	adds	r3, #1
 8100408:	4a06      	ldr	r2, [pc, #24]	; (8100424 <thread1+0x2c>)
 810040a:	6013      	str	r3, [r2, #0]
		printf("Shared Variable: %d\n\r", sharedVariable);
 810040c:	4b05      	ldr	r3, [pc, #20]	; (8100424 <thread1+0x2c>)
 810040e:	681b      	ldr	r3, [r3, #0]
 8100410:	4619      	mov	r1, r3
 8100412:	4805      	ldr	r0, [pc, #20]	; (8100428 <thread1+0x30>)
 8100414:	f000 fce2 	bl	8100ddc <iprintf>
		rtosSemaphoreCntGive(&semaphore1);
 8100418:	4804      	ldr	r0, [pc, #16]	; (810042c <thread1+0x34>)
 810041a:	f000 fa0c 	bl	8100836 <rtosSemaphoreCntGive>
		rtosSemaphoreCntTake(&semaphore2);
 810041e:	e7ed      	b.n	81003fc <thread1+0x4>
 8100420:	10000084 	.word	0x10000084
 8100424:	1000007c 	.word	0x1000007c
 8100428:	08101ad0 	.word	0x08101ad0
 810042c:	10000080 	.word	0x10000080

08100430 <main>:
  }
}*/


int main(void)
{
 8100430:	b580      	push	{r7, lr}
 8100432:	af00      	add	r7, sp, #0
	led_init();
 8100434:	f7ff ffa4 	bl	8100380 <led_init>
	uart_tx_init();
 8100438:	f000 fb76 	bl	8100b28 <uart_tx_init>
	tim2_1MS_tick_init();
 810043c:	f000 fb2c 	bl	8100a98 <tim2_1MS_tick_init>
	rtosKernelClkInit();
 8100440:	f000 f96c 	bl	810071c <rtosKernelClkInit>
	rtosKernelAddThread(&thread0, 0);
 8100444:	2100      	movs	r1, #0
 8100446:	4809      	ldr	r0, [pc, #36]	; (810046c <main+0x3c>)
 8100448:	f000 f940 	bl	81006cc <rtosKernelAddThread>
	rtosKernelAddThread(&thread1, 1);
 810044c:	2101      	movs	r1, #1
 810044e:	4808      	ldr	r0, [pc, #32]	; (8100470 <main+0x40>)
 8100450:	f000 f93c 	bl	81006cc <rtosKernelAddThread>
	rtosSempahoreInit(&semaphore1, 1);
 8100454:	2101      	movs	r1, #1
 8100456:	4807      	ldr	r0, [pc, #28]	; (8100474 <main+0x44>)
 8100458:	f000 f9e0 	bl	810081c <rtosSempahoreInit>
	rtosSempahoreInit(&semaphore2, 0);
 810045c:	2100      	movs	r1, #0
 810045e:	4806      	ldr	r0, [pc, #24]	; (8100478 <main+0x48>)
 8100460:	f000 f9dc 	bl	810081c <rtosSempahoreInit>
	rtosKernelLaunch(ROUND_ROBIN_PERIOD);
 8100464:	200a      	movs	r0, #10
 8100466:	f000 f965 	bl	8100734 <rtosKernelLaunch>
	while(1){}
 810046a:	e7fe      	b.n	810046a <main+0x3a>
 810046c:	081003bd 	.word	0x081003bd
 8100470:	081003f9 	.word	0x081003f9
 8100474:	10000080 	.word	0x10000080
 8100478:	10000084 	.word	0x10000084

0810047c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810047c:	b480      	push	{r7}
 810047e:	b083      	sub	sp, #12
 8100480:	af00      	add	r7, sp, #0
 8100482:	4603      	mov	r3, r0
 8100484:	6039      	str	r1, [r7, #0]
 8100486:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810048c:	2b00      	cmp	r3, #0
 810048e:	db0a      	blt.n	81004a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100490:	683b      	ldr	r3, [r7, #0]
 8100492:	b2da      	uxtb	r2, r3
 8100494:	490c      	ldr	r1, [pc, #48]	; (81004c8 <__NVIC_SetPriority+0x4c>)
 8100496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810049a:	0112      	lsls	r2, r2, #4
 810049c:	b2d2      	uxtb	r2, r2
 810049e:	440b      	add	r3, r1
 81004a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81004a4:	e00a      	b.n	81004bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81004a6:	683b      	ldr	r3, [r7, #0]
 81004a8:	b2da      	uxtb	r2, r3
 81004aa:	4908      	ldr	r1, [pc, #32]	; (81004cc <__NVIC_SetPriority+0x50>)
 81004ac:	88fb      	ldrh	r3, [r7, #6]
 81004ae:	f003 030f 	and.w	r3, r3, #15
 81004b2:	3b04      	subs	r3, #4
 81004b4:	0112      	lsls	r2, r2, #4
 81004b6:	b2d2      	uxtb	r2, r2
 81004b8:	440b      	add	r3, r1
 81004ba:	761a      	strb	r2, [r3, #24]
}
 81004bc:	bf00      	nop
 81004be:	370c      	adds	r7, #12
 81004c0:	46bd      	mov	sp, r7
 81004c2:	bc80      	pop	{r7}
 81004c4:	4770      	bx	lr
 81004c6:	bf00      	nop
 81004c8:	e000e100 	.word	0xe000e100
 81004cc:	e000ed00 	.word	0xe000ed00

081004d0 <rtosKernelThreadStackInit>:
int32_t threadStack[MAX_NUM_OF_THREADS][STACK_SIZE];

void rtosSchedulerLaunch();
void rtosSchedulerSwitch();

void rtosKernelThreadStackInit(int idx){
 81004d0:	b480      	push	{r7}
 81004d2:	b083      	sub	sp, #12
 81004d4:	af00      	add	r7, sp, #0
 81004d6:	6078      	str	r0, [r7, #4]
	//Defining the current stack pointer for the particular thread
	tcbArr[idx].ptrStack = &threadStack[idx][STACK_SIZE-16]; //Minus 16 as 16 register are saved in the stack placing the head of the stack at size - 16
 81004d8:	687b      	ldr	r3, [r7, #4]
 81004da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 81004de:	fb02 f303 	mul.w	r3, r2, r3
 81004e2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 81004e6:	4a5f      	ldr	r2, [pc, #380]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 81004e8:	441a      	add	r2, r3
 81004ea:	495f      	ldr	r1, [pc, #380]	; (8100668 <rtosKernelThreadStackInit+0x198>)
 81004ec:	687b      	ldr	r3, [r7, #4]
 81004ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	threadStack[idx][STACK_SIZE-1] = (1U<<24); //Program status register value remains at the tail of the stack. Setting 21 bit of PSR to 1 to enable thumb mode
 81004f2:	4a5c      	ldr	r2, [pc, #368]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 81004f4:	687b      	ldr	r3, [r7, #4]
 81004f6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81004fa:	fb01 f303 	mul.w	r3, r1, r3
 81004fe:	4413      	add	r3, r2
 8100500:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8100504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8100508:	601a      	str	r2, [r3, #0]

	//Defining other optional registers
	//First all the registers required to save the context
	threadStack[idx][STACK_SIZE-3] = 0xBBBBBBBB; //R14(LR)
 810050a:	4a56      	ldr	r2, [pc, #344]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 810050c:	687b      	ldr	r3, [r7, #4]
 810050e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100512:	fb01 f303 	mul.w	r3, r1, r3
 8100516:	4413      	add	r3, r2
 8100518:	f203 6334 	addw	r3, r3, #1588	; 0x634
 810051c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100520:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-4] = 0xBBBBBBBB; //R12
 8100522:	4a50      	ldr	r2, [pc, #320]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 8100524:	687b      	ldr	r3, [r7, #4]
 8100526:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810052a:	fb01 f303 	mul.w	r3, r1, r3
 810052e:	4413      	add	r3, r2
 8100530:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8100534:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100538:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-5] = 0xBBBBBBBB; //R3
 810053a:	4a4a      	ldr	r2, [pc, #296]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 810053c:	687b      	ldr	r3, [r7, #4]
 810053e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100542:	fb01 f303 	mul.w	r3, r1, r3
 8100546:	4413      	add	r3, r2
 8100548:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 810054c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100550:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-6] = 0xBBBBBBBB; //R2
 8100552:	4a44      	ldr	r2, [pc, #272]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 8100554:	687b      	ldr	r3, [r7, #4]
 8100556:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810055a:	fb01 f303 	mul.w	r3, r1, r3
 810055e:	4413      	add	r3, r2
 8100560:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8100564:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100568:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-7] = 0xBBBBBBBB; //R1
 810056a:	4a3e      	ldr	r2, [pc, #248]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 810056c:	687b      	ldr	r3, [r7, #4]
 810056e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100572:	fb01 f303 	mul.w	r3, r1, r3
 8100576:	4413      	add	r3, r2
 8100578:	f203 6324 	addw	r3, r3, #1572	; 0x624
 810057c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100580:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-8] = 0xBBBBBBBB; //R0
 8100582:	4a38      	ldr	r2, [pc, #224]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 8100584:	687b      	ldr	r3, [r7, #4]
 8100586:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810058a:	fb01 f303 	mul.w	r3, r1, r3
 810058e:	4413      	add	r3, r2
 8100590:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8100594:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100598:	601a      	str	r2, [r3, #0]
	//Other core registers in Arm Cortex M4
	threadStack[idx][STACK_SIZE-9] = 0xBBBBBBBB; //R11
 810059a:	4a32      	ldr	r2, [pc, #200]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 810059c:	687b      	ldr	r3, [r7, #4]
 810059e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005a2:	fb01 f303 	mul.w	r3, r1, r3
 81005a6:	4413      	add	r3, r2
 81005a8:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 81005ac:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005b0:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-10] = 0xBBBBBBBB;//R10
 81005b2:	4a2c      	ldr	r2, [pc, #176]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 81005b4:	687b      	ldr	r3, [r7, #4]
 81005b6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005ba:	fb01 f303 	mul.w	r3, r1, r3
 81005be:	4413      	add	r3, r2
 81005c0:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 81005c4:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005c8:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-11] = 0xBBBBBBBB;//R9
 81005ca:	4a26      	ldr	r2, [pc, #152]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 81005cc:	687b      	ldr	r3, [r7, #4]
 81005ce:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005d2:	fb01 f303 	mul.w	r3, r1, r3
 81005d6:	4413      	add	r3, r2
 81005d8:	f203 6314 	addw	r3, r3, #1556	; 0x614
 81005dc:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005e0:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-12] = 0xBBBBBBBB;//R8
 81005e2:	4a20      	ldr	r2, [pc, #128]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 81005e4:	687b      	ldr	r3, [r7, #4]
 81005e6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005ea:	fb01 f303 	mul.w	r3, r1, r3
 81005ee:	4413      	add	r3, r2
 81005f0:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 81005f4:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005f8:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-13] = 0xBBBBBBBB;//R7
 81005fa:	4a1a      	ldr	r2, [pc, #104]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 81005fc:	687b      	ldr	r3, [r7, #4]
 81005fe:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100602:	fb01 f303 	mul.w	r3, r1, r3
 8100606:	4413      	add	r3, r2
 8100608:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 810060c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100610:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-14] = 0xBBBBBBBB;//R6
 8100612:	4a14      	ldr	r2, [pc, #80]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 8100614:	687b      	ldr	r3, [r7, #4]
 8100616:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810061a:	fb01 f303 	mul.w	r3, r1, r3
 810061e:	4413      	add	r3, r2
 8100620:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8100624:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100628:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-15] = 0xBBBBBBBB;//R5
 810062a:	4a0e      	ldr	r2, [pc, #56]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 810062c:	687b      	ldr	r3, [r7, #4]
 810062e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100632:	fb01 f303 	mul.w	r3, r1, r3
 8100636:	4413      	add	r3, r2
 8100638:	f203 6304 	addw	r3, r3, #1540	; 0x604
 810063c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100640:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-16] = 0xBBBBBBBB;//R4
 8100642:	4a08      	ldr	r2, [pc, #32]	; (8100664 <rtosKernelThreadStackInit+0x194>)
 8100644:	687b      	ldr	r3, [r7, #4]
 8100646:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810064a:	fb01 f303 	mul.w	r3, r1, r3
 810064e:	4413      	add	r3, r2
 8100650:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8100654:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100658:	601a      	str	r2, [r3, #0]
}
 810065a:	bf00      	nop
 810065c:	370c      	adds	r7, #12
 810065e:	46bd      	mov	sp, r7
 8100660:	bc80      	pop	{r7}
 8100662:	4770      	bx	lr
 8100664:	100000e4 	.word	0x100000e4
 8100668:	10000090 	.word	0x10000090

0810066c <initThreadNext>:

void initThreadNext(){
 810066c:	b480      	push	{r7}
 810066e:	b083      	sub	sp, #12
 8100670:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i< threadsCreated; i++){
 8100672:	2300      	movs	r3, #0
 8100674:	607b      	str	r3, [r7, #4]
 8100676:	e019      	b.n	81006ac <initThreadNext+0x40>
		if(i==threadsCreated-1){
 8100678:	4b12      	ldr	r3, [pc, #72]	; (81006c4 <initThreadNext+0x58>)
 810067a:	681b      	ldr	r3, [r3, #0]
 810067c:	3b01      	subs	r3, #1
 810067e:	687a      	ldr	r2, [r7, #4]
 8100680:	429a      	cmp	r2, r3
 8100682:	d106      	bne.n	8100692 <initThreadNext+0x26>
			tcbArr[i].nextThread = &tcbArr[0];
 8100684:	4a10      	ldr	r2, [pc, #64]	; (81006c8 <initThreadNext+0x5c>)
 8100686:	687b      	ldr	r3, [r7, #4]
 8100688:	00db      	lsls	r3, r3, #3
 810068a:	4413      	add	r3, r2
 810068c:	4a0e      	ldr	r2, [pc, #56]	; (81006c8 <initThreadNext+0x5c>)
 810068e:	605a      	str	r2, [r3, #4]
 8100690:	e009      	b.n	81006a6 <initThreadNext+0x3a>
		} else {
			tcbArr[i].nextThread = &tcbArr[i+1];
 8100692:	687b      	ldr	r3, [r7, #4]
 8100694:	3301      	adds	r3, #1
 8100696:	00db      	lsls	r3, r3, #3
 8100698:	4a0b      	ldr	r2, [pc, #44]	; (81006c8 <initThreadNext+0x5c>)
 810069a:	441a      	add	r2, r3
 810069c:	490a      	ldr	r1, [pc, #40]	; (81006c8 <initThreadNext+0x5c>)
 810069e:	687b      	ldr	r3, [r7, #4]
 81006a0:	00db      	lsls	r3, r3, #3
 81006a2:	440b      	add	r3, r1
 81006a4:	605a      	str	r2, [r3, #4]
	for(uint32_t i = 0; i< threadsCreated; i++){
 81006a6:	687b      	ldr	r3, [r7, #4]
 81006a8:	3301      	adds	r3, #1
 81006aa:	607b      	str	r3, [r7, #4]
 81006ac:	4b05      	ldr	r3, [pc, #20]	; (81006c4 <initThreadNext+0x58>)
 81006ae:	681b      	ldr	r3, [r3, #0]
 81006b0:	687a      	ldr	r2, [r7, #4]
 81006b2:	429a      	cmp	r2, r3
 81006b4:	d3e0      	bcc.n	8100678 <initThreadNext+0xc>
		}
	}
}
 81006b6:	bf00      	nop
 81006b8:	bf00      	nop
 81006ba:	370c      	adds	r7, #12
 81006bc:	46bd      	mov	sp, r7
 81006be:	bc80      	pop	{r7}
 81006c0:	4770      	bx	lr
 81006c2:	bf00      	nop
 81006c4:	1000008c 	.word	0x1000008c
 81006c8:	10000090 	.word	0x10000090

081006cc <rtosKernelAddThread>:
	threadStack[2][STACK_SIZE-2] = (uint32_t)(thread2); //Setting the program counter to function pointer

	__enable_irq();
	return 1;
}*/
uint8_t rtosKernelAddThread(void(*threadFunc)(void), uint32_t threadID){
 81006cc:	b580      	push	{r7, lr}
 81006ce:	b082      	sub	sp, #8
 81006d0:	af00      	add	r7, sp, #0
 81006d2:	6078      	str	r0, [r7, #4]
 81006d4:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81006d6:	b672      	cpsid	i
}
 81006d8:	bf00      	nop
	__disable_irq(); //Disabling global interrupts

	rtosKernelThreadStackInit(threadID);
 81006da:	683b      	ldr	r3, [r7, #0]
 81006dc:	4618      	mov	r0, r3
 81006de:	f7ff fef7 	bl	81004d0 <rtosKernelThreadStackInit>
	threadStack[threadID][STACK_SIZE-2] = (uint32_t)(threadFunc); //Setting the program counter to function pointer
 81006e2:	687a      	ldr	r2, [r7, #4]
 81006e4:	490b      	ldr	r1, [pc, #44]	; (8100714 <rtosKernelAddThread+0x48>)
 81006e6:	683b      	ldr	r3, [r7, #0]
 81006e8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 81006ec:	fb00 f303 	mul.w	r3, r0, r3
 81006f0:	440b      	add	r3, r1
 81006f2:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 81006f6:	601a      	str	r2, [r3, #0]

	threadsCreated++;
 81006f8:	4b07      	ldr	r3, [pc, #28]	; (8100718 <rtosKernelAddThread+0x4c>)
 81006fa:	681b      	ldr	r3, [r3, #0]
 81006fc:	3301      	adds	r3, #1
 81006fe:	4a06      	ldr	r2, [pc, #24]	; (8100718 <rtosKernelAddThread+0x4c>)
 8100700:	6013      	str	r3, [r2, #0]
	initThreadNext();
 8100702:	f7ff ffb3 	bl	810066c <initThreadNext>
  __ASM volatile ("cpsie i" : : : "memory");
 8100706:	b662      	cpsie	i
}
 8100708:	bf00      	nop
	__enable_irq();
	return 1;
 810070a:	2301      	movs	r3, #1
}
 810070c:	4618      	mov	r0, r3
 810070e:	3708      	adds	r7, #8
 8100710:	46bd      	mov	sp, r7
 8100712:	bd80      	pop	{r7, pc}
 8100714:	100000e4 	.word	0x100000e4
 8100718:	1000008c 	.word	0x1000008c

0810071c <rtosKernelClkInit>:

void rtosKernelClkInit(){
 810071c:	b480      	push	{r7}
 810071e:	af00      	add	r7, sp, #0
	Millsec_Clock_Cyc = (SYS_CLOCK/1000); //Note: Bus speed 64000000 cycles/sec so 64000 cycles in one ms
 8100720:	4b03      	ldr	r3, [pc, #12]	; (8100730 <rtosKernelClkInit+0x14>)
 8100722:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8100726:	601a      	str	r2, [r3, #0]
}
 8100728:	bf00      	nop
 810072a:	46bd      	mov	sp, r7
 810072c:	bc80      	pop	{r7}
 810072e:	4770      	bx	lr
 8100730:	10000088 	.word	0x10000088

08100734 <rtosKernelLaunch>:

void rtosKernelLaunch(uint32_t cycleQuanta){
 8100734:	b580      	push	{r7, lr}
 8100736:	b082      	sub	sp, #8
 8100738:	af00      	add	r7, sp, #0
 810073a:	6078      	str	r0, [r7, #4]
	//Reset SysTick
	SysTick->CTRL = SYSTICK_RST;
 810073c:	4b15      	ldr	r3, [pc, #84]	; (8100794 <rtosKernelLaunch+0x60>)
 810073e:	2200      	movs	r2, #0
 8100740:	601a      	str	r2, [r3, #0]

	//Clear SysTick current value register
	SysTick->VAL = 0;
 8100742:	4b14      	ldr	r3, [pc, #80]	; (8100794 <rtosKernelLaunch+0x60>)
 8100744:	2200      	movs	r2, #0
 8100746:	609a      	str	r2, [r3, #8]

	//Reload the timer with number of clock cycles to count to zero
	SysTick->LOAD = (cycleQuanta * Millsec_Clock_Cyc) - 1;
 8100748:	4b13      	ldr	r3, [pc, #76]	; (8100798 <rtosKernelLaunch+0x64>)
 810074a:	681b      	ldr	r3, [r3, #0]
 810074c:	687a      	ldr	r2, [r7, #4]
 810074e:	fb02 f303 	mul.w	r3, r2, r3
 8100752:	4a10      	ldr	r2, [pc, #64]	; (8100794 <rtosKernelLaunch+0x60>)
 8100754:	3b01      	subs	r3, #1
 8100756:	6053      	str	r3, [r2, #4]

	//Setting the priority of systick less than all the other hardware interrupts
	NVIC_SetPriority(SysTick_IRQn, 15);
 8100758:	210f      	movs	r1, #15
 810075a:	f04f 30ff 	mov.w	r0, #4294967295
 810075e:	f7ff fe8d 	bl	810047c <__NVIC_SetPriority>

	//Select internal clock as source
	SysTick->CTRL = CTRL_CLKSRC;
 8100762:	4b0c      	ldr	r3, [pc, #48]	; (8100794 <rtosKernelLaunch+0x60>)
 8100764:	2204      	movs	r2, #4
 8100766:	601a      	str	r2, [r3, #0]

	//Enable SysTick
	SysTick->CTRL |= CTRL_ENABLE;
 8100768:	4b0a      	ldr	r3, [pc, #40]	; (8100794 <rtosKernelLaunch+0x60>)
 810076a:	681b      	ldr	r3, [r3, #0]
 810076c:	4a09      	ldr	r2, [pc, #36]	; (8100794 <rtosKernelLaunch+0x60>)
 810076e:	f043 0301 	orr.w	r3, r3, #1
 8100772:	6013      	str	r3, [r2, #0]

	//Enable Interrupt
	SysTick->CTRL |= CTRL_TICKINT;
 8100774:	4b07      	ldr	r3, [pc, #28]	; (8100794 <rtosKernelLaunch+0x60>)
 8100776:	681b      	ldr	r3, [r3, #0]
 8100778:	4a06      	ldr	r2, [pc, #24]	; (8100794 <rtosKernelLaunch+0x60>)
 810077a:	f043 0302 	orr.w	r3, r3, #2
 810077e:	6013      	str	r3, [r2, #0]

	//Setting first thread 0 as first thread to run
	ptrCurrTCB = &tcbArr[0];
 8100780:	4b06      	ldr	r3, [pc, #24]	; (810079c <rtosKernelLaunch+0x68>)
 8100782:	4a07      	ldr	r2, [pc, #28]	; (81007a0 <rtosKernelLaunch+0x6c>)
 8100784:	601a      	str	r2, [r3, #0]

	//Launching Scheduler
	rtosSchedulerLaunch();
 8100786:	f000 f81f 	bl	81007c8 <rtosSchedulerLaunch>
}
 810078a:	bf00      	nop
 810078c:	3708      	adds	r7, #8
 810078e:	46bd      	mov	sp, r7
 8100790:	bd80      	pop	{r7, pc}
 8100792:	bf00      	nop
 8100794:	e000e010 	.word	0xe000e010
 8100798:	10000088 	.word	0x10000088
 810079c:	100000e0 	.word	0x100000e0
 81007a0:	10000090 	.word	0x10000090

081007a4 <SysTick_Handler>:

__attribute__((naked))void SysTick_Handler(){

	//Suspend the current thread
	//First disable global interrupts
	__asm("CPSID	I");
 81007a4:	b672      	cpsid	i
	//Save registers whiCh are not saved when excpetion occured by default
	__asm("PUSH {R4-R11}");
 81007a6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Load address of current tcb pointer into R0
	__asm("LDR R0, =ptrCurrTCB"); // R0 is holding pointer to pointer to tcb
 81007aa:	4806      	ldr	r0, [pc, #24]	; (81007c4 <SysTick_Handler+0x20>)
	//Load R1 from address equals r0, i.e. R1 = ptrCurrTCB
	__asm("LDR R1, [R0]");
 81007ac:	6801      	ldr	r1, [r0, #0]
	//Store CortexM SP to memory pointed by R1, i.e. save SP to tcb
	__asm("STR SP, [R1]");
 81007ae:	f8c1 d000 	str.w	sp, [r1]


	//Fetching the next thread
	//Load R1 from a location 4 bytes above address R1, i.e. R1 = ptrCurrTCB->next
	__asm("LDR R1,[R1, #4]");
 81007b2:	6849      	ldr	r1, [r1, #4]
	//Store R1 at address equals R0, i.e ptrCurrTCB = R1
	__asm("STR R1, [R0]");
 81007b4:	6001      	str	r1, [r0, #0]
	//Load Cortex M SP from address equals R1, i.e. SP = ptrCurrTCB->ptrStack
	__asm("LDR SP, [R1]");
 81007b6:	f8d1 d000 	ldr.w	sp, [r1]
	//Restore R4, R5, R6, R7, R8, R9, R10, R11
	__asm("POP {R4-R11}");
 81007ba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Enable global interrupt
	__asm("CPSIE	I");
 81007be:	b662      	cpsie	i
	//Return from exception and automatically restore R0, R1, R2, R3, R12, LR, PC, PSR from newly loaded stack
	__asm("BX	LR");
 81007c0:	4770      	bx	lr
}
 81007c2:	bf00      	nop
 81007c4:	100000e0 	.word	0x100000e0

081007c8 <rtosSchedulerLaunch>:

void rtosSchedulerLaunch(){
 81007c8:	b480      	push	{r7}
 81007ca:	af00      	add	r7, sp, #0

	//Load address of ptrCurrTCB into R0
	__asm("LDR R0, =ptrCurrTCB");
 81007cc:	4809      	ldr	r0, [pc, #36]	; (81007f4 <rtosSchedulerLaunch+0x2c>)
	//Load ptrCurrTCB to R2 from its address i.e. R0
	__asm("LDR R2, [R0]");
 81007ce:	6802      	ldr	r2, [r0, #0]
	//Load Cortex M stack pointer from ptrCurrTCB, i.e. SP = ptrCurrTCB->ptrStack
	__asm("LDR SP, [R2]");
 81007d0:	f8d2 d000 	ldr.w	sp, [r2]
	//Fetch all the initial register values from the stack
	__asm("POP {R4-R11}");
 81007d4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Fetch other registers which are saved by default
	__asm("POP {R0-R3}");
 81007d8:	bc0f      	pop	{r0, r1, r2, r3}
	//Fetch register 12 which is saved by default
	__asm("POP {R12}");
 81007da:	f85d cb04 	ldr.w	ip, [sp], #4
	//Skip to LR in stack
	__asm("ADD SP, SP, #4");
 81007de:	b001      	add	sp, #4
	//Setting LR as PC which lead to task0 function pointer
	__asm("POP {LR}");
 81007e0:	f85d eb04 	ldr.w	lr, [sp], #4
	//Skip to PSR
	__asm("ADD SP, SP, #4");
 81007e4:	b001      	add	sp, #4
	//Enable global interrupt
	__asm("CPSIE	I");
 81007e6:	b662      	cpsie	i
	//Return from exception
	__asm("BX	LR");
 81007e8:	4770      	bx	lr
}
 81007ea:	bf00      	nop
 81007ec:	46bd      	mov	sp, r7
 81007ee:	bc80      	pop	{r7}
 81007f0:	4770      	bx	lr
 81007f2:	0000      	.short	0x0000
 81007f4:	100000e0 	.word	0x100000e0

081007f8 <rtosThreadYield>:

void rtosThreadYield(){
 81007f8:	b480      	push	{r7}
 81007fa:	af00      	add	r7, sp, #0
	SysTick->VAL = 0; //By writing any value to this register the value is overwritten
 81007fc:	4b05      	ldr	r3, [pc, #20]	; (8100814 <rtosThreadYield+0x1c>)
 81007fe:	2200      	movs	r2, #0
 8100800:	609a      	str	r2, [r3, #8]
	INTCTRL = (1U<<26);
 8100802:	4b05      	ldr	r3, [pc, #20]	; (8100818 <rtosThreadYield+0x20>)
 8100804:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8100808:	601a      	str	r2, [r3, #0]
}
 810080a:	bf00      	nop
 810080c:	46bd      	mov	sp, r7
 810080e:	bc80      	pop	{r7}
 8100810:	4770      	bx	lr
 8100812:	bf00      	nop
 8100814:	e000e010 	.word	0xe000e010
 8100818:	e000ed04 	.word	0xe000ed04

0810081c <rtosSempahoreInit>:

void rtosSempahoreInit(int32_t *semaphoreCnt, int32_t initVal){
 810081c:	b480      	push	{r7}
 810081e:	b083      	sub	sp, #12
 8100820:	af00      	add	r7, sp, #0
 8100822:	6078      	str	r0, [r7, #4]
 8100824:	6039      	str	r1, [r7, #0]
	*semaphoreCnt = initVal;
 8100826:	687b      	ldr	r3, [r7, #4]
 8100828:	683a      	ldr	r2, [r7, #0]
 810082a:	601a      	str	r2, [r3, #0]
}
 810082c:	bf00      	nop
 810082e:	370c      	adds	r7, #12
 8100830:	46bd      	mov	sp, r7
 8100832:	bc80      	pop	{r7}
 8100834:	4770      	bx	lr

08100836 <rtosSemaphoreCntGive>:

void rtosSemaphoreCntGive(int32_t *semaphoreCnt){
 8100836:	b480      	push	{r7}
 8100838:	b083      	sub	sp, #12
 810083a:	af00      	add	r7, sp, #0
 810083c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 810083e:	b672      	cpsid	i
}
 8100840:	bf00      	nop
	__disable_irq();
	*semaphoreCnt = *semaphoreCnt + 1;
 8100842:	687b      	ldr	r3, [r7, #4]
 8100844:	681b      	ldr	r3, [r3, #0]
 8100846:	1c5a      	adds	r2, r3, #1
 8100848:	687b      	ldr	r3, [r7, #4]
 810084a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 810084c:	b662      	cpsie	i
}
 810084e:	bf00      	nop
	__enable_irq();
}
 8100850:	bf00      	nop
 8100852:	370c      	adds	r7, #12
 8100854:	46bd      	mov	sp, r7
 8100856:	bc80      	pop	{r7}
 8100858:	4770      	bx	lr

0810085a <rtosSemaphoreCntTake>:

void rtosSemaphoreCntTake(int32_t *semaphoreCnt){
 810085a:	b580      	push	{r7, lr}
 810085c:	b082      	sub	sp, #8
 810085e:	af00      	add	r7, sp, #0
 8100860:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8100862:	b672      	cpsid	i
}
 8100864:	bf00      	nop
	__disable_irq();
	while(*semaphoreCnt <= 0){
 8100866:	e005      	b.n	8100874 <rtosSemaphoreCntTake+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8100868:	b672      	cpsid	i
}
 810086a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 810086c:	b662      	cpsie	i
}
 810086e:	bf00      	nop
		__disable_irq();
		__enable_irq();
		rtosThreadYield();
 8100870:	f7ff ffc2 	bl	81007f8 <rtosThreadYield>
	while(*semaphoreCnt <= 0){
 8100874:	687b      	ldr	r3, [r7, #4]
 8100876:	681b      	ldr	r3, [r3, #0]
 8100878:	2b00      	cmp	r3, #0
 810087a:	ddf5      	ble.n	8100868 <rtosSemaphoreCntTake+0xe>
	}
	*semaphoreCnt = *semaphoreCnt - 1;
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	681b      	ldr	r3, [r3, #0]
 8100880:	1e5a      	subs	r2, r3, #1
 8100882:	687b      	ldr	r3, [r7, #4]
 8100884:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8100886:	b662      	cpsie	i
}
 8100888:	bf00      	nop
	__enable_irq();
}
 810088a:	bf00      	nop
 810088c:	3708      	adds	r7, #8
 810088e:	46bd      	mov	sp, r7
 8100890:	bd80      	pop	{r7, pc}

08100892 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100892:	b580      	push	{r7, lr}
 8100894:	b086      	sub	sp, #24
 8100896:	af00      	add	r7, sp, #0
 8100898:	60f8      	str	r0, [r7, #12]
 810089a:	60b9      	str	r1, [r7, #8]
 810089c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810089e:	2300      	movs	r3, #0
 81008a0:	617b      	str	r3, [r7, #20]
 81008a2:	e00a      	b.n	81008ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81008a4:	f3af 8000 	nop.w
 81008a8:	4601      	mov	r1, r0
 81008aa:	68bb      	ldr	r3, [r7, #8]
 81008ac:	1c5a      	adds	r2, r3, #1
 81008ae:	60ba      	str	r2, [r7, #8]
 81008b0:	b2ca      	uxtb	r2, r1
 81008b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81008b4:	697b      	ldr	r3, [r7, #20]
 81008b6:	3301      	adds	r3, #1
 81008b8:	617b      	str	r3, [r7, #20]
 81008ba:	697a      	ldr	r2, [r7, #20]
 81008bc:	687b      	ldr	r3, [r7, #4]
 81008be:	429a      	cmp	r2, r3
 81008c0:	dbf0      	blt.n	81008a4 <_read+0x12>
  }

  return len;
 81008c2:	687b      	ldr	r3, [r7, #4]
}
 81008c4:	4618      	mov	r0, r3
 81008c6:	3718      	adds	r7, #24
 81008c8:	46bd      	mov	sp, r7
 81008ca:	bd80      	pop	{r7, pc}

081008cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81008cc:	b580      	push	{r7, lr}
 81008ce:	b086      	sub	sp, #24
 81008d0:	af00      	add	r7, sp, #0
 81008d2:	60f8      	str	r0, [r7, #12]
 81008d4:	60b9      	str	r1, [r7, #8]
 81008d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81008d8:	2300      	movs	r3, #0
 81008da:	617b      	str	r3, [r7, #20]
 81008dc:	e009      	b.n	81008f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81008de:	68bb      	ldr	r3, [r7, #8]
 81008e0:	1c5a      	adds	r2, r3, #1
 81008e2:	60ba      	str	r2, [r7, #8]
 81008e4:	781b      	ldrb	r3, [r3, #0]
 81008e6:	4618      	mov	r0, r3
 81008e8:	f000 f912 	bl	8100b10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81008ec:	697b      	ldr	r3, [r7, #20]
 81008ee:	3301      	adds	r3, #1
 81008f0:	617b      	str	r3, [r7, #20]
 81008f2:	697a      	ldr	r2, [r7, #20]
 81008f4:	687b      	ldr	r3, [r7, #4]
 81008f6:	429a      	cmp	r2, r3
 81008f8:	dbf1      	blt.n	81008de <_write+0x12>
  }
  return len;
 81008fa:	687b      	ldr	r3, [r7, #4]
}
 81008fc:	4618      	mov	r0, r3
 81008fe:	3718      	adds	r7, #24
 8100900:	46bd      	mov	sp, r7
 8100902:	bd80      	pop	{r7, pc}

08100904 <_close>:

int _close(int file)
{
 8100904:	b480      	push	{r7}
 8100906:	b083      	sub	sp, #12
 8100908:	af00      	add	r7, sp, #0
 810090a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810090c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100910:	4618      	mov	r0, r3
 8100912:	370c      	adds	r7, #12
 8100914:	46bd      	mov	sp, r7
 8100916:	bc80      	pop	{r7}
 8100918:	4770      	bx	lr

0810091a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810091a:	b480      	push	{r7}
 810091c:	b083      	sub	sp, #12
 810091e:	af00      	add	r7, sp, #0
 8100920:	6078      	str	r0, [r7, #4]
 8100922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8100924:	683b      	ldr	r3, [r7, #0]
 8100926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810092a:	605a      	str	r2, [r3, #4]
  return 0;
 810092c:	2300      	movs	r3, #0
}
 810092e:	4618      	mov	r0, r3
 8100930:	370c      	adds	r7, #12
 8100932:	46bd      	mov	sp, r7
 8100934:	bc80      	pop	{r7}
 8100936:	4770      	bx	lr

08100938 <_isatty>:

int _isatty(int file)
{
 8100938:	b480      	push	{r7}
 810093a:	b083      	sub	sp, #12
 810093c:	af00      	add	r7, sp, #0
 810093e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8100940:	2301      	movs	r3, #1
}
 8100942:	4618      	mov	r0, r3
 8100944:	370c      	adds	r7, #12
 8100946:	46bd      	mov	sp, r7
 8100948:	bc80      	pop	{r7}
 810094a:	4770      	bx	lr

0810094c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810094c:	b480      	push	{r7}
 810094e:	b085      	sub	sp, #20
 8100950:	af00      	add	r7, sp, #0
 8100952:	60f8      	str	r0, [r7, #12]
 8100954:	60b9      	str	r1, [r7, #8]
 8100956:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8100958:	2300      	movs	r3, #0
}
 810095a:	4618      	mov	r0, r3
 810095c:	3714      	adds	r7, #20
 810095e:	46bd      	mov	sp, r7
 8100960:	bc80      	pop	{r7}
 8100962:	4770      	bx	lr

08100964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100964:	b580      	push	{r7, lr}
 8100966:	b086      	sub	sp, #24
 8100968:	af00      	add	r7, sp, #0
 810096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810096c:	4a14      	ldr	r2, [pc, #80]	; (81009c0 <_sbrk+0x5c>)
 810096e:	4b15      	ldr	r3, [pc, #84]	; (81009c4 <_sbrk+0x60>)
 8100970:	1ad3      	subs	r3, r2, r3
 8100972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100974:	697b      	ldr	r3, [r7, #20]
 8100976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100978:	4b13      	ldr	r3, [pc, #76]	; (81009c8 <_sbrk+0x64>)
 810097a:	681b      	ldr	r3, [r3, #0]
 810097c:	2b00      	cmp	r3, #0
 810097e:	d102      	bne.n	8100986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100980:	4b11      	ldr	r3, [pc, #68]	; (81009c8 <_sbrk+0x64>)
 8100982:	4a12      	ldr	r2, [pc, #72]	; (81009cc <_sbrk+0x68>)
 8100984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100986:	4b10      	ldr	r3, [pc, #64]	; (81009c8 <_sbrk+0x64>)
 8100988:	681a      	ldr	r2, [r3, #0]
 810098a:	687b      	ldr	r3, [r7, #4]
 810098c:	4413      	add	r3, r2
 810098e:	693a      	ldr	r2, [r7, #16]
 8100990:	429a      	cmp	r2, r3
 8100992:	d207      	bcs.n	81009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100994:	f000 fac6 	bl	8100f24 <__errno>
 8100998:	4603      	mov	r3, r0
 810099a:	220c      	movs	r2, #12
 810099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810099e:	f04f 33ff 	mov.w	r3, #4294967295
 81009a2:	e009      	b.n	81009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81009a4:	4b08      	ldr	r3, [pc, #32]	; (81009c8 <_sbrk+0x64>)
 81009a6:	681b      	ldr	r3, [r3, #0]
 81009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81009aa:	4b07      	ldr	r3, [pc, #28]	; (81009c8 <_sbrk+0x64>)
 81009ac:	681a      	ldr	r2, [r3, #0]
 81009ae:	687b      	ldr	r3, [r7, #4]
 81009b0:	4413      	add	r3, r2
 81009b2:	4a05      	ldr	r2, [pc, #20]	; (81009c8 <_sbrk+0x64>)
 81009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81009b6:	68fb      	ldr	r3, [r7, #12]
}
 81009b8:	4618      	mov	r0, r3
 81009ba:	3718      	adds	r7, #24
 81009bc:	46bd      	mov	sp, r7
 81009be:	bd80      	pop	{r7, pc}
 81009c0:	10048000 	.word	0x10048000
 81009c4:	00000400 	.word	0x00000400
 81009c8:	10003f64 	.word	0x10003f64
 81009cc:	100040c0 	.word	0x100040c0

081009d0 <__NVIC_EnableIRQ>:
{
 81009d0:	b480      	push	{r7}
 81009d2:	b083      	sub	sp, #12
 81009d4:	af00      	add	r7, sp, #0
 81009d6:	4603      	mov	r3, r0
 81009d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81009da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009de:	2b00      	cmp	r3, #0
 81009e0:	db0b      	blt.n	81009fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81009e2:	88fb      	ldrh	r3, [r7, #6]
 81009e4:	f003 021f 	and.w	r2, r3, #31
 81009e8:	4906      	ldr	r1, [pc, #24]	; (8100a04 <__NVIC_EnableIRQ+0x34>)
 81009ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009ee:	095b      	lsrs	r3, r3, #5
 81009f0:	2001      	movs	r0, #1
 81009f2:	fa00 f202 	lsl.w	r2, r0, r2
 81009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 81009fa:	bf00      	nop
 81009fc:	370c      	adds	r7, #12
 81009fe:	46bd      	mov	sp, r7
 8100a00:	bc80      	pop	{r7}
 8100a02:	4770      	bx	lr
 8100a04:	e000e100 	.word	0xe000e100

08100a08 <delay>:
volatile uint32_t global_curr_tick;
volatile uint32_t global_curr_tick_prime;
volatile uint32_t tick_freq = 1;
uint32_t cntTask4;

void delay(uint32_t delay){
 8100a08:	b580      	push	{r7, lr}
 8100a0a:	b084      	sub	sp, #16
 8100a0c:	af00      	add	r7, sp, #0
 8100a0e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 8100a10:	f000 f81c 	bl	8100a4c <get_tick>
 8100a14:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 8100a16:	687b      	ldr	r3, [r7, #4]
 8100a18:	60fb      	str	r3, [r7, #12]
	if(wait<MAX_DELAY){
 8100a1a:	68fb      	ldr	r3, [r7, #12]
 8100a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100a20:	d004      	beq.n	8100a2c <delay+0x24>
		wait += tick_freq;
 8100a22:	4b09      	ldr	r3, [pc, #36]	; (8100a48 <delay+0x40>)
 8100a24:	681b      	ldr	r3, [r3, #0]
 8100a26:	68fa      	ldr	r2, [r7, #12]
 8100a28:	4413      	add	r3, r2
 8100a2a:	60fb      	str	r3, [r7, #12]
	}
	while((get_tick()-tickstart)<wait){}
 8100a2c:	bf00      	nop
 8100a2e:	f000 f80d 	bl	8100a4c <get_tick>
 8100a32:	4602      	mov	r2, r0
 8100a34:	68bb      	ldr	r3, [r7, #8]
 8100a36:	1ad3      	subs	r3, r2, r3
 8100a38:	68fa      	ldr	r2, [r7, #12]
 8100a3a:	429a      	cmp	r2, r3
 8100a3c:	d8f7      	bhi.n	8100a2e <delay+0x26>
}
 8100a3e:	bf00      	nop
 8100a40:	bf00      	nop
 8100a42:	3710      	adds	r7, #16
 8100a44:	46bd      	mov	sp, r7
 8100a46:	bd80      	pop	{r7, pc}
 8100a48:	10000000 	.word	0x10000000

08100a4c <get_tick>:

uint32_t get_tick(void){
 8100a4c:	b480      	push	{r7}
 8100a4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8100a50:	b672      	cpsid	i
}
 8100a52:	bf00      	nop
	__disable_irq();
	global_curr_tick_prime = global_curr_tick; //Fetch the current value of global counter
 8100a54:	4b05      	ldr	r3, [pc, #20]	; (8100a6c <get_tick+0x20>)
 8100a56:	681b      	ldr	r3, [r3, #0]
 8100a58:	4a05      	ldr	r2, [pc, #20]	; (8100a70 <get_tick+0x24>)
 8100a5a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8100a5c:	b662      	cpsie	i
}
 8100a5e:	bf00      	nop
	__enable_irq();
	return global_curr_tick_prime;
 8100a60:	4b03      	ldr	r3, [pc, #12]	; (8100a70 <get_tick+0x24>)
 8100a62:	681b      	ldr	r3, [r3, #0]
}
 8100a64:	4618      	mov	r0, r3
 8100a66:	46bd      	mov	sp, r7
 8100a68:	bc80      	pop	{r7}
 8100a6a:	4770      	bx	lr
 8100a6c:	10003f68 	.word	0x10003f68
 8100a70:	10003f6c 	.word	0x10003f6c

08100a74 <tick_increment>:

void tick_increment(void){
 8100a74:	b480      	push	{r7}
 8100a76:	af00      	add	r7, sp, #0
	global_curr_tick += tick_freq;
 8100a78:	4b05      	ldr	r3, [pc, #20]	; (8100a90 <tick_increment+0x1c>)
 8100a7a:	681a      	ldr	r2, [r3, #0]
 8100a7c:	4b05      	ldr	r3, [pc, #20]	; (8100a94 <tick_increment+0x20>)
 8100a7e:	681b      	ldr	r3, [r3, #0]
 8100a80:	4413      	add	r3, r2
 8100a82:	4a04      	ldr	r2, [pc, #16]	; (8100a94 <tick_increment+0x20>)
 8100a84:	6013      	str	r3, [r2, #0]
}
 8100a86:	bf00      	nop
 8100a88:	46bd      	mov	sp, r7
 8100a8a:	bc80      	pop	{r7}
 8100a8c:	4770      	bx	lr
 8100a8e:	bf00      	nop
 8100a90:	10000000 	.word	0x10000000
 8100a94:	10003f68 	.word	0x10003f68

08100a98 <tim2_1MS_tick_init>:

void tim2_1MS_tick_init(){
 8100a98:	b580      	push	{r7, lr}
 8100a9a:	af00      	add	r7, sp, #0
	//Enable clock access to timer 2
	RCC->APB1LENR |= TIM2EN;
 8100a9c:	4b10      	ldr	r3, [pc, #64]	; (8100ae0 <tim2_1MS_tick_init+0x48>)
 8100a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100aa2:	4a0f      	ldr	r2, [pc, #60]	; (8100ae0 <tim2_1MS_tick_init+0x48>)
 8100aa4:	f043 0301 	orr.w	r3, r3, #1
 8100aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	//Set timer prescalar
	TIM2->PSC = 6400-1; // Bus clock is 64000000 dividing by prescalar to get 10000 HZ
 8100aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100ab0:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8100ab4:	629a      	str	r2, [r3, #40]	; 0x28
	//Set auto reload value
	TIM2->ARR = 10-1; //1000/1000 = 1Hz
 8100ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100aba:	2209      	movs	r2, #9
 8100abc:	62da      	str	r2, [r3, #44]	; 0x2c
	//Clear Counter
	TIM2->CNT = 0;
 8100abe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100ac2:	2200      	movs	r2, #0
 8100ac4:	625a      	str	r2, [r3, #36]	; 0x24
	//Enable timer 2
	TIM2->CR1 = CR1_CEN;
 8100ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100aca:	2201      	movs	r2, #1
 8100acc:	601a      	str	r2, [r3, #0]
	//Enable interrupt
	TIM2->DIER = DIER_UIE;
 8100ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100ad2:	2201      	movs	r2, #1
 8100ad4:	60da      	str	r2, [r3, #12]
	//Enable the timer interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8100ad6:	201c      	movs	r0, #28
 8100ad8:	f7ff ff7a 	bl	81009d0 <__NVIC_EnableIRQ>
}
 8100adc:	bf00      	nop
 8100ade:	bd80      	pop	{r7, pc}
 8100ae0:	58024400 	.word	0x58024400

08100ae4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8100ae4:	b580      	push	{r7, lr}
 8100ae6:	af00      	add	r7, sp, #0
	//Clear the interrupt flag
	TIM2->SR &= ~SR_UIF;
 8100ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8100aec:	691b      	ldr	r3, [r3, #16]
 8100aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100af2:	f023 0301 	bic.w	r3, r3, #1
 8100af6:	6113      	str	r3, [r2, #16]
	cntTask4++;
 8100af8:	4b04      	ldr	r3, [pc, #16]	; (8100b0c <TIM2_IRQHandler+0x28>)
 8100afa:	681b      	ldr	r3, [r3, #0]
 8100afc:	3301      	adds	r3, #1
 8100afe:	4a03      	ldr	r2, [pc, #12]	; (8100b0c <TIM2_IRQHandler+0x28>)
 8100b00:	6013      	str	r3, [r2, #0]
	tick_increment();
 8100b02:	f7ff ffb7 	bl	8100a74 <tick_increment>
}
 8100b06:	bf00      	nop
 8100b08:	bd80      	pop	{r7, pc}
 8100b0a:	bf00      	nop
 8100b0c:	10003f70 	.word	0x10003f70

08100b10 <__io_putchar>:
#define APB1_CLK				SYS_FREQ
#define UART_BAUD_RATE			115200
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch){
 8100b10:	b580      	push	{r7, lr}
 8100b12:	b082      	sub	sp, #8
 8100b14:	af00      	add	r7, sp, #0
 8100b16:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8100b18:	6878      	ldr	r0, [r7, #4]
 8100b1a:	f000 f847 	bl	8100bac <uart_write>
	return ch;
 8100b1e:	687b      	ldr	r3, [r7, #4]
}
 8100b20:	4618      	mov	r0, r3
 8100b22:	3708      	adds	r7, #8
 8100b24:	46bd      	mov	sp, r7
 8100b26:	bd80      	pop	{r7, pc}

08100b28 <uart_tx_init>:
void uart_tx_init(void){
 8100b28:	b580      	push	{r7, lr}
 8100b2a:	af00      	add	r7, sp, #0

	RCC->AHB4ENR |= GPIOAEN; //Starting clock for GPIOA as using pin PA9 AND PA10 for USART
 8100b2c:	4b1b      	ldr	r3, [pc, #108]	; (8100b9c <uart_tx_init+0x74>)
 8100b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b32:	4a1a      	ldr	r2, [pc, #104]	; (8100b9c <uart_tx_init+0x74>)
 8100b34:	f043 0301 	orr.w	r3, r3, #1
 8100b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	//Setting the mode as
	GPIOA->MODER &= ~(1U<<18);
 8100b3c:	4b18      	ldr	r3, [pc, #96]	; (8100ba0 <uart_tx_init+0x78>)
 8100b3e:	681b      	ldr	r3, [r3, #0]
 8100b40:	4a17      	ldr	r2, [pc, #92]	; (8100ba0 <uart_tx_init+0x78>)
 8100b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8100b46:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8100b48:	4b15      	ldr	r3, [pc, #84]	; (8100ba0 <uart_tx_init+0x78>)
 8100b4a:	681b      	ldr	r3, [r3, #0]
 8100b4c:	4a14      	ldr	r2, [pc, #80]	; (8100ba0 <uart_tx_init+0x78>)
 8100b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8100b52:	6013      	str	r3, [r2, #0]

	/*GPIOA->MODER &= ~(1U<<20);
	GPIOA->MODER |= (1U<<21);*/

	//Setting GPIO Alternate function for PA9 AND PA10
	GPIOA->AFR[1] |= ((1U<<4)|(1U<<5)|(1U<<6));
 8100b54:	4b12      	ldr	r3, [pc, #72]	; (8100ba0 <uart_tx_init+0x78>)
 8100b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100b58:	4a11      	ldr	r2, [pc, #68]	; (8100ba0 <uart_tx_init+0x78>)
 8100b5a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8100b5e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[0] &= ~(1U<<7);
 8100b60:	4b0f      	ldr	r3, [pc, #60]	; (8100ba0 <uart_tx_init+0x78>)
 8100b62:	6a1b      	ldr	r3, [r3, #32]
 8100b64:	4a0e      	ldr	r2, [pc, #56]	; (8100ba0 <uart_tx_init+0x78>)
 8100b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8100b6a:	6213      	str	r3, [r2, #32]

	/*GPIOA->AFR[1] |= ((1U<<8)|(1U<<9)|(1U<<10));
	GPIOA->AFR[0] &= ~(1U<<11);*/

	//Enabling clock for USART1
	RCC->APB2ENR |= (1<<4);
 8100b6c:	4b0b      	ldr	r3, [pc, #44]	; (8100b9c <uart_tx_init+0x74>)
 8100b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100b72:	4a0a      	ldr	r2, [pc, #40]	; (8100b9c <uart_tx_init+0x74>)
 8100b74:	f043 0310 	orr.w	r3, r3, #16
 8100b78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

	//Setting USART1 Baud Rate
	uart_set_baudrate(APB1_CLK, UART_BAUD_RATE);
 8100b7c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8100b80:	4808      	ldr	r0, [pc, #32]	; (8100ba4 <uart_tx_init+0x7c>)
 8100b82:	f000 f829 	bl	8100bd8 <uart_set_baudrate>

	//Configuring Transfer Direction
	USART1->CR1 = (1U<<3);
 8100b86:	4b08      	ldr	r3, [pc, #32]	; (8100ba8 <uart_tx_init+0x80>)
 8100b88:	2208      	movs	r2, #8
 8100b8a:	601a      	str	r2, [r3, #0]

	//Enable the USART Module
	USART1->CR1 |= (1U<<0);
 8100b8c:	4b06      	ldr	r3, [pc, #24]	; (8100ba8 <uart_tx_init+0x80>)
 8100b8e:	681b      	ldr	r3, [r3, #0]
 8100b90:	4a05      	ldr	r2, [pc, #20]	; (8100ba8 <uart_tx_init+0x80>)
 8100b92:	f043 0301 	orr.w	r3, r3, #1
 8100b96:	6013      	str	r3, [r2, #0]
}
 8100b98:	bf00      	nop
 8100b9a:	bd80      	pop	{r7, pc}
 8100b9c:	58024400 	.word	0x58024400
 8100ba0:	58020000 	.word	0x58020000
 8100ba4:	03d09000 	.word	0x03d09000
 8100ba8:	40011000 	.word	0x40011000

08100bac <uart_write>:

static void uart_write(int ch){
 8100bac:	b480      	push	{r7}
 8100bae:	b083      	sub	sp, #12
 8100bb0:	af00      	add	r7, sp, #0
 8100bb2:	6078      	str	r0, [r7, #4]
	//Make sure data register is not full
	while(!(USART1->ISR & (1U<<7))){}
 8100bb4:	bf00      	nop
 8100bb6:	4b07      	ldr	r3, [pc, #28]	; (8100bd4 <uart_write+0x28>)
 8100bb8:	69db      	ldr	r3, [r3, #28]
 8100bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100bbe:	2b00      	cmp	r3, #0
 8100bc0:	d0f9      	beq.n	8100bb6 <uart_write+0xa>

	//Write to data transmit register
	USART1->TDR = (ch & 0xFF);
 8100bc2:	687b      	ldr	r3, [r7, #4]
 8100bc4:	4a03      	ldr	r2, [pc, #12]	; (8100bd4 <uart_write+0x28>)
 8100bc6:	b2db      	uxtb	r3, r3
 8100bc8:	6293      	str	r3, [r2, #40]	; 0x28

}
 8100bca:	bf00      	nop
 8100bcc:	370c      	adds	r7, #12
 8100bce:	46bd      	mov	sp, r7
 8100bd0:	bc80      	pop	{r7}
 8100bd2:	4770      	bx	lr
 8100bd4:	40011000 	.word	0x40011000

08100bd8 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 8100bd8:	b480      	push	{r7}
 8100bda:	b083      	sub	sp, #12
 8100bdc:	af00      	add	r7, sp, #0
 8100bde:	6078      	str	r0, [r7, #4]
 8100be0:	6039      	str	r1, [r7, #0]
	USART1->BRR = (periph_clk + (baudrate/2U)) / baudrate;
 8100be2:	683b      	ldr	r3, [r7, #0]
 8100be4:	085a      	lsrs	r2, r3, #1
 8100be6:	687b      	ldr	r3, [r7, #4]
 8100be8:	441a      	add	r2, r3
 8100bea:	4905      	ldr	r1, [pc, #20]	; (8100c00 <uart_set_baudrate+0x28>)
 8100bec:	683b      	ldr	r3, [r7, #0]
 8100bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8100bf2:	60cb      	str	r3, [r1, #12]
}
 8100bf4:	bf00      	nop
 8100bf6:	370c      	adds	r7, #12
 8100bf8:	46bd      	mov	sp, r7
 8100bfa:	bc80      	pop	{r7}
 8100bfc:	4770      	bx	lr
 8100bfe:	bf00      	nop
 8100c00:	40011000 	.word	0x40011000

08100c04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8100c04:	480d      	ldr	r0, [pc, #52]	; (8100c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8100c06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100c08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100c0c:	480c      	ldr	r0, [pc, #48]	; (8100c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8100c0e:	490d      	ldr	r1, [pc, #52]	; (8100c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8100c10:	4a0d      	ldr	r2, [pc, #52]	; (8100c48 <LoopForever+0xe>)
  movs r3, #0
 8100c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100c14:	e002      	b.n	8100c1c <LoopCopyDataInit>

08100c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100c1a:	3304      	adds	r3, #4

08100c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100c20:	d3f9      	bcc.n	8100c16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100c22:	4a0a      	ldr	r2, [pc, #40]	; (8100c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8100c24:	4c0a      	ldr	r4, [pc, #40]	; (8100c50 <LoopForever+0x16>)
  movs r3, #0
 8100c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100c28:	e001      	b.n	8100c2e <LoopFillZerobss>

08100c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100c2c:	3204      	adds	r2, #4

08100c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100c30:	d3fb      	bcc.n	8100c2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8100c32:	f000 f97d 	bl	8100f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8100c36:	f7ff fbfb 	bl	8100430 <main>

08100c3a <LoopForever>:

LoopForever:
  b LoopForever
 8100c3a:	e7fe      	b.n	8100c3a <LoopForever>
  ldr   r0, =_estack
 8100c3c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100c40:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100c44:	10000060 	.word	0x10000060
  ldr r2, =_sidata
 8100c48:	08101b24 	.word	0x08101b24
  ldr r2, =_sbss
 8100c4c:	10000060 	.word	0x10000060
  ldr r4, =_ebss
 8100c50:	100040c0 	.word	0x100040c0

08100c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8100c54:	e7fe      	b.n	8100c54 <ADC1_2_IRQHandler>
	...

08100c58 <std>:
 8100c58:	2300      	movs	r3, #0
 8100c5a:	b510      	push	{r4, lr}
 8100c5c:	4604      	mov	r4, r0
 8100c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8100c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8100c66:	6083      	str	r3, [r0, #8]
 8100c68:	8181      	strh	r1, [r0, #12]
 8100c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8100c6c:	81c2      	strh	r2, [r0, #14]
 8100c6e:	6183      	str	r3, [r0, #24]
 8100c70:	4619      	mov	r1, r3
 8100c72:	2208      	movs	r2, #8
 8100c74:	305c      	adds	r0, #92	; 0x5c
 8100c76:	f000 f906 	bl	8100e86 <memset>
 8100c7a:	4b0d      	ldr	r3, [pc, #52]	; (8100cb0 <std+0x58>)
 8100c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8100c7e:	4b0d      	ldr	r3, [pc, #52]	; (8100cb4 <std+0x5c>)
 8100c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8100c82:	4b0d      	ldr	r3, [pc, #52]	; (8100cb8 <std+0x60>)
 8100c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8100c86:	4b0d      	ldr	r3, [pc, #52]	; (8100cbc <std+0x64>)
 8100c88:	6323      	str	r3, [r4, #48]	; 0x30
 8100c8a:	4b0d      	ldr	r3, [pc, #52]	; (8100cc0 <std+0x68>)
 8100c8c:	6224      	str	r4, [r4, #32]
 8100c8e:	429c      	cmp	r4, r3
 8100c90:	d006      	beq.n	8100ca0 <std+0x48>
 8100c92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8100c96:	4294      	cmp	r4, r2
 8100c98:	d002      	beq.n	8100ca0 <std+0x48>
 8100c9a:	33d0      	adds	r3, #208	; 0xd0
 8100c9c:	429c      	cmp	r4, r3
 8100c9e:	d105      	bne.n	8100cac <std+0x54>
 8100ca0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8100ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100ca8:	f000 b966 	b.w	8100f78 <__retarget_lock_init_recursive>
 8100cac:	bd10      	pop	{r4, pc}
 8100cae:	bf00      	nop
 8100cb0:	08100e01 	.word	0x08100e01
 8100cb4:	08100e23 	.word	0x08100e23
 8100cb8:	08100e5b 	.word	0x08100e5b
 8100cbc:	08100e7f 	.word	0x08100e7f
 8100cc0:	10003f74 	.word	0x10003f74

08100cc4 <stdio_exit_handler>:
 8100cc4:	4a02      	ldr	r2, [pc, #8]	; (8100cd0 <stdio_exit_handler+0xc>)
 8100cc6:	4903      	ldr	r1, [pc, #12]	; (8100cd4 <stdio_exit_handler+0x10>)
 8100cc8:	4803      	ldr	r0, [pc, #12]	; (8100cd8 <stdio_exit_handler+0x14>)
 8100cca:	f000 b869 	b.w	8100da0 <_fwalk_sglue>
 8100cce:	bf00      	nop
 8100cd0:	10000004 	.word	0x10000004
 8100cd4:	08101815 	.word	0x08101815
 8100cd8:	10000010 	.word	0x10000010

08100cdc <cleanup_stdio>:
 8100cdc:	6841      	ldr	r1, [r0, #4]
 8100cde:	4b0c      	ldr	r3, [pc, #48]	; (8100d10 <cleanup_stdio+0x34>)
 8100ce0:	4299      	cmp	r1, r3
 8100ce2:	b510      	push	{r4, lr}
 8100ce4:	4604      	mov	r4, r0
 8100ce6:	d001      	beq.n	8100cec <cleanup_stdio+0x10>
 8100ce8:	f000 fd94 	bl	8101814 <_fflush_r>
 8100cec:	68a1      	ldr	r1, [r4, #8]
 8100cee:	4b09      	ldr	r3, [pc, #36]	; (8100d14 <cleanup_stdio+0x38>)
 8100cf0:	4299      	cmp	r1, r3
 8100cf2:	d002      	beq.n	8100cfa <cleanup_stdio+0x1e>
 8100cf4:	4620      	mov	r0, r4
 8100cf6:	f000 fd8d 	bl	8101814 <_fflush_r>
 8100cfa:	68e1      	ldr	r1, [r4, #12]
 8100cfc:	4b06      	ldr	r3, [pc, #24]	; (8100d18 <cleanup_stdio+0x3c>)
 8100cfe:	4299      	cmp	r1, r3
 8100d00:	d004      	beq.n	8100d0c <cleanup_stdio+0x30>
 8100d02:	4620      	mov	r0, r4
 8100d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100d08:	f000 bd84 	b.w	8101814 <_fflush_r>
 8100d0c:	bd10      	pop	{r4, pc}
 8100d0e:	bf00      	nop
 8100d10:	10003f74 	.word	0x10003f74
 8100d14:	10003fdc 	.word	0x10003fdc
 8100d18:	10004044 	.word	0x10004044

08100d1c <global_stdio_init.part.0>:
 8100d1c:	b510      	push	{r4, lr}
 8100d1e:	4b0b      	ldr	r3, [pc, #44]	; (8100d4c <global_stdio_init.part.0+0x30>)
 8100d20:	4c0b      	ldr	r4, [pc, #44]	; (8100d50 <global_stdio_init.part.0+0x34>)
 8100d22:	4a0c      	ldr	r2, [pc, #48]	; (8100d54 <global_stdio_init.part.0+0x38>)
 8100d24:	601a      	str	r2, [r3, #0]
 8100d26:	4620      	mov	r0, r4
 8100d28:	2200      	movs	r2, #0
 8100d2a:	2104      	movs	r1, #4
 8100d2c:	f7ff ff94 	bl	8100c58 <std>
 8100d30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8100d34:	2201      	movs	r2, #1
 8100d36:	2109      	movs	r1, #9
 8100d38:	f7ff ff8e 	bl	8100c58 <std>
 8100d3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8100d40:	2202      	movs	r2, #2
 8100d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100d46:	2112      	movs	r1, #18
 8100d48:	f7ff bf86 	b.w	8100c58 <std>
 8100d4c:	100040ac 	.word	0x100040ac
 8100d50:	10003f74 	.word	0x10003f74
 8100d54:	08100cc5 	.word	0x08100cc5

08100d58 <__sfp_lock_acquire>:
 8100d58:	4801      	ldr	r0, [pc, #4]	; (8100d60 <__sfp_lock_acquire+0x8>)
 8100d5a:	f000 b90e 	b.w	8100f7a <__retarget_lock_acquire_recursive>
 8100d5e:	bf00      	nop
 8100d60:	100040b5 	.word	0x100040b5

08100d64 <__sfp_lock_release>:
 8100d64:	4801      	ldr	r0, [pc, #4]	; (8100d6c <__sfp_lock_release+0x8>)
 8100d66:	f000 b909 	b.w	8100f7c <__retarget_lock_release_recursive>
 8100d6a:	bf00      	nop
 8100d6c:	100040b5 	.word	0x100040b5

08100d70 <__sinit>:
 8100d70:	b510      	push	{r4, lr}
 8100d72:	4604      	mov	r4, r0
 8100d74:	f7ff fff0 	bl	8100d58 <__sfp_lock_acquire>
 8100d78:	6a23      	ldr	r3, [r4, #32]
 8100d7a:	b11b      	cbz	r3, 8100d84 <__sinit+0x14>
 8100d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100d80:	f7ff bff0 	b.w	8100d64 <__sfp_lock_release>
 8100d84:	4b04      	ldr	r3, [pc, #16]	; (8100d98 <__sinit+0x28>)
 8100d86:	6223      	str	r3, [r4, #32]
 8100d88:	4b04      	ldr	r3, [pc, #16]	; (8100d9c <__sinit+0x2c>)
 8100d8a:	681b      	ldr	r3, [r3, #0]
 8100d8c:	2b00      	cmp	r3, #0
 8100d8e:	d1f5      	bne.n	8100d7c <__sinit+0xc>
 8100d90:	f7ff ffc4 	bl	8100d1c <global_stdio_init.part.0>
 8100d94:	e7f2      	b.n	8100d7c <__sinit+0xc>
 8100d96:	bf00      	nop
 8100d98:	08100cdd 	.word	0x08100cdd
 8100d9c:	100040ac 	.word	0x100040ac

08100da0 <_fwalk_sglue>:
 8100da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8100da4:	4607      	mov	r7, r0
 8100da6:	4688      	mov	r8, r1
 8100da8:	4614      	mov	r4, r2
 8100daa:	2600      	movs	r6, #0
 8100dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8100db0:	f1b9 0901 	subs.w	r9, r9, #1
 8100db4:	d505      	bpl.n	8100dc2 <_fwalk_sglue+0x22>
 8100db6:	6824      	ldr	r4, [r4, #0]
 8100db8:	2c00      	cmp	r4, #0
 8100dba:	d1f7      	bne.n	8100dac <_fwalk_sglue+0xc>
 8100dbc:	4630      	mov	r0, r6
 8100dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8100dc2:	89ab      	ldrh	r3, [r5, #12]
 8100dc4:	2b01      	cmp	r3, #1
 8100dc6:	d907      	bls.n	8100dd8 <_fwalk_sglue+0x38>
 8100dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8100dcc:	3301      	adds	r3, #1
 8100dce:	d003      	beq.n	8100dd8 <_fwalk_sglue+0x38>
 8100dd0:	4629      	mov	r1, r5
 8100dd2:	4638      	mov	r0, r7
 8100dd4:	47c0      	blx	r8
 8100dd6:	4306      	orrs	r6, r0
 8100dd8:	3568      	adds	r5, #104	; 0x68
 8100dda:	e7e9      	b.n	8100db0 <_fwalk_sglue+0x10>

08100ddc <iprintf>:
 8100ddc:	b40f      	push	{r0, r1, r2, r3}
 8100dde:	b507      	push	{r0, r1, r2, lr}
 8100de0:	4906      	ldr	r1, [pc, #24]	; (8100dfc <iprintf+0x20>)
 8100de2:	ab04      	add	r3, sp, #16
 8100de4:	6808      	ldr	r0, [r1, #0]
 8100de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8100dea:	6881      	ldr	r1, [r0, #8]
 8100dec:	9301      	str	r3, [sp, #4]
 8100dee:	f000 f9e5 	bl	81011bc <_vfiprintf_r>
 8100df2:	b003      	add	sp, #12
 8100df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8100df8:	b004      	add	sp, #16
 8100dfa:	4770      	bx	lr
 8100dfc:	1000005c 	.word	0x1000005c

08100e00 <__sread>:
 8100e00:	b510      	push	{r4, lr}
 8100e02:	460c      	mov	r4, r1
 8100e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100e08:	f000 f868 	bl	8100edc <_read_r>
 8100e0c:	2800      	cmp	r0, #0
 8100e0e:	bfab      	itete	ge
 8100e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8100e12:	89a3      	ldrhlt	r3, [r4, #12]
 8100e14:	181b      	addge	r3, r3, r0
 8100e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8100e1a:	bfac      	ite	ge
 8100e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8100e1e:	81a3      	strhlt	r3, [r4, #12]
 8100e20:	bd10      	pop	{r4, pc}

08100e22 <__swrite>:
 8100e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100e26:	461f      	mov	r7, r3
 8100e28:	898b      	ldrh	r3, [r1, #12]
 8100e2a:	05db      	lsls	r3, r3, #23
 8100e2c:	4605      	mov	r5, r0
 8100e2e:	460c      	mov	r4, r1
 8100e30:	4616      	mov	r6, r2
 8100e32:	d505      	bpl.n	8100e40 <__swrite+0x1e>
 8100e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100e38:	2302      	movs	r3, #2
 8100e3a:	2200      	movs	r2, #0
 8100e3c:	f000 f83c 	bl	8100eb8 <_lseek_r>
 8100e40:	89a3      	ldrh	r3, [r4, #12]
 8100e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8100e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8100e4a:	81a3      	strh	r3, [r4, #12]
 8100e4c:	4632      	mov	r2, r6
 8100e4e:	463b      	mov	r3, r7
 8100e50:	4628      	mov	r0, r5
 8100e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8100e56:	f000 b853 	b.w	8100f00 <_write_r>

08100e5a <__sseek>:
 8100e5a:	b510      	push	{r4, lr}
 8100e5c:	460c      	mov	r4, r1
 8100e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100e62:	f000 f829 	bl	8100eb8 <_lseek_r>
 8100e66:	1c43      	adds	r3, r0, #1
 8100e68:	89a3      	ldrh	r3, [r4, #12]
 8100e6a:	bf15      	itete	ne
 8100e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8100e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8100e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8100e76:	81a3      	strheq	r3, [r4, #12]
 8100e78:	bf18      	it	ne
 8100e7a:	81a3      	strhne	r3, [r4, #12]
 8100e7c:	bd10      	pop	{r4, pc}

08100e7e <__sclose>:
 8100e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100e82:	f000 b809 	b.w	8100e98 <_close_r>

08100e86 <memset>:
 8100e86:	4402      	add	r2, r0
 8100e88:	4603      	mov	r3, r0
 8100e8a:	4293      	cmp	r3, r2
 8100e8c:	d100      	bne.n	8100e90 <memset+0xa>
 8100e8e:	4770      	bx	lr
 8100e90:	f803 1b01 	strb.w	r1, [r3], #1
 8100e94:	e7f9      	b.n	8100e8a <memset+0x4>
	...

08100e98 <_close_r>:
 8100e98:	b538      	push	{r3, r4, r5, lr}
 8100e9a:	4d06      	ldr	r5, [pc, #24]	; (8100eb4 <_close_r+0x1c>)
 8100e9c:	2300      	movs	r3, #0
 8100e9e:	4604      	mov	r4, r0
 8100ea0:	4608      	mov	r0, r1
 8100ea2:	602b      	str	r3, [r5, #0]
 8100ea4:	f7ff fd2e 	bl	8100904 <_close>
 8100ea8:	1c43      	adds	r3, r0, #1
 8100eaa:	d102      	bne.n	8100eb2 <_close_r+0x1a>
 8100eac:	682b      	ldr	r3, [r5, #0]
 8100eae:	b103      	cbz	r3, 8100eb2 <_close_r+0x1a>
 8100eb0:	6023      	str	r3, [r4, #0]
 8100eb2:	bd38      	pop	{r3, r4, r5, pc}
 8100eb4:	100040b0 	.word	0x100040b0

08100eb8 <_lseek_r>:
 8100eb8:	b538      	push	{r3, r4, r5, lr}
 8100eba:	4d07      	ldr	r5, [pc, #28]	; (8100ed8 <_lseek_r+0x20>)
 8100ebc:	4604      	mov	r4, r0
 8100ebe:	4608      	mov	r0, r1
 8100ec0:	4611      	mov	r1, r2
 8100ec2:	2200      	movs	r2, #0
 8100ec4:	602a      	str	r2, [r5, #0]
 8100ec6:	461a      	mov	r2, r3
 8100ec8:	f7ff fd40 	bl	810094c <_lseek>
 8100ecc:	1c43      	adds	r3, r0, #1
 8100ece:	d102      	bne.n	8100ed6 <_lseek_r+0x1e>
 8100ed0:	682b      	ldr	r3, [r5, #0]
 8100ed2:	b103      	cbz	r3, 8100ed6 <_lseek_r+0x1e>
 8100ed4:	6023      	str	r3, [r4, #0]
 8100ed6:	bd38      	pop	{r3, r4, r5, pc}
 8100ed8:	100040b0 	.word	0x100040b0

08100edc <_read_r>:
 8100edc:	b538      	push	{r3, r4, r5, lr}
 8100ede:	4d07      	ldr	r5, [pc, #28]	; (8100efc <_read_r+0x20>)
 8100ee0:	4604      	mov	r4, r0
 8100ee2:	4608      	mov	r0, r1
 8100ee4:	4611      	mov	r1, r2
 8100ee6:	2200      	movs	r2, #0
 8100ee8:	602a      	str	r2, [r5, #0]
 8100eea:	461a      	mov	r2, r3
 8100eec:	f7ff fcd1 	bl	8100892 <_read>
 8100ef0:	1c43      	adds	r3, r0, #1
 8100ef2:	d102      	bne.n	8100efa <_read_r+0x1e>
 8100ef4:	682b      	ldr	r3, [r5, #0]
 8100ef6:	b103      	cbz	r3, 8100efa <_read_r+0x1e>
 8100ef8:	6023      	str	r3, [r4, #0]
 8100efa:	bd38      	pop	{r3, r4, r5, pc}
 8100efc:	100040b0 	.word	0x100040b0

08100f00 <_write_r>:
 8100f00:	b538      	push	{r3, r4, r5, lr}
 8100f02:	4d07      	ldr	r5, [pc, #28]	; (8100f20 <_write_r+0x20>)
 8100f04:	4604      	mov	r4, r0
 8100f06:	4608      	mov	r0, r1
 8100f08:	4611      	mov	r1, r2
 8100f0a:	2200      	movs	r2, #0
 8100f0c:	602a      	str	r2, [r5, #0]
 8100f0e:	461a      	mov	r2, r3
 8100f10:	f7ff fcdc 	bl	81008cc <_write>
 8100f14:	1c43      	adds	r3, r0, #1
 8100f16:	d102      	bne.n	8100f1e <_write_r+0x1e>
 8100f18:	682b      	ldr	r3, [r5, #0]
 8100f1a:	b103      	cbz	r3, 8100f1e <_write_r+0x1e>
 8100f1c:	6023      	str	r3, [r4, #0]
 8100f1e:	bd38      	pop	{r3, r4, r5, pc}
 8100f20:	100040b0 	.word	0x100040b0

08100f24 <__errno>:
 8100f24:	4b01      	ldr	r3, [pc, #4]	; (8100f2c <__errno+0x8>)
 8100f26:	6818      	ldr	r0, [r3, #0]
 8100f28:	4770      	bx	lr
 8100f2a:	bf00      	nop
 8100f2c:	1000005c 	.word	0x1000005c

08100f30 <__libc_init_array>:
 8100f30:	b570      	push	{r4, r5, r6, lr}
 8100f32:	4d0d      	ldr	r5, [pc, #52]	; (8100f68 <__libc_init_array+0x38>)
 8100f34:	4c0d      	ldr	r4, [pc, #52]	; (8100f6c <__libc_init_array+0x3c>)
 8100f36:	1b64      	subs	r4, r4, r5
 8100f38:	10a4      	asrs	r4, r4, #2
 8100f3a:	2600      	movs	r6, #0
 8100f3c:	42a6      	cmp	r6, r4
 8100f3e:	d109      	bne.n	8100f54 <__libc_init_array+0x24>
 8100f40:	4d0b      	ldr	r5, [pc, #44]	; (8100f70 <__libc_init_array+0x40>)
 8100f42:	4c0c      	ldr	r4, [pc, #48]	; (8100f74 <__libc_init_array+0x44>)
 8100f44:	f000 fdb8 	bl	8101ab8 <_init>
 8100f48:	1b64      	subs	r4, r4, r5
 8100f4a:	10a4      	asrs	r4, r4, #2
 8100f4c:	2600      	movs	r6, #0
 8100f4e:	42a6      	cmp	r6, r4
 8100f50:	d105      	bne.n	8100f5e <__libc_init_array+0x2e>
 8100f52:	bd70      	pop	{r4, r5, r6, pc}
 8100f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8100f58:	4798      	blx	r3
 8100f5a:	3601      	adds	r6, #1
 8100f5c:	e7ee      	b.n	8100f3c <__libc_init_array+0xc>
 8100f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8100f62:	4798      	blx	r3
 8100f64:	3601      	adds	r6, #1
 8100f66:	e7f2      	b.n	8100f4e <__libc_init_array+0x1e>
 8100f68:	08101b1c 	.word	0x08101b1c
 8100f6c:	08101b1c 	.word	0x08101b1c
 8100f70:	08101b1c 	.word	0x08101b1c
 8100f74:	08101b20 	.word	0x08101b20

08100f78 <__retarget_lock_init_recursive>:
 8100f78:	4770      	bx	lr

08100f7a <__retarget_lock_acquire_recursive>:
 8100f7a:	4770      	bx	lr

08100f7c <__retarget_lock_release_recursive>:
 8100f7c:	4770      	bx	lr
	...

08100f80 <_free_r>:
 8100f80:	b538      	push	{r3, r4, r5, lr}
 8100f82:	4605      	mov	r5, r0
 8100f84:	2900      	cmp	r1, #0
 8100f86:	d041      	beq.n	810100c <_free_r+0x8c>
 8100f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8100f8c:	1f0c      	subs	r4, r1, #4
 8100f8e:	2b00      	cmp	r3, #0
 8100f90:	bfb8      	it	lt
 8100f92:	18e4      	addlt	r4, r4, r3
 8100f94:	f000 f8de 	bl	8101154 <__malloc_lock>
 8100f98:	4a1d      	ldr	r2, [pc, #116]	; (8101010 <_free_r+0x90>)
 8100f9a:	6813      	ldr	r3, [r2, #0]
 8100f9c:	b933      	cbnz	r3, 8100fac <_free_r+0x2c>
 8100f9e:	6063      	str	r3, [r4, #4]
 8100fa0:	6014      	str	r4, [r2, #0]
 8100fa2:	4628      	mov	r0, r5
 8100fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100fa8:	f000 b8da 	b.w	8101160 <__malloc_unlock>
 8100fac:	42a3      	cmp	r3, r4
 8100fae:	d908      	bls.n	8100fc2 <_free_r+0x42>
 8100fb0:	6820      	ldr	r0, [r4, #0]
 8100fb2:	1821      	adds	r1, r4, r0
 8100fb4:	428b      	cmp	r3, r1
 8100fb6:	bf01      	itttt	eq
 8100fb8:	6819      	ldreq	r1, [r3, #0]
 8100fba:	685b      	ldreq	r3, [r3, #4]
 8100fbc:	1809      	addeq	r1, r1, r0
 8100fbe:	6021      	streq	r1, [r4, #0]
 8100fc0:	e7ed      	b.n	8100f9e <_free_r+0x1e>
 8100fc2:	461a      	mov	r2, r3
 8100fc4:	685b      	ldr	r3, [r3, #4]
 8100fc6:	b10b      	cbz	r3, 8100fcc <_free_r+0x4c>
 8100fc8:	42a3      	cmp	r3, r4
 8100fca:	d9fa      	bls.n	8100fc2 <_free_r+0x42>
 8100fcc:	6811      	ldr	r1, [r2, #0]
 8100fce:	1850      	adds	r0, r2, r1
 8100fd0:	42a0      	cmp	r0, r4
 8100fd2:	d10b      	bne.n	8100fec <_free_r+0x6c>
 8100fd4:	6820      	ldr	r0, [r4, #0]
 8100fd6:	4401      	add	r1, r0
 8100fd8:	1850      	adds	r0, r2, r1
 8100fda:	4283      	cmp	r3, r0
 8100fdc:	6011      	str	r1, [r2, #0]
 8100fde:	d1e0      	bne.n	8100fa2 <_free_r+0x22>
 8100fe0:	6818      	ldr	r0, [r3, #0]
 8100fe2:	685b      	ldr	r3, [r3, #4]
 8100fe4:	6053      	str	r3, [r2, #4]
 8100fe6:	4408      	add	r0, r1
 8100fe8:	6010      	str	r0, [r2, #0]
 8100fea:	e7da      	b.n	8100fa2 <_free_r+0x22>
 8100fec:	d902      	bls.n	8100ff4 <_free_r+0x74>
 8100fee:	230c      	movs	r3, #12
 8100ff0:	602b      	str	r3, [r5, #0]
 8100ff2:	e7d6      	b.n	8100fa2 <_free_r+0x22>
 8100ff4:	6820      	ldr	r0, [r4, #0]
 8100ff6:	1821      	adds	r1, r4, r0
 8100ff8:	428b      	cmp	r3, r1
 8100ffa:	bf04      	itt	eq
 8100ffc:	6819      	ldreq	r1, [r3, #0]
 8100ffe:	685b      	ldreq	r3, [r3, #4]
 8101000:	6063      	str	r3, [r4, #4]
 8101002:	bf04      	itt	eq
 8101004:	1809      	addeq	r1, r1, r0
 8101006:	6021      	streq	r1, [r4, #0]
 8101008:	6054      	str	r4, [r2, #4]
 810100a:	e7ca      	b.n	8100fa2 <_free_r+0x22>
 810100c:	bd38      	pop	{r3, r4, r5, pc}
 810100e:	bf00      	nop
 8101010:	100040b8 	.word	0x100040b8

08101014 <sbrk_aligned>:
 8101014:	b570      	push	{r4, r5, r6, lr}
 8101016:	4e0e      	ldr	r6, [pc, #56]	; (8101050 <sbrk_aligned+0x3c>)
 8101018:	460c      	mov	r4, r1
 810101a:	6831      	ldr	r1, [r6, #0]
 810101c:	4605      	mov	r5, r0
 810101e:	b911      	cbnz	r1, 8101026 <sbrk_aligned+0x12>
 8101020:	f000 fcb6 	bl	8101990 <_sbrk_r>
 8101024:	6030      	str	r0, [r6, #0]
 8101026:	4621      	mov	r1, r4
 8101028:	4628      	mov	r0, r5
 810102a:	f000 fcb1 	bl	8101990 <_sbrk_r>
 810102e:	1c43      	adds	r3, r0, #1
 8101030:	d00a      	beq.n	8101048 <sbrk_aligned+0x34>
 8101032:	1cc4      	adds	r4, r0, #3
 8101034:	f024 0403 	bic.w	r4, r4, #3
 8101038:	42a0      	cmp	r0, r4
 810103a:	d007      	beq.n	810104c <sbrk_aligned+0x38>
 810103c:	1a21      	subs	r1, r4, r0
 810103e:	4628      	mov	r0, r5
 8101040:	f000 fca6 	bl	8101990 <_sbrk_r>
 8101044:	3001      	adds	r0, #1
 8101046:	d101      	bne.n	810104c <sbrk_aligned+0x38>
 8101048:	f04f 34ff 	mov.w	r4, #4294967295
 810104c:	4620      	mov	r0, r4
 810104e:	bd70      	pop	{r4, r5, r6, pc}
 8101050:	100040bc 	.word	0x100040bc

08101054 <_malloc_r>:
 8101054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8101058:	1ccd      	adds	r5, r1, #3
 810105a:	f025 0503 	bic.w	r5, r5, #3
 810105e:	3508      	adds	r5, #8
 8101060:	2d0c      	cmp	r5, #12
 8101062:	bf38      	it	cc
 8101064:	250c      	movcc	r5, #12
 8101066:	2d00      	cmp	r5, #0
 8101068:	4607      	mov	r7, r0
 810106a:	db01      	blt.n	8101070 <_malloc_r+0x1c>
 810106c:	42a9      	cmp	r1, r5
 810106e:	d905      	bls.n	810107c <_malloc_r+0x28>
 8101070:	230c      	movs	r3, #12
 8101072:	603b      	str	r3, [r7, #0]
 8101074:	2600      	movs	r6, #0
 8101076:	4630      	mov	r0, r6
 8101078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810107c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8101150 <_malloc_r+0xfc>
 8101080:	f000 f868 	bl	8101154 <__malloc_lock>
 8101084:	f8d8 3000 	ldr.w	r3, [r8]
 8101088:	461c      	mov	r4, r3
 810108a:	bb5c      	cbnz	r4, 81010e4 <_malloc_r+0x90>
 810108c:	4629      	mov	r1, r5
 810108e:	4638      	mov	r0, r7
 8101090:	f7ff ffc0 	bl	8101014 <sbrk_aligned>
 8101094:	1c43      	adds	r3, r0, #1
 8101096:	4604      	mov	r4, r0
 8101098:	d155      	bne.n	8101146 <_malloc_r+0xf2>
 810109a:	f8d8 4000 	ldr.w	r4, [r8]
 810109e:	4626      	mov	r6, r4
 81010a0:	2e00      	cmp	r6, #0
 81010a2:	d145      	bne.n	8101130 <_malloc_r+0xdc>
 81010a4:	2c00      	cmp	r4, #0
 81010a6:	d048      	beq.n	810113a <_malloc_r+0xe6>
 81010a8:	6823      	ldr	r3, [r4, #0]
 81010aa:	4631      	mov	r1, r6
 81010ac:	4638      	mov	r0, r7
 81010ae:	eb04 0903 	add.w	r9, r4, r3
 81010b2:	f000 fc6d 	bl	8101990 <_sbrk_r>
 81010b6:	4581      	cmp	r9, r0
 81010b8:	d13f      	bne.n	810113a <_malloc_r+0xe6>
 81010ba:	6821      	ldr	r1, [r4, #0]
 81010bc:	1a6d      	subs	r5, r5, r1
 81010be:	4629      	mov	r1, r5
 81010c0:	4638      	mov	r0, r7
 81010c2:	f7ff ffa7 	bl	8101014 <sbrk_aligned>
 81010c6:	3001      	adds	r0, #1
 81010c8:	d037      	beq.n	810113a <_malloc_r+0xe6>
 81010ca:	6823      	ldr	r3, [r4, #0]
 81010cc:	442b      	add	r3, r5
 81010ce:	6023      	str	r3, [r4, #0]
 81010d0:	f8d8 3000 	ldr.w	r3, [r8]
 81010d4:	2b00      	cmp	r3, #0
 81010d6:	d038      	beq.n	810114a <_malloc_r+0xf6>
 81010d8:	685a      	ldr	r2, [r3, #4]
 81010da:	42a2      	cmp	r2, r4
 81010dc:	d12b      	bne.n	8101136 <_malloc_r+0xe2>
 81010de:	2200      	movs	r2, #0
 81010e0:	605a      	str	r2, [r3, #4]
 81010e2:	e00f      	b.n	8101104 <_malloc_r+0xb0>
 81010e4:	6822      	ldr	r2, [r4, #0]
 81010e6:	1b52      	subs	r2, r2, r5
 81010e8:	d41f      	bmi.n	810112a <_malloc_r+0xd6>
 81010ea:	2a0b      	cmp	r2, #11
 81010ec:	d917      	bls.n	810111e <_malloc_r+0xca>
 81010ee:	1961      	adds	r1, r4, r5
 81010f0:	42a3      	cmp	r3, r4
 81010f2:	6025      	str	r5, [r4, #0]
 81010f4:	bf18      	it	ne
 81010f6:	6059      	strne	r1, [r3, #4]
 81010f8:	6863      	ldr	r3, [r4, #4]
 81010fa:	bf08      	it	eq
 81010fc:	f8c8 1000 	streq.w	r1, [r8]
 8101100:	5162      	str	r2, [r4, r5]
 8101102:	604b      	str	r3, [r1, #4]
 8101104:	4638      	mov	r0, r7
 8101106:	f104 060b 	add.w	r6, r4, #11
 810110a:	f000 f829 	bl	8101160 <__malloc_unlock>
 810110e:	f026 0607 	bic.w	r6, r6, #7
 8101112:	1d23      	adds	r3, r4, #4
 8101114:	1af2      	subs	r2, r6, r3
 8101116:	d0ae      	beq.n	8101076 <_malloc_r+0x22>
 8101118:	1b9b      	subs	r3, r3, r6
 810111a:	50a3      	str	r3, [r4, r2]
 810111c:	e7ab      	b.n	8101076 <_malloc_r+0x22>
 810111e:	42a3      	cmp	r3, r4
 8101120:	6862      	ldr	r2, [r4, #4]
 8101122:	d1dd      	bne.n	81010e0 <_malloc_r+0x8c>
 8101124:	f8c8 2000 	str.w	r2, [r8]
 8101128:	e7ec      	b.n	8101104 <_malloc_r+0xb0>
 810112a:	4623      	mov	r3, r4
 810112c:	6864      	ldr	r4, [r4, #4]
 810112e:	e7ac      	b.n	810108a <_malloc_r+0x36>
 8101130:	4634      	mov	r4, r6
 8101132:	6876      	ldr	r6, [r6, #4]
 8101134:	e7b4      	b.n	81010a0 <_malloc_r+0x4c>
 8101136:	4613      	mov	r3, r2
 8101138:	e7cc      	b.n	81010d4 <_malloc_r+0x80>
 810113a:	230c      	movs	r3, #12
 810113c:	603b      	str	r3, [r7, #0]
 810113e:	4638      	mov	r0, r7
 8101140:	f000 f80e 	bl	8101160 <__malloc_unlock>
 8101144:	e797      	b.n	8101076 <_malloc_r+0x22>
 8101146:	6025      	str	r5, [r4, #0]
 8101148:	e7dc      	b.n	8101104 <_malloc_r+0xb0>
 810114a:	605b      	str	r3, [r3, #4]
 810114c:	deff      	udf	#255	; 0xff
 810114e:	bf00      	nop
 8101150:	100040b8 	.word	0x100040b8

08101154 <__malloc_lock>:
 8101154:	4801      	ldr	r0, [pc, #4]	; (810115c <__malloc_lock+0x8>)
 8101156:	f7ff bf10 	b.w	8100f7a <__retarget_lock_acquire_recursive>
 810115a:	bf00      	nop
 810115c:	100040b4 	.word	0x100040b4

08101160 <__malloc_unlock>:
 8101160:	4801      	ldr	r0, [pc, #4]	; (8101168 <__malloc_unlock+0x8>)
 8101162:	f7ff bf0b 	b.w	8100f7c <__retarget_lock_release_recursive>
 8101166:	bf00      	nop
 8101168:	100040b4 	.word	0x100040b4

0810116c <__sfputc_r>:
 810116c:	6893      	ldr	r3, [r2, #8]
 810116e:	3b01      	subs	r3, #1
 8101170:	2b00      	cmp	r3, #0
 8101172:	b410      	push	{r4}
 8101174:	6093      	str	r3, [r2, #8]
 8101176:	da07      	bge.n	8101188 <__sfputc_r+0x1c>
 8101178:	6994      	ldr	r4, [r2, #24]
 810117a:	42a3      	cmp	r3, r4
 810117c:	db01      	blt.n	8101182 <__sfputc_r+0x16>
 810117e:	290a      	cmp	r1, #10
 8101180:	d102      	bne.n	8101188 <__sfputc_r+0x1c>
 8101182:	bc10      	pop	{r4}
 8101184:	f000 bb6e 	b.w	8101864 <__swbuf_r>
 8101188:	6813      	ldr	r3, [r2, #0]
 810118a:	1c58      	adds	r0, r3, #1
 810118c:	6010      	str	r0, [r2, #0]
 810118e:	7019      	strb	r1, [r3, #0]
 8101190:	4608      	mov	r0, r1
 8101192:	bc10      	pop	{r4}
 8101194:	4770      	bx	lr

08101196 <__sfputs_r>:
 8101196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101198:	4606      	mov	r6, r0
 810119a:	460f      	mov	r7, r1
 810119c:	4614      	mov	r4, r2
 810119e:	18d5      	adds	r5, r2, r3
 81011a0:	42ac      	cmp	r4, r5
 81011a2:	d101      	bne.n	81011a8 <__sfputs_r+0x12>
 81011a4:	2000      	movs	r0, #0
 81011a6:	e007      	b.n	81011b8 <__sfputs_r+0x22>
 81011a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81011ac:	463a      	mov	r2, r7
 81011ae:	4630      	mov	r0, r6
 81011b0:	f7ff ffdc 	bl	810116c <__sfputc_r>
 81011b4:	1c43      	adds	r3, r0, #1
 81011b6:	d1f3      	bne.n	81011a0 <__sfputs_r+0xa>
 81011b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081011bc <_vfiprintf_r>:
 81011bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81011c0:	460d      	mov	r5, r1
 81011c2:	b09d      	sub	sp, #116	; 0x74
 81011c4:	4614      	mov	r4, r2
 81011c6:	4698      	mov	r8, r3
 81011c8:	4606      	mov	r6, r0
 81011ca:	b118      	cbz	r0, 81011d4 <_vfiprintf_r+0x18>
 81011cc:	6a03      	ldr	r3, [r0, #32]
 81011ce:	b90b      	cbnz	r3, 81011d4 <_vfiprintf_r+0x18>
 81011d0:	f7ff fdce 	bl	8100d70 <__sinit>
 81011d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81011d6:	07d9      	lsls	r1, r3, #31
 81011d8:	d405      	bmi.n	81011e6 <_vfiprintf_r+0x2a>
 81011da:	89ab      	ldrh	r3, [r5, #12]
 81011dc:	059a      	lsls	r2, r3, #22
 81011de:	d402      	bmi.n	81011e6 <_vfiprintf_r+0x2a>
 81011e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81011e2:	f7ff feca 	bl	8100f7a <__retarget_lock_acquire_recursive>
 81011e6:	89ab      	ldrh	r3, [r5, #12]
 81011e8:	071b      	lsls	r3, r3, #28
 81011ea:	d501      	bpl.n	81011f0 <_vfiprintf_r+0x34>
 81011ec:	692b      	ldr	r3, [r5, #16]
 81011ee:	b99b      	cbnz	r3, 8101218 <_vfiprintf_r+0x5c>
 81011f0:	4629      	mov	r1, r5
 81011f2:	4630      	mov	r0, r6
 81011f4:	f000 fb74 	bl	81018e0 <__swsetup_r>
 81011f8:	b170      	cbz	r0, 8101218 <_vfiprintf_r+0x5c>
 81011fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81011fc:	07dc      	lsls	r4, r3, #31
 81011fe:	d504      	bpl.n	810120a <_vfiprintf_r+0x4e>
 8101200:	f04f 30ff 	mov.w	r0, #4294967295
 8101204:	b01d      	add	sp, #116	; 0x74
 8101206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810120a:	89ab      	ldrh	r3, [r5, #12]
 810120c:	0598      	lsls	r0, r3, #22
 810120e:	d4f7      	bmi.n	8101200 <_vfiprintf_r+0x44>
 8101210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8101212:	f7ff feb3 	bl	8100f7c <__retarget_lock_release_recursive>
 8101216:	e7f3      	b.n	8101200 <_vfiprintf_r+0x44>
 8101218:	2300      	movs	r3, #0
 810121a:	9309      	str	r3, [sp, #36]	; 0x24
 810121c:	2320      	movs	r3, #32
 810121e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8101222:	f8cd 800c 	str.w	r8, [sp, #12]
 8101226:	2330      	movs	r3, #48	; 0x30
 8101228:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 81013dc <_vfiprintf_r+0x220>
 810122c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8101230:	f04f 0901 	mov.w	r9, #1
 8101234:	4623      	mov	r3, r4
 8101236:	469a      	mov	sl, r3
 8101238:	f813 2b01 	ldrb.w	r2, [r3], #1
 810123c:	b10a      	cbz	r2, 8101242 <_vfiprintf_r+0x86>
 810123e:	2a25      	cmp	r2, #37	; 0x25
 8101240:	d1f9      	bne.n	8101236 <_vfiprintf_r+0x7a>
 8101242:	ebba 0b04 	subs.w	fp, sl, r4
 8101246:	d00b      	beq.n	8101260 <_vfiprintf_r+0xa4>
 8101248:	465b      	mov	r3, fp
 810124a:	4622      	mov	r2, r4
 810124c:	4629      	mov	r1, r5
 810124e:	4630      	mov	r0, r6
 8101250:	f7ff ffa1 	bl	8101196 <__sfputs_r>
 8101254:	3001      	adds	r0, #1
 8101256:	f000 80a9 	beq.w	81013ac <_vfiprintf_r+0x1f0>
 810125a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810125c:	445a      	add	r2, fp
 810125e:	9209      	str	r2, [sp, #36]	; 0x24
 8101260:	f89a 3000 	ldrb.w	r3, [sl]
 8101264:	2b00      	cmp	r3, #0
 8101266:	f000 80a1 	beq.w	81013ac <_vfiprintf_r+0x1f0>
 810126a:	2300      	movs	r3, #0
 810126c:	f04f 32ff 	mov.w	r2, #4294967295
 8101270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8101274:	f10a 0a01 	add.w	sl, sl, #1
 8101278:	9304      	str	r3, [sp, #16]
 810127a:	9307      	str	r3, [sp, #28]
 810127c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8101280:	931a      	str	r3, [sp, #104]	; 0x68
 8101282:	4654      	mov	r4, sl
 8101284:	2205      	movs	r2, #5
 8101286:	f814 1b01 	ldrb.w	r1, [r4], #1
 810128a:	4854      	ldr	r0, [pc, #336]	; (81013dc <_vfiprintf_r+0x220>)
 810128c:	f7ff f828 	bl	81002e0 <memchr>
 8101290:	9a04      	ldr	r2, [sp, #16]
 8101292:	b9d8      	cbnz	r0, 81012cc <_vfiprintf_r+0x110>
 8101294:	06d1      	lsls	r1, r2, #27
 8101296:	bf44      	itt	mi
 8101298:	2320      	movmi	r3, #32
 810129a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810129e:	0713      	lsls	r3, r2, #28
 81012a0:	bf44      	itt	mi
 81012a2:	232b      	movmi	r3, #43	; 0x2b
 81012a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81012a8:	f89a 3000 	ldrb.w	r3, [sl]
 81012ac:	2b2a      	cmp	r3, #42	; 0x2a
 81012ae:	d015      	beq.n	81012dc <_vfiprintf_r+0x120>
 81012b0:	9a07      	ldr	r2, [sp, #28]
 81012b2:	4654      	mov	r4, sl
 81012b4:	2000      	movs	r0, #0
 81012b6:	f04f 0c0a 	mov.w	ip, #10
 81012ba:	4621      	mov	r1, r4
 81012bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 81012c0:	3b30      	subs	r3, #48	; 0x30
 81012c2:	2b09      	cmp	r3, #9
 81012c4:	d94d      	bls.n	8101362 <_vfiprintf_r+0x1a6>
 81012c6:	b1b0      	cbz	r0, 81012f6 <_vfiprintf_r+0x13a>
 81012c8:	9207      	str	r2, [sp, #28]
 81012ca:	e014      	b.n	81012f6 <_vfiprintf_r+0x13a>
 81012cc:	eba0 0308 	sub.w	r3, r0, r8
 81012d0:	fa09 f303 	lsl.w	r3, r9, r3
 81012d4:	4313      	orrs	r3, r2
 81012d6:	9304      	str	r3, [sp, #16]
 81012d8:	46a2      	mov	sl, r4
 81012da:	e7d2      	b.n	8101282 <_vfiprintf_r+0xc6>
 81012dc:	9b03      	ldr	r3, [sp, #12]
 81012de:	1d19      	adds	r1, r3, #4
 81012e0:	681b      	ldr	r3, [r3, #0]
 81012e2:	9103      	str	r1, [sp, #12]
 81012e4:	2b00      	cmp	r3, #0
 81012e6:	bfbb      	ittet	lt
 81012e8:	425b      	neglt	r3, r3
 81012ea:	f042 0202 	orrlt.w	r2, r2, #2
 81012ee:	9307      	strge	r3, [sp, #28]
 81012f0:	9307      	strlt	r3, [sp, #28]
 81012f2:	bfb8      	it	lt
 81012f4:	9204      	strlt	r2, [sp, #16]
 81012f6:	7823      	ldrb	r3, [r4, #0]
 81012f8:	2b2e      	cmp	r3, #46	; 0x2e
 81012fa:	d10c      	bne.n	8101316 <_vfiprintf_r+0x15a>
 81012fc:	7863      	ldrb	r3, [r4, #1]
 81012fe:	2b2a      	cmp	r3, #42	; 0x2a
 8101300:	d134      	bne.n	810136c <_vfiprintf_r+0x1b0>
 8101302:	9b03      	ldr	r3, [sp, #12]
 8101304:	1d1a      	adds	r2, r3, #4
 8101306:	681b      	ldr	r3, [r3, #0]
 8101308:	9203      	str	r2, [sp, #12]
 810130a:	2b00      	cmp	r3, #0
 810130c:	bfb8      	it	lt
 810130e:	f04f 33ff 	movlt.w	r3, #4294967295
 8101312:	3402      	adds	r4, #2
 8101314:	9305      	str	r3, [sp, #20]
 8101316:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 81013e0 <_vfiprintf_r+0x224>
 810131a:	7821      	ldrb	r1, [r4, #0]
 810131c:	2203      	movs	r2, #3
 810131e:	4650      	mov	r0, sl
 8101320:	f7fe ffde 	bl	81002e0 <memchr>
 8101324:	b138      	cbz	r0, 8101336 <_vfiprintf_r+0x17a>
 8101326:	9b04      	ldr	r3, [sp, #16]
 8101328:	eba0 000a 	sub.w	r0, r0, sl
 810132c:	2240      	movs	r2, #64	; 0x40
 810132e:	4082      	lsls	r2, r0
 8101330:	4313      	orrs	r3, r2
 8101332:	3401      	adds	r4, #1
 8101334:	9304      	str	r3, [sp, #16]
 8101336:	f814 1b01 	ldrb.w	r1, [r4], #1
 810133a:	482a      	ldr	r0, [pc, #168]	; (81013e4 <_vfiprintf_r+0x228>)
 810133c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8101340:	2206      	movs	r2, #6
 8101342:	f7fe ffcd 	bl	81002e0 <memchr>
 8101346:	2800      	cmp	r0, #0
 8101348:	d03f      	beq.n	81013ca <_vfiprintf_r+0x20e>
 810134a:	4b27      	ldr	r3, [pc, #156]	; (81013e8 <_vfiprintf_r+0x22c>)
 810134c:	bb1b      	cbnz	r3, 8101396 <_vfiprintf_r+0x1da>
 810134e:	9b03      	ldr	r3, [sp, #12]
 8101350:	3307      	adds	r3, #7
 8101352:	f023 0307 	bic.w	r3, r3, #7
 8101356:	3308      	adds	r3, #8
 8101358:	9303      	str	r3, [sp, #12]
 810135a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810135c:	443b      	add	r3, r7
 810135e:	9309      	str	r3, [sp, #36]	; 0x24
 8101360:	e768      	b.n	8101234 <_vfiprintf_r+0x78>
 8101362:	fb0c 3202 	mla	r2, ip, r2, r3
 8101366:	460c      	mov	r4, r1
 8101368:	2001      	movs	r0, #1
 810136a:	e7a6      	b.n	81012ba <_vfiprintf_r+0xfe>
 810136c:	2300      	movs	r3, #0
 810136e:	3401      	adds	r4, #1
 8101370:	9305      	str	r3, [sp, #20]
 8101372:	4619      	mov	r1, r3
 8101374:	f04f 0c0a 	mov.w	ip, #10
 8101378:	4620      	mov	r0, r4
 810137a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810137e:	3a30      	subs	r2, #48	; 0x30
 8101380:	2a09      	cmp	r2, #9
 8101382:	d903      	bls.n	810138c <_vfiprintf_r+0x1d0>
 8101384:	2b00      	cmp	r3, #0
 8101386:	d0c6      	beq.n	8101316 <_vfiprintf_r+0x15a>
 8101388:	9105      	str	r1, [sp, #20]
 810138a:	e7c4      	b.n	8101316 <_vfiprintf_r+0x15a>
 810138c:	fb0c 2101 	mla	r1, ip, r1, r2
 8101390:	4604      	mov	r4, r0
 8101392:	2301      	movs	r3, #1
 8101394:	e7f0      	b.n	8101378 <_vfiprintf_r+0x1bc>
 8101396:	ab03      	add	r3, sp, #12
 8101398:	9300      	str	r3, [sp, #0]
 810139a:	462a      	mov	r2, r5
 810139c:	4b13      	ldr	r3, [pc, #76]	; (81013ec <_vfiprintf_r+0x230>)
 810139e:	a904      	add	r1, sp, #16
 81013a0:	4630      	mov	r0, r6
 81013a2:	f3af 8000 	nop.w
 81013a6:	4607      	mov	r7, r0
 81013a8:	1c78      	adds	r0, r7, #1
 81013aa:	d1d6      	bne.n	810135a <_vfiprintf_r+0x19e>
 81013ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81013ae:	07d9      	lsls	r1, r3, #31
 81013b0:	d405      	bmi.n	81013be <_vfiprintf_r+0x202>
 81013b2:	89ab      	ldrh	r3, [r5, #12]
 81013b4:	059a      	lsls	r2, r3, #22
 81013b6:	d402      	bmi.n	81013be <_vfiprintf_r+0x202>
 81013b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81013ba:	f7ff fddf 	bl	8100f7c <__retarget_lock_release_recursive>
 81013be:	89ab      	ldrh	r3, [r5, #12]
 81013c0:	065b      	lsls	r3, r3, #25
 81013c2:	f53f af1d 	bmi.w	8101200 <_vfiprintf_r+0x44>
 81013c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 81013c8:	e71c      	b.n	8101204 <_vfiprintf_r+0x48>
 81013ca:	ab03      	add	r3, sp, #12
 81013cc:	9300      	str	r3, [sp, #0]
 81013ce:	462a      	mov	r2, r5
 81013d0:	4b06      	ldr	r3, [pc, #24]	; (81013ec <_vfiprintf_r+0x230>)
 81013d2:	a904      	add	r1, sp, #16
 81013d4:	4630      	mov	r0, r6
 81013d6:	f000 f879 	bl	81014cc <_printf_i>
 81013da:	e7e4      	b.n	81013a6 <_vfiprintf_r+0x1ea>
 81013dc:	08101ae6 	.word	0x08101ae6
 81013e0:	08101aec 	.word	0x08101aec
 81013e4:	08101af0 	.word	0x08101af0
 81013e8:	00000000 	.word	0x00000000
 81013ec:	08101197 	.word	0x08101197

081013f0 <_printf_common>:
 81013f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81013f4:	4616      	mov	r6, r2
 81013f6:	4699      	mov	r9, r3
 81013f8:	688a      	ldr	r2, [r1, #8]
 81013fa:	690b      	ldr	r3, [r1, #16]
 81013fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8101400:	4293      	cmp	r3, r2
 8101402:	bfb8      	it	lt
 8101404:	4613      	movlt	r3, r2
 8101406:	6033      	str	r3, [r6, #0]
 8101408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810140c:	4607      	mov	r7, r0
 810140e:	460c      	mov	r4, r1
 8101410:	b10a      	cbz	r2, 8101416 <_printf_common+0x26>
 8101412:	3301      	adds	r3, #1
 8101414:	6033      	str	r3, [r6, #0]
 8101416:	6823      	ldr	r3, [r4, #0]
 8101418:	0699      	lsls	r1, r3, #26
 810141a:	bf42      	ittt	mi
 810141c:	6833      	ldrmi	r3, [r6, #0]
 810141e:	3302      	addmi	r3, #2
 8101420:	6033      	strmi	r3, [r6, #0]
 8101422:	6825      	ldr	r5, [r4, #0]
 8101424:	f015 0506 	ands.w	r5, r5, #6
 8101428:	d106      	bne.n	8101438 <_printf_common+0x48>
 810142a:	f104 0a19 	add.w	sl, r4, #25
 810142e:	68e3      	ldr	r3, [r4, #12]
 8101430:	6832      	ldr	r2, [r6, #0]
 8101432:	1a9b      	subs	r3, r3, r2
 8101434:	42ab      	cmp	r3, r5
 8101436:	dc26      	bgt.n	8101486 <_printf_common+0x96>
 8101438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810143c:	1e13      	subs	r3, r2, #0
 810143e:	6822      	ldr	r2, [r4, #0]
 8101440:	bf18      	it	ne
 8101442:	2301      	movne	r3, #1
 8101444:	0692      	lsls	r2, r2, #26
 8101446:	d42b      	bmi.n	81014a0 <_printf_common+0xb0>
 8101448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810144c:	4649      	mov	r1, r9
 810144e:	4638      	mov	r0, r7
 8101450:	47c0      	blx	r8
 8101452:	3001      	adds	r0, #1
 8101454:	d01e      	beq.n	8101494 <_printf_common+0xa4>
 8101456:	6823      	ldr	r3, [r4, #0]
 8101458:	6922      	ldr	r2, [r4, #16]
 810145a:	f003 0306 	and.w	r3, r3, #6
 810145e:	2b04      	cmp	r3, #4
 8101460:	bf02      	ittt	eq
 8101462:	68e5      	ldreq	r5, [r4, #12]
 8101464:	6833      	ldreq	r3, [r6, #0]
 8101466:	1aed      	subeq	r5, r5, r3
 8101468:	68a3      	ldr	r3, [r4, #8]
 810146a:	bf0c      	ite	eq
 810146c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8101470:	2500      	movne	r5, #0
 8101472:	4293      	cmp	r3, r2
 8101474:	bfc4      	itt	gt
 8101476:	1a9b      	subgt	r3, r3, r2
 8101478:	18ed      	addgt	r5, r5, r3
 810147a:	2600      	movs	r6, #0
 810147c:	341a      	adds	r4, #26
 810147e:	42b5      	cmp	r5, r6
 8101480:	d11a      	bne.n	81014b8 <_printf_common+0xc8>
 8101482:	2000      	movs	r0, #0
 8101484:	e008      	b.n	8101498 <_printf_common+0xa8>
 8101486:	2301      	movs	r3, #1
 8101488:	4652      	mov	r2, sl
 810148a:	4649      	mov	r1, r9
 810148c:	4638      	mov	r0, r7
 810148e:	47c0      	blx	r8
 8101490:	3001      	adds	r0, #1
 8101492:	d103      	bne.n	810149c <_printf_common+0xac>
 8101494:	f04f 30ff 	mov.w	r0, #4294967295
 8101498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810149c:	3501      	adds	r5, #1
 810149e:	e7c6      	b.n	810142e <_printf_common+0x3e>
 81014a0:	18e1      	adds	r1, r4, r3
 81014a2:	1c5a      	adds	r2, r3, #1
 81014a4:	2030      	movs	r0, #48	; 0x30
 81014a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81014aa:	4422      	add	r2, r4
 81014ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81014b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81014b4:	3302      	adds	r3, #2
 81014b6:	e7c7      	b.n	8101448 <_printf_common+0x58>
 81014b8:	2301      	movs	r3, #1
 81014ba:	4622      	mov	r2, r4
 81014bc:	4649      	mov	r1, r9
 81014be:	4638      	mov	r0, r7
 81014c0:	47c0      	blx	r8
 81014c2:	3001      	adds	r0, #1
 81014c4:	d0e6      	beq.n	8101494 <_printf_common+0xa4>
 81014c6:	3601      	adds	r6, #1
 81014c8:	e7d9      	b.n	810147e <_printf_common+0x8e>
	...

081014cc <_printf_i>:
 81014cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81014d0:	7e0f      	ldrb	r7, [r1, #24]
 81014d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81014d4:	2f78      	cmp	r7, #120	; 0x78
 81014d6:	4691      	mov	r9, r2
 81014d8:	4680      	mov	r8, r0
 81014da:	460c      	mov	r4, r1
 81014dc:	469a      	mov	sl, r3
 81014de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 81014e2:	d807      	bhi.n	81014f4 <_printf_i+0x28>
 81014e4:	2f62      	cmp	r7, #98	; 0x62
 81014e6:	d80a      	bhi.n	81014fe <_printf_i+0x32>
 81014e8:	2f00      	cmp	r7, #0
 81014ea:	f000 80d4 	beq.w	8101696 <_printf_i+0x1ca>
 81014ee:	2f58      	cmp	r7, #88	; 0x58
 81014f0:	f000 80c0 	beq.w	8101674 <_printf_i+0x1a8>
 81014f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81014f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81014fc:	e03a      	b.n	8101574 <_printf_i+0xa8>
 81014fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8101502:	2b15      	cmp	r3, #21
 8101504:	d8f6      	bhi.n	81014f4 <_printf_i+0x28>
 8101506:	a101      	add	r1, pc, #4	; (adr r1, 810150c <_printf_i+0x40>)
 8101508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810150c:	08101565 	.word	0x08101565
 8101510:	08101579 	.word	0x08101579
 8101514:	081014f5 	.word	0x081014f5
 8101518:	081014f5 	.word	0x081014f5
 810151c:	081014f5 	.word	0x081014f5
 8101520:	081014f5 	.word	0x081014f5
 8101524:	08101579 	.word	0x08101579
 8101528:	081014f5 	.word	0x081014f5
 810152c:	081014f5 	.word	0x081014f5
 8101530:	081014f5 	.word	0x081014f5
 8101534:	081014f5 	.word	0x081014f5
 8101538:	0810167d 	.word	0x0810167d
 810153c:	081015a5 	.word	0x081015a5
 8101540:	08101637 	.word	0x08101637
 8101544:	081014f5 	.word	0x081014f5
 8101548:	081014f5 	.word	0x081014f5
 810154c:	0810169f 	.word	0x0810169f
 8101550:	081014f5 	.word	0x081014f5
 8101554:	081015a5 	.word	0x081015a5
 8101558:	081014f5 	.word	0x081014f5
 810155c:	081014f5 	.word	0x081014f5
 8101560:	0810163f 	.word	0x0810163f
 8101564:	682b      	ldr	r3, [r5, #0]
 8101566:	1d1a      	adds	r2, r3, #4
 8101568:	681b      	ldr	r3, [r3, #0]
 810156a:	602a      	str	r2, [r5, #0]
 810156c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8101570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8101574:	2301      	movs	r3, #1
 8101576:	e09f      	b.n	81016b8 <_printf_i+0x1ec>
 8101578:	6820      	ldr	r0, [r4, #0]
 810157a:	682b      	ldr	r3, [r5, #0]
 810157c:	0607      	lsls	r7, r0, #24
 810157e:	f103 0104 	add.w	r1, r3, #4
 8101582:	6029      	str	r1, [r5, #0]
 8101584:	d501      	bpl.n	810158a <_printf_i+0xbe>
 8101586:	681e      	ldr	r6, [r3, #0]
 8101588:	e003      	b.n	8101592 <_printf_i+0xc6>
 810158a:	0646      	lsls	r6, r0, #25
 810158c:	d5fb      	bpl.n	8101586 <_printf_i+0xba>
 810158e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8101592:	2e00      	cmp	r6, #0
 8101594:	da03      	bge.n	810159e <_printf_i+0xd2>
 8101596:	232d      	movs	r3, #45	; 0x2d
 8101598:	4276      	negs	r6, r6
 810159a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810159e:	485a      	ldr	r0, [pc, #360]	; (8101708 <_printf_i+0x23c>)
 81015a0:	230a      	movs	r3, #10
 81015a2:	e012      	b.n	81015ca <_printf_i+0xfe>
 81015a4:	682b      	ldr	r3, [r5, #0]
 81015a6:	6820      	ldr	r0, [r4, #0]
 81015a8:	1d19      	adds	r1, r3, #4
 81015aa:	6029      	str	r1, [r5, #0]
 81015ac:	0605      	lsls	r5, r0, #24
 81015ae:	d501      	bpl.n	81015b4 <_printf_i+0xe8>
 81015b0:	681e      	ldr	r6, [r3, #0]
 81015b2:	e002      	b.n	81015ba <_printf_i+0xee>
 81015b4:	0641      	lsls	r1, r0, #25
 81015b6:	d5fb      	bpl.n	81015b0 <_printf_i+0xe4>
 81015b8:	881e      	ldrh	r6, [r3, #0]
 81015ba:	4853      	ldr	r0, [pc, #332]	; (8101708 <_printf_i+0x23c>)
 81015bc:	2f6f      	cmp	r7, #111	; 0x6f
 81015be:	bf0c      	ite	eq
 81015c0:	2308      	moveq	r3, #8
 81015c2:	230a      	movne	r3, #10
 81015c4:	2100      	movs	r1, #0
 81015c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81015ca:	6865      	ldr	r5, [r4, #4]
 81015cc:	60a5      	str	r5, [r4, #8]
 81015ce:	2d00      	cmp	r5, #0
 81015d0:	bfa2      	ittt	ge
 81015d2:	6821      	ldrge	r1, [r4, #0]
 81015d4:	f021 0104 	bicge.w	r1, r1, #4
 81015d8:	6021      	strge	r1, [r4, #0]
 81015da:	b90e      	cbnz	r6, 81015e0 <_printf_i+0x114>
 81015dc:	2d00      	cmp	r5, #0
 81015de:	d04b      	beq.n	8101678 <_printf_i+0x1ac>
 81015e0:	4615      	mov	r5, r2
 81015e2:	fbb6 f1f3 	udiv	r1, r6, r3
 81015e6:	fb03 6711 	mls	r7, r3, r1, r6
 81015ea:	5dc7      	ldrb	r7, [r0, r7]
 81015ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 81015f0:	4637      	mov	r7, r6
 81015f2:	42bb      	cmp	r3, r7
 81015f4:	460e      	mov	r6, r1
 81015f6:	d9f4      	bls.n	81015e2 <_printf_i+0x116>
 81015f8:	2b08      	cmp	r3, #8
 81015fa:	d10b      	bne.n	8101614 <_printf_i+0x148>
 81015fc:	6823      	ldr	r3, [r4, #0]
 81015fe:	07de      	lsls	r6, r3, #31
 8101600:	d508      	bpl.n	8101614 <_printf_i+0x148>
 8101602:	6923      	ldr	r3, [r4, #16]
 8101604:	6861      	ldr	r1, [r4, #4]
 8101606:	4299      	cmp	r1, r3
 8101608:	bfde      	ittt	le
 810160a:	2330      	movle	r3, #48	; 0x30
 810160c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8101610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8101614:	1b52      	subs	r2, r2, r5
 8101616:	6122      	str	r2, [r4, #16]
 8101618:	f8cd a000 	str.w	sl, [sp]
 810161c:	464b      	mov	r3, r9
 810161e:	aa03      	add	r2, sp, #12
 8101620:	4621      	mov	r1, r4
 8101622:	4640      	mov	r0, r8
 8101624:	f7ff fee4 	bl	81013f0 <_printf_common>
 8101628:	3001      	adds	r0, #1
 810162a:	d14a      	bne.n	81016c2 <_printf_i+0x1f6>
 810162c:	f04f 30ff 	mov.w	r0, #4294967295
 8101630:	b004      	add	sp, #16
 8101632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101636:	6823      	ldr	r3, [r4, #0]
 8101638:	f043 0320 	orr.w	r3, r3, #32
 810163c:	6023      	str	r3, [r4, #0]
 810163e:	4833      	ldr	r0, [pc, #204]	; (810170c <_printf_i+0x240>)
 8101640:	2778      	movs	r7, #120	; 0x78
 8101642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8101646:	6823      	ldr	r3, [r4, #0]
 8101648:	6829      	ldr	r1, [r5, #0]
 810164a:	061f      	lsls	r7, r3, #24
 810164c:	f851 6b04 	ldr.w	r6, [r1], #4
 8101650:	d402      	bmi.n	8101658 <_printf_i+0x18c>
 8101652:	065f      	lsls	r7, r3, #25
 8101654:	bf48      	it	mi
 8101656:	b2b6      	uxthmi	r6, r6
 8101658:	07df      	lsls	r7, r3, #31
 810165a:	bf48      	it	mi
 810165c:	f043 0320 	orrmi.w	r3, r3, #32
 8101660:	6029      	str	r1, [r5, #0]
 8101662:	bf48      	it	mi
 8101664:	6023      	strmi	r3, [r4, #0]
 8101666:	b91e      	cbnz	r6, 8101670 <_printf_i+0x1a4>
 8101668:	6823      	ldr	r3, [r4, #0]
 810166a:	f023 0320 	bic.w	r3, r3, #32
 810166e:	6023      	str	r3, [r4, #0]
 8101670:	2310      	movs	r3, #16
 8101672:	e7a7      	b.n	81015c4 <_printf_i+0xf8>
 8101674:	4824      	ldr	r0, [pc, #144]	; (8101708 <_printf_i+0x23c>)
 8101676:	e7e4      	b.n	8101642 <_printf_i+0x176>
 8101678:	4615      	mov	r5, r2
 810167a:	e7bd      	b.n	81015f8 <_printf_i+0x12c>
 810167c:	682b      	ldr	r3, [r5, #0]
 810167e:	6826      	ldr	r6, [r4, #0]
 8101680:	6961      	ldr	r1, [r4, #20]
 8101682:	1d18      	adds	r0, r3, #4
 8101684:	6028      	str	r0, [r5, #0]
 8101686:	0635      	lsls	r5, r6, #24
 8101688:	681b      	ldr	r3, [r3, #0]
 810168a:	d501      	bpl.n	8101690 <_printf_i+0x1c4>
 810168c:	6019      	str	r1, [r3, #0]
 810168e:	e002      	b.n	8101696 <_printf_i+0x1ca>
 8101690:	0670      	lsls	r0, r6, #25
 8101692:	d5fb      	bpl.n	810168c <_printf_i+0x1c0>
 8101694:	8019      	strh	r1, [r3, #0]
 8101696:	2300      	movs	r3, #0
 8101698:	6123      	str	r3, [r4, #16]
 810169a:	4615      	mov	r5, r2
 810169c:	e7bc      	b.n	8101618 <_printf_i+0x14c>
 810169e:	682b      	ldr	r3, [r5, #0]
 81016a0:	1d1a      	adds	r2, r3, #4
 81016a2:	602a      	str	r2, [r5, #0]
 81016a4:	681d      	ldr	r5, [r3, #0]
 81016a6:	6862      	ldr	r2, [r4, #4]
 81016a8:	2100      	movs	r1, #0
 81016aa:	4628      	mov	r0, r5
 81016ac:	f7fe fe18 	bl	81002e0 <memchr>
 81016b0:	b108      	cbz	r0, 81016b6 <_printf_i+0x1ea>
 81016b2:	1b40      	subs	r0, r0, r5
 81016b4:	6060      	str	r0, [r4, #4]
 81016b6:	6863      	ldr	r3, [r4, #4]
 81016b8:	6123      	str	r3, [r4, #16]
 81016ba:	2300      	movs	r3, #0
 81016bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81016c0:	e7aa      	b.n	8101618 <_printf_i+0x14c>
 81016c2:	6923      	ldr	r3, [r4, #16]
 81016c4:	462a      	mov	r2, r5
 81016c6:	4649      	mov	r1, r9
 81016c8:	4640      	mov	r0, r8
 81016ca:	47d0      	blx	sl
 81016cc:	3001      	adds	r0, #1
 81016ce:	d0ad      	beq.n	810162c <_printf_i+0x160>
 81016d0:	6823      	ldr	r3, [r4, #0]
 81016d2:	079b      	lsls	r3, r3, #30
 81016d4:	d413      	bmi.n	81016fe <_printf_i+0x232>
 81016d6:	68e0      	ldr	r0, [r4, #12]
 81016d8:	9b03      	ldr	r3, [sp, #12]
 81016da:	4298      	cmp	r0, r3
 81016dc:	bfb8      	it	lt
 81016de:	4618      	movlt	r0, r3
 81016e0:	e7a6      	b.n	8101630 <_printf_i+0x164>
 81016e2:	2301      	movs	r3, #1
 81016e4:	4632      	mov	r2, r6
 81016e6:	4649      	mov	r1, r9
 81016e8:	4640      	mov	r0, r8
 81016ea:	47d0      	blx	sl
 81016ec:	3001      	adds	r0, #1
 81016ee:	d09d      	beq.n	810162c <_printf_i+0x160>
 81016f0:	3501      	adds	r5, #1
 81016f2:	68e3      	ldr	r3, [r4, #12]
 81016f4:	9903      	ldr	r1, [sp, #12]
 81016f6:	1a5b      	subs	r3, r3, r1
 81016f8:	42ab      	cmp	r3, r5
 81016fa:	dcf2      	bgt.n	81016e2 <_printf_i+0x216>
 81016fc:	e7eb      	b.n	81016d6 <_printf_i+0x20a>
 81016fe:	2500      	movs	r5, #0
 8101700:	f104 0619 	add.w	r6, r4, #25
 8101704:	e7f5      	b.n	81016f2 <_printf_i+0x226>
 8101706:	bf00      	nop
 8101708:	08101af7 	.word	0x08101af7
 810170c:	08101b08 	.word	0x08101b08

08101710 <__sflush_r>:
 8101710:	898a      	ldrh	r2, [r1, #12]
 8101712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101714:	4605      	mov	r5, r0
 8101716:	0710      	lsls	r0, r2, #28
 8101718:	460c      	mov	r4, r1
 810171a:	d457      	bmi.n	81017cc <__sflush_r+0xbc>
 810171c:	684b      	ldr	r3, [r1, #4]
 810171e:	2b00      	cmp	r3, #0
 8101720:	dc04      	bgt.n	810172c <__sflush_r+0x1c>
 8101722:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8101724:	2b00      	cmp	r3, #0
 8101726:	dc01      	bgt.n	810172c <__sflush_r+0x1c>
 8101728:	2000      	movs	r0, #0
 810172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810172c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810172e:	2e00      	cmp	r6, #0
 8101730:	d0fa      	beq.n	8101728 <__sflush_r+0x18>
 8101732:	2300      	movs	r3, #0
 8101734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8101738:	682f      	ldr	r7, [r5, #0]
 810173a:	6a21      	ldr	r1, [r4, #32]
 810173c:	602b      	str	r3, [r5, #0]
 810173e:	d032      	beq.n	81017a6 <__sflush_r+0x96>
 8101740:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8101742:	89a3      	ldrh	r3, [r4, #12]
 8101744:	075a      	lsls	r2, r3, #29
 8101746:	d505      	bpl.n	8101754 <__sflush_r+0x44>
 8101748:	6863      	ldr	r3, [r4, #4]
 810174a:	1ac0      	subs	r0, r0, r3
 810174c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810174e:	b10b      	cbz	r3, 8101754 <__sflush_r+0x44>
 8101750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8101752:	1ac0      	subs	r0, r0, r3
 8101754:	2300      	movs	r3, #0
 8101756:	4602      	mov	r2, r0
 8101758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810175a:	6a21      	ldr	r1, [r4, #32]
 810175c:	4628      	mov	r0, r5
 810175e:	47b0      	blx	r6
 8101760:	1c43      	adds	r3, r0, #1
 8101762:	89a3      	ldrh	r3, [r4, #12]
 8101764:	d106      	bne.n	8101774 <__sflush_r+0x64>
 8101766:	6829      	ldr	r1, [r5, #0]
 8101768:	291d      	cmp	r1, #29
 810176a:	d82b      	bhi.n	81017c4 <__sflush_r+0xb4>
 810176c:	4a28      	ldr	r2, [pc, #160]	; (8101810 <__sflush_r+0x100>)
 810176e:	410a      	asrs	r2, r1
 8101770:	07d6      	lsls	r6, r2, #31
 8101772:	d427      	bmi.n	81017c4 <__sflush_r+0xb4>
 8101774:	2200      	movs	r2, #0
 8101776:	6062      	str	r2, [r4, #4]
 8101778:	04d9      	lsls	r1, r3, #19
 810177a:	6922      	ldr	r2, [r4, #16]
 810177c:	6022      	str	r2, [r4, #0]
 810177e:	d504      	bpl.n	810178a <__sflush_r+0x7a>
 8101780:	1c42      	adds	r2, r0, #1
 8101782:	d101      	bne.n	8101788 <__sflush_r+0x78>
 8101784:	682b      	ldr	r3, [r5, #0]
 8101786:	b903      	cbnz	r3, 810178a <__sflush_r+0x7a>
 8101788:	6560      	str	r0, [r4, #84]	; 0x54
 810178a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810178c:	602f      	str	r7, [r5, #0]
 810178e:	2900      	cmp	r1, #0
 8101790:	d0ca      	beq.n	8101728 <__sflush_r+0x18>
 8101792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8101796:	4299      	cmp	r1, r3
 8101798:	d002      	beq.n	81017a0 <__sflush_r+0x90>
 810179a:	4628      	mov	r0, r5
 810179c:	f7ff fbf0 	bl	8100f80 <_free_r>
 81017a0:	2000      	movs	r0, #0
 81017a2:	6360      	str	r0, [r4, #52]	; 0x34
 81017a4:	e7c1      	b.n	810172a <__sflush_r+0x1a>
 81017a6:	2301      	movs	r3, #1
 81017a8:	4628      	mov	r0, r5
 81017aa:	47b0      	blx	r6
 81017ac:	1c41      	adds	r1, r0, #1
 81017ae:	d1c8      	bne.n	8101742 <__sflush_r+0x32>
 81017b0:	682b      	ldr	r3, [r5, #0]
 81017b2:	2b00      	cmp	r3, #0
 81017b4:	d0c5      	beq.n	8101742 <__sflush_r+0x32>
 81017b6:	2b1d      	cmp	r3, #29
 81017b8:	d001      	beq.n	81017be <__sflush_r+0xae>
 81017ba:	2b16      	cmp	r3, #22
 81017bc:	d101      	bne.n	81017c2 <__sflush_r+0xb2>
 81017be:	602f      	str	r7, [r5, #0]
 81017c0:	e7b2      	b.n	8101728 <__sflush_r+0x18>
 81017c2:	89a3      	ldrh	r3, [r4, #12]
 81017c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81017c8:	81a3      	strh	r3, [r4, #12]
 81017ca:	e7ae      	b.n	810172a <__sflush_r+0x1a>
 81017cc:	690f      	ldr	r7, [r1, #16]
 81017ce:	2f00      	cmp	r7, #0
 81017d0:	d0aa      	beq.n	8101728 <__sflush_r+0x18>
 81017d2:	0793      	lsls	r3, r2, #30
 81017d4:	680e      	ldr	r6, [r1, #0]
 81017d6:	bf08      	it	eq
 81017d8:	694b      	ldreq	r3, [r1, #20]
 81017da:	600f      	str	r7, [r1, #0]
 81017dc:	bf18      	it	ne
 81017de:	2300      	movne	r3, #0
 81017e0:	1bf6      	subs	r6, r6, r7
 81017e2:	608b      	str	r3, [r1, #8]
 81017e4:	2e00      	cmp	r6, #0
 81017e6:	dd9f      	ble.n	8101728 <__sflush_r+0x18>
 81017e8:	6a21      	ldr	r1, [r4, #32]
 81017ea:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 81017ee:	4633      	mov	r3, r6
 81017f0:	463a      	mov	r2, r7
 81017f2:	4628      	mov	r0, r5
 81017f4:	47e0      	blx	ip
 81017f6:	2800      	cmp	r0, #0
 81017f8:	dc06      	bgt.n	8101808 <__sflush_r+0xf8>
 81017fa:	89a3      	ldrh	r3, [r4, #12]
 81017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101800:	81a3      	strh	r3, [r4, #12]
 8101802:	f04f 30ff 	mov.w	r0, #4294967295
 8101806:	e790      	b.n	810172a <__sflush_r+0x1a>
 8101808:	4407      	add	r7, r0
 810180a:	1a36      	subs	r6, r6, r0
 810180c:	e7ea      	b.n	81017e4 <__sflush_r+0xd4>
 810180e:	bf00      	nop
 8101810:	dfbffffe 	.word	0xdfbffffe

08101814 <_fflush_r>:
 8101814:	b538      	push	{r3, r4, r5, lr}
 8101816:	690b      	ldr	r3, [r1, #16]
 8101818:	4605      	mov	r5, r0
 810181a:	460c      	mov	r4, r1
 810181c:	b913      	cbnz	r3, 8101824 <_fflush_r+0x10>
 810181e:	2500      	movs	r5, #0
 8101820:	4628      	mov	r0, r5
 8101822:	bd38      	pop	{r3, r4, r5, pc}
 8101824:	b118      	cbz	r0, 810182e <_fflush_r+0x1a>
 8101826:	6a03      	ldr	r3, [r0, #32]
 8101828:	b90b      	cbnz	r3, 810182e <_fflush_r+0x1a>
 810182a:	f7ff faa1 	bl	8100d70 <__sinit>
 810182e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8101832:	2b00      	cmp	r3, #0
 8101834:	d0f3      	beq.n	810181e <_fflush_r+0xa>
 8101836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8101838:	07d0      	lsls	r0, r2, #31
 810183a:	d404      	bmi.n	8101846 <_fflush_r+0x32>
 810183c:	0599      	lsls	r1, r3, #22
 810183e:	d402      	bmi.n	8101846 <_fflush_r+0x32>
 8101840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8101842:	f7ff fb9a 	bl	8100f7a <__retarget_lock_acquire_recursive>
 8101846:	4628      	mov	r0, r5
 8101848:	4621      	mov	r1, r4
 810184a:	f7ff ff61 	bl	8101710 <__sflush_r>
 810184e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8101850:	07da      	lsls	r2, r3, #31
 8101852:	4605      	mov	r5, r0
 8101854:	d4e4      	bmi.n	8101820 <_fflush_r+0xc>
 8101856:	89a3      	ldrh	r3, [r4, #12]
 8101858:	059b      	lsls	r3, r3, #22
 810185a:	d4e1      	bmi.n	8101820 <_fflush_r+0xc>
 810185c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810185e:	f7ff fb8d 	bl	8100f7c <__retarget_lock_release_recursive>
 8101862:	e7dd      	b.n	8101820 <_fflush_r+0xc>

08101864 <__swbuf_r>:
 8101864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101866:	460e      	mov	r6, r1
 8101868:	4614      	mov	r4, r2
 810186a:	4605      	mov	r5, r0
 810186c:	b118      	cbz	r0, 8101876 <__swbuf_r+0x12>
 810186e:	6a03      	ldr	r3, [r0, #32]
 8101870:	b90b      	cbnz	r3, 8101876 <__swbuf_r+0x12>
 8101872:	f7ff fa7d 	bl	8100d70 <__sinit>
 8101876:	69a3      	ldr	r3, [r4, #24]
 8101878:	60a3      	str	r3, [r4, #8]
 810187a:	89a3      	ldrh	r3, [r4, #12]
 810187c:	071a      	lsls	r2, r3, #28
 810187e:	d525      	bpl.n	81018cc <__swbuf_r+0x68>
 8101880:	6923      	ldr	r3, [r4, #16]
 8101882:	b31b      	cbz	r3, 81018cc <__swbuf_r+0x68>
 8101884:	6823      	ldr	r3, [r4, #0]
 8101886:	6922      	ldr	r2, [r4, #16]
 8101888:	1a98      	subs	r0, r3, r2
 810188a:	6963      	ldr	r3, [r4, #20]
 810188c:	b2f6      	uxtb	r6, r6
 810188e:	4283      	cmp	r3, r0
 8101890:	4637      	mov	r7, r6
 8101892:	dc04      	bgt.n	810189e <__swbuf_r+0x3a>
 8101894:	4621      	mov	r1, r4
 8101896:	4628      	mov	r0, r5
 8101898:	f7ff ffbc 	bl	8101814 <_fflush_r>
 810189c:	b9e0      	cbnz	r0, 81018d8 <__swbuf_r+0x74>
 810189e:	68a3      	ldr	r3, [r4, #8]
 81018a0:	3b01      	subs	r3, #1
 81018a2:	60a3      	str	r3, [r4, #8]
 81018a4:	6823      	ldr	r3, [r4, #0]
 81018a6:	1c5a      	adds	r2, r3, #1
 81018a8:	6022      	str	r2, [r4, #0]
 81018aa:	701e      	strb	r6, [r3, #0]
 81018ac:	6962      	ldr	r2, [r4, #20]
 81018ae:	1c43      	adds	r3, r0, #1
 81018b0:	429a      	cmp	r2, r3
 81018b2:	d004      	beq.n	81018be <__swbuf_r+0x5a>
 81018b4:	89a3      	ldrh	r3, [r4, #12]
 81018b6:	07db      	lsls	r3, r3, #31
 81018b8:	d506      	bpl.n	81018c8 <__swbuf_r+0x64>
 81018ba:	2e0a      	cmp	r6, #10
 81018bc:	d104      	bne.n	81018c8 <__swbuf_r+0x64>
 81018be:	4621      	mov	r1, r4
 81018c0:	4628      	mov	r0, r5
 81018c2:	f7ff ffa7 	bl	8101814 <_fflush_r>
 81018c6:	b938      	cbnz	r0, 81018d8 <__swbuf_r+0x74>
 81018c8:	4638      	mov	r0, r7
 81018ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81018cc:	4621      	mov	r1, r4
 81018ce:	4628      	mov	r0, r5
 81018d0:	f000 f806 	bl	81018e0 <__swsetup_r>
 81018d4:	2800      	cmp	r0, #0
 81018d6:	d0d5      	beq.n	8101884 <__swbuf_r+0x20>
 81018d8:	f04f 37ff 	mov.w	r7, #4294967295
 81018dc:	e7f4      	b.n	81018c8 <__swbuf_r+0x64>
	...

081018e0 <__swsetup_r>:
 81018e0:	b538      	push	{r3, r4, r5, lr}
 81018e2:	4b2a      	ldr	r3, [pc, #168]	; (810198c <__swsetup_r+0xac>)
 81018e4:	4605      	mov	r5, r0
 81018e6:	6818      	ldr	r0, [r3, #0]
 81018e8:	460c      	mov	r4, r1
 81018ea:	b118      	cbz	r0, 81018f4 <__swsetup_r+0x14>
 81018ec:	6a03      	ldr	r3, [r0, #32]
 81018ee:	b90b      	cbnz	r3, 81018f4 <__swsetup_r+0x14>
 81018f0:	f7ff fa3e 	bl	8100d70 <__sinit>
 81018f4:	89a3      	ldrh	r3, [r4, #12]
 81018f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81018fa:	0718      	lsls	r0, r3, #28
 81018fc:	d422      	bmi.n	8101944 <__swsetup_r+0x64>
 81018fe:	06d9      	lsls	r1, r3, #27
 8101900:	d407      	bmi.n	8101912 <__swsetup_r+0x32>
 8101902:	2309      	movs	r3, #9
 8101904:	602b      	str	r3, [r5, #0]
 8101906:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810190a:	81a3      	strh	r3, [r4, #12]
 810190c:	f04f 30ff 	mov.w	r0, #4294967295
 8101910:	e034      	b.n	810197c <__swsetup_r+0x9c>
 8101912:	0758      	lsls	r0, r3, #29
 8101914:	d512      	bpl.n	810193c <__swsetup_r+0x5c>
 8101916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8101918:	b141      	cbz	r1, 810192c <__swsetup_r+0x4c>
 810191a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810191e:	4299      	cmp	r1, r3
 8101920:	d002      	beq.n	8101928 <__swsetup_r+0x48>
 8101922:	4628      	mov	r0, r5
 8101924:	f7ff fb2c 	bl	8100f80 <_free_r>
 8101928:	2300      	movs	r3, #0
 810192a:	6363      	str	r3, [r4, #52]	; 0x34
 810192c:	89a3      	ldrh	r3, [r4, #12]
 810192e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8101932:	81a3      	strh	r3, [r4, #12]
 8101934:	2300      	movs	r3, #0
 8101936:	6063      	str	r3, [r4, #4]
 8101938:	6923      	ldr	r3, [r4, #16]
 810193a:	6023      	str	r3, [r4, #0]
 810193c:	89a3      	ldrh	r3, [r4, #12]
 810193e:	f043 0308 	orr.w	r3, r3, #8
 8101942:	81a3      	strh	r3, [r4, #12]
 8101944:	6923      	ldr	r3, [r4, #16]
 8101946:	b94b      	cbnz	r3, 810195c <__swsetup_r+0x7c>
 8101948:	89a3      	ldrh	r3, [r4, #12]
 810194a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810194e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8101952:	d003      	beq.n	810195c <__swsetup_r+0x7c>
 8101954:	4621      	mov	r1, r4
 8101956:	4628      	mov	r0, r5
 8101958:	f000 f850 	bl	81019fc <__smakebuf_r>
 810195c:	89a0      	ldrh	r0, [r4, #12]
 810195e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8101962:	f010 0301 	ands.w	r3, r0, #1
 8101966:	d00a      	beq.n	810197e <__swsetup_r+0x9e>
 8101968:	2300      	movs	r3, #0
 810196a:	60a3      	str	r3, [r4, #8]
 810196c:	6963      	ldr	r3, [r4, #20]
 810196e:	425b      	negs	r3, r3
 8101970:	61a3      	str	r3, [r4, #24]
 8101972:	6923      	ldr	r3, [r4, #16]
 8101974:	b943      	cbnz	r3, 8101988 <__swsetup_r+0xa8>
 8101976:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810197a:	d1c4      	bne.n	8101906 <__swsetup_r+0x26>
 810197c:	bd38      	pop	{r3, r4, r5, pc}
 810197e:	0781      	lsls	r1, r0, #30
 8101980:	bf58      	it	pl
 8101982:	6963      	ldrpl	r3, [r4, #20]
 8101984:	60a3      	str	r3, [r4, #8]
 8101986:	e7f4      	b.n	8101972 <__swsetup_r+0x92>
 8101988:	2000      	movs	r0, #0
 810198a:	e7f7      	b.n	810197c <__swsetup_r+0x9c>
 810198c:	1000005c 	.word	0x1000005c

08101990 <_sbrk_r>:
 8101990:	b538      	push	{r3, r4, r5, lr}
 8101992:	4d06      	ldr	r5, [pc, #24]	; (81019ac <_sbrk_r+0x1c>)
 8101994:	2300      	movs	r3, #0
 8101996:	4604      	mov	r4, r0
 8101998:	4608      	mov	r0, r1
 810199a:	602b      	str	r3, [r5, #0]
 810199c:	f7fe ffe2 	bl	8100964 <_sbrk>
 81019a0:	1c43      	adds	r3, r0, #1
 81019a2:	d102      	bne.n	81019aa <_sbrk_r+0x1a>
 81019a4:	682b      	ldr	r3, [r5, #0]
 81019a6:	b103      	cbz	r3, 81019aa <_sbrk_r+0x1a>
 81019a8:	6023      	str	r3, [r4, #0]
 81019aa:	bd38      	pop	{r3, r4, r5, pc}
 81019ac:	100040b0 	.word	0x100040b0

081019b0 <__swhatbuf_r>:
 81019b0:	b570      	push	{r4, r5, r6, lr}
 81019b2:	460c      	mov	r4, r1
 81019b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81019b8:	2900      	cmp	r1, #0
 81019ba:	b096      	sub	sp, #88	; 0x58
 81019bc:	4615      	mov	r5, r2
 81019be:	461e      	mov	r6, r3
 81019c0:	da0d      	bge.n	81019de <__swhatbuf_r+0x2e>
 81019c2:	89a3      	ldrh	r3, [r4, #12]
 81019c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 81019c8:	f04f 0100 	mov.w	r1, #0
 81019cc:	bf0c      	ite	eq
 81019ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 81019d2:	2340      	movne	r3, #64	; 0x40
 81019d4:	2000      	movs	r0, #0
 81019d6:	6031      	str	r1, [r6, #0]
 81019d8:	602b      	str	r3, [r5, #0]
 81019da:	b016      	add	sp, #88	; 0x58
 81019dc:	bd70      	pop	{r4, r5, r6, pc}
 81019de:	466a      	mov	r2, sp
 81019e0:	f000 f848 	bl	8101a74 <_fstat_r>
 81019e4:	2800      	cmp	r0, #0
 81019e6:	dbec      	blt.n	81019c2 <__swhatbuf_r+0x12>
 81019e8:	9901      	ldr	r1, [sp, #4]
 81019ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 81019ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 81019f2:	4259      	negs	r1, r3
 81019f4:	4159      	adcs	r1, r3
 81019f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81019fa:	e7eb      	b.n	81019d4 <__swhatbuf_r+0x24>

081019fc <__smakebuf_r>:
 81019fc:	898b      	ldrh	r3, [r1, #12]
 81019fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8101a00:	079d      	lsls	r5, r3, #30
 8101a02:	4606      	mov	r6, r0
 8101a04:	460c      	mov	r4, r1
 8101a06:	d507      	bpl.n	8101a18 <__smakebuf_r+0x1c>
 8101a08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8101a0c:	6023      	str	r3, [r4, #0]
 8101a0e:	6123      	str	r3, [r4, #16]
 8101a10:	2301      	movs	r3, #1
 8101a12:	6163      	str	r3, [r4, #20]
 8101a14:	b002      	add	sp, #8
 8101a16:	bd70      	pop	{r4, r5, r6, pc}
 8101a18:	ab01      	add	r3, sp, #4
 8101a1a:	466a      	mov	r2, sp
 8101a1c:	f7ff ffc8 	bl	81019b0 <__swhatbuf_r>
 8101a20:	9900      	ldr	r1, [sp, #0]
 8101a22:	4605      	mov	r5, r0
 8101a24:	4630      	mov	r0, r6
 8101a26:	f7ff fb15 	bl	8101054 <_malloc_r>
 8101a2a:	b948      	cbnz	r0, 8101a40 <__smakebuf_r+0x44>
 8101a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8101a30:	059a      	lsls	r2, r3, #22
 8101a32:	d4ef      	bmi.n	8101a14 <__smakebuf_r+0x18>
 8101a34:	f023 0303 	bic.w	r3, r3, #3
 8101a38:	f043 0302 	orr.w	r3, r3, #2
 8101a3c:	81a3      	strh	r3, [r4, #12]
 8101a3e:	e7e3      	b.n	8101a08 <__smakebuf_r+0xc>
 8101a40:	89a3      	ldrh	r3, [r4, #12]
 8101a42:	6020      	str	r0, [r4, #0]
 8101a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101a48:	81a3      	strh	r3, [r4, #12]
 8101a4a:	9b00      	ldr	r3, [sp, #0]
 8101a4c:	6163      	str	r3, [r4, #20]
 8101a4e:	9b01      	ldr	r3, [sp, #4]
 8101a50:	6120      	str	r0, [r4, #16]
 8101a52:	b15b      	cbz	r3, 8101a6c <__smakebuf_r+0x70>
 8101a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8101a58:	4630      	mov	r0, r6
 8101a5a:	f000 f81d 	bl	8101a98 <_isatty_r>
 8101a5e:	b128      	cbz	r0, 8101a6c <__smakebuf_r+0x70>
 8101a60:	89a3      	ldrh	r3, [r4, #12]
 8101a62:	f023 0303 	bic.w	r3, r3, #3
 8101a66:	f043 0301 	orr.w	r3, r3, #1
 8101a6a:	81a3      	strh	r3, [r4, #12]
 8101a6c:	89a3      	ldrh	r3, [r4, #12]
 8101a6e:	431d      	orrs	r5, r3
 8101a70:	81a5      	strh	r5, [r4, #12]
 8101a72:	e7cf      	b.n	8101a14 <__smakebuf_r+0x18>

08101a74 <_fstat_r>:
 8101a74:	b538      	push	{r3, r4, r5, lr}
 8101a76:	4d07      	ldr	r5, [pc, #28]	; (8101a94 <_fstat_r+0x20>)
 8101a78:	2300      	movs	r3, #0
 8101a7a:	4604      	mov	r4, r0
 8101a7c:	4608      	mov	r0, r1
 8101a7e:	4611      	mov	r1, r2
 8101a80:	602b      	str	r3, [r5, #0]
 8101a82:	f7fe ff4a 	bl	810091a <_fstat>
 8101a86:	1c43      	adds	r3, r0, #1
 8101a88:	d102      	bne.n	8101a90 <_fstat_r+0x1c>
 8101a8a:	682b      	ldr	r3, [r5, #0]
 8101a8c:	b103      	cbz	r3, 8101a90 <_fstat_r+0x1c>
 8101a8e:	6023      	str	r3, [r4, #0]
 8101a90:	bd38      	pop	{r3, r4, r5, pc}
 8101a92:	bf00      	nop
 8101a94:	100040b0 	.word	0x100040b0

08101a98 <_isatty_r>:
 8101a98:	b538      	push	{r3, r4, r5, lr}
 8101a9a:	4d06      	ldr	r5, [pc, #24]	; (8101ab4 <_isatty_r+0x1c>)
 8101a9c:	2300      	movs	r3, #0
 8101a9e:	4604      	mov	r4, r0
 8101aa0:	4608      	mov	r0, r1
 8101aa2:	602b      	str	r3, [r5, #0]
 8101aa4:	f7fe ff48 	bl	8100938 <_isatty>
 8101aa8:	1c43      	adds	r3, r0, #1
 8101aaa:	d102      	bne.n	8101ab2 <_isatty_r+0x1a>
 8101aac:	682b      	ldr	r3, [r5, #0]
 8101aae:	b103      	cbz	r3, 8101ab2 <_isatty_r+0x1a>
 8101ab0:	6023      	str	r3, [r4, #0]
 8101ab2:	bd38      	pop	{r3, r4, r5, pc}
 8101ab4:	100040b0 	.word	0x100040b0

08101ab8 <_init>:
 8101ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101aba:	bf00      	nop
 8101abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101abe:	bc08      	pop	{r3}
 8101ac0:	469e      	mov	lr, r3
 8101ac2:	4770      	bx	lr

08101ac4 <_fini>:
 8101ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101ac6:	bf00      	nop
 8101ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101aca:	bc08      	pop	{r3}
 8101acc:	469e      	mov	lr, r3
 8101ace:	4770      	bx	lr
