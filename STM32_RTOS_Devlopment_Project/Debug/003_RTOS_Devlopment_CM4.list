
003_RTOS_Devlopment_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017b0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08101a50  08101a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101abc  08101abc  00011abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101ac0  08101ac0  00011ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000005c  10000000  08101ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000146c  1000005c  08101b20  0002005c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100014c8  08101b20  000214c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002732  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000851  00000000  00000000  000227fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000248  00000000  00000000  00023050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000195  00000000  00000000  00023298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030a76  00000000  00000000  0002342d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00002bc5  00000000  00000000  00053ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010e31c  00000000  00000000  00056a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000ee0  00000000  00000000  00164d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000070  00000000  00000000  00165c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000005c 	.word	0x1000005c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08101a38 	.word	0x08101a38

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000060 	.word	0x10000060
 81002dc:	08101a38 	.word	0x08101a38

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <led_init>:
#include "led.h"

#define GPIOIEN				   	(1U<<8)
#define LEDA_PIN				(1U<<12)
void led_init(void){
 8100380:	b480      	push	{r7}
 8100382:	af00      	add	r7, sp, #0
	//Enable LED PI12 Clock
	RCC->AHB4ENR |= GPIOIEN;
 8100384:	4b0b      	ldr	r3, [pc, #44]	; (81003b4 <led_init+0x34>)
 8100386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810038a:	4a0a      	ldr	r2, [pc, #40]	; (81003b4 <led_init+0x34>)
 810038c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	//Set the pin mode as output
	GPIOI->MODER |= (1U<<24);
 8100394:	4b08      	ldr	r3, [pc, #32]	; (81003b8 <led_init+0x38>)
 8100396:	681b      	ldr	r3, [r3, #0]
 8100398:	4a07      	ldr	r2, [pc, #28]	; (81003b8 <led_init+0x38>)
 810039a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810039e:	6013      	str	r3, [r2, #0]
	GPIOI->MODER &= ~(1U<<25);
 81003a0:	4b05      	ldr	r3, [pc, #20]	; (81003b8 <led_init+0x38>)
 81003a2:	681b      	ldr	r3, [r3, #0]
 81003a4:	4a04      	ldr	r2, [pc, #16]	; (81003b8 <led_init+0x38>)
 81003a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 81003aa:	6013      	str	r3, [r2, #0]
}
 81003ac:	bf00      	nop
 81003ae:	46bd      	mov	sp, r7
 81003b0:	bc80      	pop	{r7}
 81003b2:	4770      	bx	lr
 81003b4:	58024400 	.word	0x58024400
 81003b8:	58022000 	.word	0x58022000

081003bc <park_mode>:
		delay(4);
	}
	return 0;
}*/

void park_mode(){
 81003bc:	b580      	push	{r7, lr}
 81003be:	af00      	add	r7, sp, #0
	printf("Park Mode\n\r");
 81003c0:	4802      	ldr	r0, [pc, #8]	; (81003cc <park_mode+0x10>)
 81003c2:	f000 fccb 	bl	8100d5c <iprintf>
}
 81003c6:	bf00      	nop
 81003c8:	bd80      	pop	{r7, pc}
 81003ca:	bf00      	nop
 81003cc:	08101a50 	.word	0x08101a50

081003d0 <drive_mode>:
	printf("Reverse Mode\n\r");
}
void neutral_mode(){
	printf("Neutral Mode\n\r");
}
void drive_mode(){
 81003d0:	b580      	push	{r7, lr}
 81003d2:	af00      	add	r7, sp, #0
	printf("Drive Mode\n\r");
 81003d4:	4802      	ldr	r0, [pc, #8]	; (81003e0 <drive_mode+0x10>)
 81003d6:	f000 fcc1 	bl	8100d5c <iprintf>
}
 81003da:	bf00      	nop
 81003dc:	bd80      	pop	{r7, pc}
 81003de:	bf00      	nop
 81003e0:	08101a7c 	.word	0x08101a7c

081003e4 <task3>:

void task3(){
 81003e4:	b480      	push	{r7}
 81003e6:	af00      	add	r7, sp, #0
	cntTask3++;
 81003e8:	4b04      	ldr	r3, [pc, #16]	; (81003fc <task3+0x18>)
 81003ea:	681b      	ldr	r3, [r3, #0]
 81003ec:	3301      	adds	r3, #1
 81003ee:	4a03      	ldr	r2, [pc, #12]	; (81003fc <task3+0x18>)
 81003f0:	6013      	str	r3, [r2, #0]
	//drive_mode();
	//rtosThreadYield();
}
 81003f2:	bf00      	nop
 81003f4:	46bd      	mov	sp, r7
 81003f6:	bc80      	pop	{r7}
 81003f8:	4770      	bx	lr
 81003fa:	bf00      	nop
 81003fc:	10000084 	.word	0x10000084

08100400 <task0>:

void task0(){
 8100400:	b580      	push	{r7, lr}
 8100402:	af00      	add	r7, sp, #0
	while(1){
		cntTask0++;
 8100404:	4b06      	ldr	r3, [pc, #24]	; (8100420 <task0+0x20>)
 8100406:	681b      	ldr	r3, [r3, #0]
 8100408:	3301      	adds	r3, #1
 810040a:	4a05      	ldr	r2, [pc, #20]	; (8100420 <task0+0x20>)
 810040c:	6013      	str	r3, [r2, #0]
		rtosSemaphoreCntTake(&semaphore1);
 810040e:	4805      	ldr	r0, [pc, #20]	; (8100424 <task0+0x24>)
 8100410:	f000 fa83 	bl	810091a <rtosSemaphoreCntTake>
		drive_mode();
 8100414:	f7ff ffdc 	bl	81003d0 <drive_mode>
		rtosSemaphoreCntGive(&semaphore1);
 8100418:	4802      	ldr	r0, [pc, #8]	; (8100424 <task0+0x24>)
 810041a:	f000 fa6c 	bl	81008f6 <rtosSemaphoreCntGive>
		cntTask0++;
 810041e:	e7f1      	b.n	8100404 <task0+0x4>
 8100420:	10000078 	.word	0x10000078
 8100424:	1000008c 	.word	0x1000008c

08100428 <task1>:
		//rtosThreadYield();
	}
}

void task1(){
 8100428:	b480      	push	{r7}
 810042a:	af00      	add	r7, sp, #0
	while(1){
		cntTask1++;
 810042c:	4b02      	ldr	r3, [pc, #8]	; (8100438 <task1+0x10>)
 810042e:	681b      	ldr	r3, [r3, #0]
 8100430:	3301      	adds	r3, #1
 8100432:	4a01      	ldr	r2, [pc, #4]	; (8100438 <task1+0x10>)
 8100434:	6013      	str	r3, [r2, #0]
 8100436:	e7f9      	b.n	810042c <task1+0x4>
 8100438:	1000007c 	.word	0x1000007c

0810043c <task2>:
		//rtosThreadYield();
	}
}

void task2(){
 810043c:	b580      	push	{r7, lr}
 810043e:	af00      	add	r7, sp, #0
	while(1){
		cntTask2++;
 8100440:	4b06      	ldr	r3, [pc, #24]	; (810045c <task2+0x20>)
 8100442:	681b      	ldr	r3, [r3, #0]
 8100444:	3301      	adds	r3, #1
 8100446:	4a05      	ldr	r2, [pc, #20]	; (810045c <task2+0x20>)
 8100448:	6013      	str	r3, [r2, #0]
		//rtosThreadYield();
		rtosSemaphoreCntTake(&semaphore1);
 810044a:	4805      	ldr	r0, [pc, #20]	; (8100460 <task2+0x24>)
 810044c:	f000 fa65 	bl	810091a <rtosSemaphoreCntTake>
		park_mode();
 8100450:	f7ff ffb4 	bl	81003bc <park_mode>
		rtosSemaphoreCntGive(&semaphore1);
 8100454:	4802      	ldr	r0, [pc, #8]	; (8100460 <task2+0x24>)
 8100456:	f000 fa4e 	bl	81008f6 <rtosSemaphoreCntGive>
		cntTask2++;
 810045a:	e7f1      	b.n	8100440 <task2+0x4>
 810045c:	10000080 	.word	0x10000080
 8100460:	1000008c 	.word	0x1000008c

08100464 <main>:
		//rtosThreadYield();
	}
}

int main(void)
{
 8100464:	b580      	push	{r7, lr}
 8100466:	af00      	add	r7, sp, #0
	led_init();
 8100468:	f7ff ff8a 	bl	8100380 <led_init>
	uart_tx_init();
 810046c:	f000 fb1c 	bl	8100aa8 <uart_tx_init>
	tim2_1hz_interrupt_init();
 8100470:	f000 fa0c 	bl	810088c <tim2_1hz_interrupt_init>
//		delay(4);
//		led_off();
//		printf("Hi from M4\n\r");
//		delay(4);
//	}
	rtosSempahoreInit(&semaphore1, 1);
 8100474:	2101      	movs	r1, #1
 8100476:	4809      	ldr	r0, [pc, #36]	; (810049c <main+0x38>)
 8100478:	f000 fa30 	bl	81008dc <rtosSempahoreInit>
	rtosSempahoreInit(&semaphore2, 0);
 810047c:	2100      	movs	r1, #0
 810047e:	4808      	ldr	r0, [pc, #32]	; (81004a0 <main+0x3c>)
 8100480:	f000 fa2c 	bl	81008dc <rtosSempahoreInit>
	rtosKernelInit();
 8100484:	f000 f97a 	bl	810077c <rtosKernelInit>
	rtosKernelAddThread(&task0, &task1, &task2);
 8100488:	4a06      	ldr	r2, [pc, #24]	; (81004a4 <main+0x40>)
 810048a:	4907      	ldr	r1, [pc, #28]	; (81004a8 <main+0x44>)
 810048c:	4807      	ldr	r0, [pc, #28]	; (81004ac <main+0x48>)
 810048e:	f000 f939 	bl	8100704 <rtosKernelAddThread>
	rtosKernelLaunch(ROUND_ROBIN_PERIOD);
 8100492:	2001      	movs	r0, #1
 8100494:	f000 f97e 	bl	8100794 <rtosKernelLaunch>
	while(1){
 8100498:	e7fe      	b.n	8100498 <main+0x34>
 810049a:	bf00      	nop
 810049c:	1000008c 	.word	0x1000008c
 81004a0:	10000090 	.word	0x10000090
 81004a4:	0810043d 	.word	0x0810043d
 81004a8:	08100429 	.word	0x08100429
 81004ac:	08100401 	.word	0x08100401

081004b0 <TIM2_IRQHandler>:

	}
}

void TIM2_IRQHandler(){
 81004b0:	b480      	push	{r7}
 81004b2:	af00      	add	r7, sp, #0
	//Clear the interrupt flag
	TIM2->SR &= ~SR_UIF;
 81004b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81004b8:	691b      	ldr	r3, [r3, #16]
 81004ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81004be:	f023 0301 	bic.w	r3, r3, #1
 81004c2:	6113      	str	r3, [r2, #16]
	cntTask4++;
 81004c4:	4b04      	ldr	r3, [pc, #16]	; (81004d8 <TIM2_IRQHandler+0x28>)
 81004c6:	681b      	ldr	r3, [r3, #0]
 81004c8:	3301      	adds	r3, #1
 81004ca:	4a03      	ldr	r2, [pc, #12]	; (81004d8 <TIM2_IRQHandler+0x28>)
 81004cc:	6013      	str	r3, [r2, #0]
}
 81004ce:	bf00      	nop
 81004d0:	46bd      	mov	sp, r7
 81004d2:	bc80      	pop	{r7}
 81004d4:	4770      	bx	lr
 81004d6:	bf00      	nop
 81004d8:	10000088 	.word	0x10000088

081004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81004dc:	b480      	push	{r7}
 81004de:	b083      	sub	sp, #12
 81004e0:	af00      	add	r7, sp, #0
 81004e2:	4603      	mov	r3, r0
 81004e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81004e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81004ea:	2b00      	cmp	r3, #0
 81004ec:	db0b      	blt.n	8100506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81004ee:	88fb      	ldrh	r3, [r7, #6]
 81004f0:	f003 021f 	and.w	r2, r3, #31
 81004f4:	4906      	ldr	r1, [pc, #24]	; (8100510 <__NVIC_EnableIRQ+0x34>)
 81004f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81004fa:	095b      	lsrs	r3, r3, #5
 81004fc:	2001      	movs	r0, #1
 81004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8100502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100506:	bf00      	nop
 8100508:	370c      	adds	r7, #12
 810050a:	46bd      	mov	sp, r7
 810050c:	bc80      	pop	{r7}
 810050e:	4770      	bx	lr
 8100510:	e000e100 	.word	0xe000e100

08100514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100514:	b480      	push	{r7}
 8100516:	b083      	sub	sp, #12
 8100518:	af00      	add	r7, sp, #0
 810051a:	4603      	mov	r3, r0
 810051c:	6039      	str	r1, [r7, #0]
 810051e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100524:	2b00      	cmp	r3, #0
 8100526:	db0a      	blt.n	810053e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100528:	683b      	ldr	r3, [r7, #0]
 810052a:	b2da      	uxtb	r2, r3
 810052c:	490c      	ldr	r1, [pc, #48]	; (8100560 <__NVIC_SetPriority+0x4c>)
 810052e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100532:	0112      	lsls	r2, r2, #4
 8100534:	b2d2      	uxtb	r2, r2
 8100536:	440b      	add	r3, r1
 8100538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810053c:	e00a      	b.n	8100554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810053e:	683b      	ldr	r3, [r7, #0]
 8100540:	b2da      	uxtb	r2, r3
 8100542:	4908      	ldr	r1, [pc, #32]	; (8100564 <__NVIC_SetPriority+0x50>)
 8100544:	88fb      	ldrh	r3, [r7, #6]
 8100546:	f003 030f 	and.w	r3, r3, #15
 810054a:	3b04      	subs	r3, #4
 810054c:	0112      	lsls	r2, r2, #4
 810054e:	b2d2      	uxtb	r2, r2
 8100550:	440b      	add	r3, r1
 8100552:	761a      	strb	r2, [r3, #24]
}
 8100554:	bf00      	nop
 8100556:	370c      	adds	r7, #12
 8100558:	46bd      	mov	sp, r7
 810055a:	bc80      	pop	{r7}
 810055c:	4770      	bx	lr
 810055e:	bf00      	nop
 8100560:	e000e100 	.word	0xe000e100
 8100564:	e000ed00 	.word	0xe000ed00

08100568 <rtosKernelThreadStackInit>:
int32_t threadStack[NUM_OF_THREADS][STACK_SIZE];

void rtosSchedulerLaunch();
void rtosSchedulerSwitch();

void rtosKernelThreadStackInit(int idx){
 8100568:	b480      	push	{r7}
 810056a:	b083      	sub	sp, #12
 810056c:	af00      	add	r7, sp, #0
 810056e:	6078      	str	r0, [r7, #4]
	//Defining the current stack pointer for the particular thread
	tcbArr[idx].ptrStack = &threadStack[idx][STACK_SIZE-16]; //Minus 16 as 16 register are saved in the stack placing the head of the stack at size - 16
 8100570:	687b      	ldr	r3, [r7, #4]
 8100572:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8100576:	fb02 f303 	mul.w	r3, r2, r3
 810057a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 810057e:	4a5f      	ldr	r2, [pc, #380]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 8100580:	441a      	add	r2, r3
 8100582:	495f      	ldr	r1, [pc, #380]	; (8100700 <rtosKernelThreadStackInit+0x198>)
 8100584:	687b      	ldr	r3, [r7, #4]
 8100586:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	threadStack[idx][STACK_SIZE-1] = (1U<<24); //Program status register value remains at the tail of the stack. Setting 21 bit of PSR to 1 to enable thumb mode
 810058a:	4a5c      	ldr	r2, [pc, #368]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 810058c:	687b      	ldr	r3, [r7, #4]
 810058e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100592:	fb01 f303 	mul.w	r3, r1, r3
 8100596:	4413      	add	r3, r2
 8100598:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 810059c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81005a0:	601a      	str	r2, [r3, #0]

	//Defining other optional registers
	//First all the registers required to save the context
	threadStack[idx][STACK_SIZE-3] = 0xBBBBBBBB; //R14(LR)
 81005a2:	4a56      	ldr	r2, [pc, #344]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 81005a4:	687b      	ldr	r3, [r7, #4]
 81005a6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005aa:	fb01 f303 	mul.w	r3, r1, r3
 81005ae:	4413      	add	r3, r2
 81005b0:	f203 6334 	addw	r3, r3, #1588	; 0x634
 81005b4:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005b8:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-4] = 0xBBBBBBBB; //R12
 81005ba:	4a50      	ldr	r2, [pc, #320]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 81005bc:	687b      	ldr	r3, [r7, #4]
 81005be:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005c2:	fb01 f303 	mul.w	r3, r1, r3
 81005c6:	4413      	add	r3, r2
 81005c8:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 81005cc:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005d0:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-5] = 0xBBBBBBBB; //R3
 81005d2:	4a4a      	ldr	r2, [pc, #296]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 81005d4:	687b      	ldr	r3, [r7, #4]
 81005d6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005da:	fb01 f303 	mul.w	r3, r1, r3
 81005de:	4413      	add	r3, r2
 81005e0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 81005e4:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81005e8:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-6] = 0xBBBBBBBB; //R2
 81005ea:	4a44      	ldr	r2, [pc, #272]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 81005ec:	687b      	ldr	r3, [r7, #4]
 81005ee:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81005f2:	fb01 f303 	mul.w	r3, r1, r3
 81005f6:	4413      	add	r3, r2
 81005f8:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 81005fc:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100600:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-7] = 0xBBBBBBBB; //R1
 8100602:	4a3e      	ldr	r2, [pc, #248]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 8100604:	687b      	ldr	r3, [r7, #4]
 8100606:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810060a:	fb01 f303 	mul.w	r3, r1, r3
 810060e:	4413      	add	r3, r2
 8100610:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8100614:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100618:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-8] = 0xBBBBBBBB; //R0
 810061a:	4a38      	ldr	r2, [pc, #224]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 810061c:	687b      	ldr	r3, [r7, #4]
 810061e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100622:	fb01 f303 	mul.w	r3, r1, r3
 8100626:	4413      	add	r3, r2
 8100628:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 810062c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100630:	601a      	str	r2, [r3, #0]
	//Other core registers in Arm Cortex M4
	threadStack[idx][STACK_SIZE-9] = 0xBBBBBBBB; //R11
 8100632:	4a32      	ldr	r2, [pc, #200]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 8100634:	687b      	ldr	r3, [r7, #4]
 8100636:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810063a:	fb01 f303 	mul.w	r3, r1, r3
 810063e:	4413      	add	r3, r2
 8100640:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8100644:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100648:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-10] = 0xBBBBBBBB;//R10
 810064a:	4a2c      	ldr	r2, [pc, #176]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 810064c:	687b      	ldr	r3, [r7, #4]
 810064e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100652:	fb01 f303 	mul.w	r3, r1, r3
 8100656:	4413      	add	r3, r2
 8100658:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 810065c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100660:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-11] = 0xBBBBBBBB;//R9
 8100662:	4a26      	ldr	r2, [pc, #152]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 8100664:	687b      	ldr	r3, [r7, #4]
 8100666:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810066a:	fb01 f303 	mul.w	r3, r1, r3
 810066e:	4413      	add	r3, r2
 8100670:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8100674:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100678:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-12] = 0xBBBBBBBB;//R8
 810067a:	4a20      	ldr	r2, [pc, #128]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 810067c:	687b      	ldr	r3, [r7, #4]
 810067e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8100682:	fb01 f303 	mul.w	r3, r1, r3
 8100686:	4413      	add	r3, r2
 8100688:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 810068c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8100690:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-13] = 0xBBBBBBBB;//R7
 8100692:	4a1a      	ldr	r2, [pc, #104]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 8100694:	687b      	ldr	r3, [r7, #4]
 8100696:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 810069a:	fb01 f303 	mul.w	r3, r1, r3
 810069e:	4413      	add	r3, r2
 81006a0:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 81006a4:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81006a8:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-14] = 0xBBBBBBBB;//R6
 81006aa:	4a14      	ldr	r2, [pc, #80]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 81006ac:	687b      	ldr	r3, [r7, #4]
 81006ae:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81006b2:	fb01 f303 	mul.w	r3, r1, r3
 81006b6:	4413      	add	r3, r2
 81006b8:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 81006bc:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81006c0:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-15] = 0xBBBBBBBB;//R5
 81006c2:	4a0e      	ldr	r2, [pc, #56]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 81006c4:	687b      	ldr	r3, [r7, #4]
 81006c6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81006ca:	fb01 f303 	mul.w	r3, r1, r3
 81006ce:	4413      	add	r3, r2
 81006d0:	f203 6304 	addw	r3, r3, #1540	; 0x604
 81006d4:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81006d8:	601a      	str	r2, [r3, #0]
	threadStack[idx][STACK_SIZE-16] = 0xBBBBBBBB;//R4
 81006da:	4a08      	ldr	r2, [pc, #32]	; (81006fc <rtosKernelThreadStackInit+0x194>)
 81006dc:	687b      	ldr	r3, [r7, #4]
 81006de:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 81006e2:	fb01 f303 	mul.w	r3, r1, r3
 81006e6:	4413      	add	r3, r2
 81006e8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 81006ec:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 81006f0:	601a      	str	r2, [r3, #0]
}
 81006f2:	bf00      	nop
 81006f4:	370c      	adds	r7, #12
 81006f6:	46bd      	mov	sp, r7
 81006f8:	bc80      	pop	{r7}
 81006fa:	4770      	bx	lr
 81006fc:	100000b8 	.word	0x100000b8
 8100700:	1000009c 	.word	0x1000009c

08100704 <rtosKernelAddThread>:

uint8_t rtosKernelAddThread(void(*thread0)(void), void(*thread1)(void), void(*thread2)(void)){
 8100704:	b580      	push	{r7, lr}
 8100706:	b084      	sub	sp, #16
 8100708:	af00      	add	r7, sp, #0
 810070a:	60f8      	str	r0, [r7, #12]
 810070c:	60b9      	str	r1, [r7, #8]
 810070e:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100710:	b672      	cpsid	i
}
 8100712:	bf00      	nop
	__disable_irq(); //Disabling global interrupts
	tcbArr[0].nextThread = &tcbArr[1];
 8100714:	4b14      	ldr	r3, [pc, #80]	; (8100768 <rtosKernelAddThread+0x64>)
 8100716:	4a15      	ldr	r2, [pc, #84]	; (810076c <rtosKernelAddThread+0x68>)
 8100718:	605a      	str	r2, [r3, #4]
	tcbArr[1].nextThread = &tcbArr[2];
 810071a:	4b13      	ldr	r3, [pc, #76]	; (8100768 <rtosKernelAddThread+0x64>)
 810071c:	4a14      	ldr	r2, [pc, #80]	; (8100770 <rtosKernelAddThread+0x6c>)
 810071e:	60da      	str	r2, [r3, #12]
	tcbArr[2].nextThread = &tcbArr[0];
 8100720:	4b11      	ldr	r3, [pc, #68]	; (8100768 <rtosKernelAddThread+0x64>)
 8100722:	4a11      	ldr	r2, [pc, #68]	; (8100768 <rtosKernelAddThread+0x64>)
 8100724:	615a      	str	r2, [r3, #20]

	ptrCurrTCB = &tcbArr[0];
 8100726:	4b13      	ldr	r3, [pc, #76]	; (8100774 <rtosKernelAddThread+0x70>)
 8100728:	4a0f      	ldr	r2, [pc, #60]	; (8100768 <rtosKernelAddThread+0x64>)
 810072a:	601a      	str	r2, [r3, #0]

	rtosKernelThreadStackInit(0);
 810072c:	2000      	movs	r0, #0
 810072e:	f7ff ff1b 	bl	8100568 <rtosKernelThreadStackInit>
	threadStack[0][STACK_SIZE-2] = (uint32_t)(thread0); //Setting the program counter to function pointer
 8100732:	68fb      	ldr	r3, [r7, #12]
 8100734:	4a10      	ldr	r2, [pc, #64]	; (8100778 <rtosKernelAddThread+0x74>)
 8100736:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638

	rtosKernelThreadStackInit(1);
 810073a:	2001      	movs	r0, #1
 810073c:	f7ff ff14 	bl	8100568 <rtosKernelThreadStackInit>
	threadStack[1][STACK_SIZE-2] = (uint32_t)(thread1); //Setting the program counter to function pointer
 8100740:	68bb      	ldr	r3, [r7, #8]
 8100742:	4a0d      	ldr	r2, [pc, #52]	; (8100778 <rtosKernelAddThread+0x74>)
 8100744:	f8c2 3c78 	str.w	r3, [r2, #3192]	; 0xc78

	rtosKernelThreadStackInit(2);
 8100748:	2002      	movs	r0, #2
 810074a:	f7ff ff0d 	bl	8100568 <rtosKernelThreadStackInit>
	threadStack[2][STACK_SIZE-2] = (uint32_t)(thread2); //Setting the program counter to function pointer
 810074e:	687b      	ldr	r3, [r7, #4]
 8100750:	4a09      	ldr	r2, [pc, #36]	; (8100778 <rtosKernelAddThread+0x74>)
 8100752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8100756:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8
  __ASM volatile ("cpsie i" : : : "memory");
 810075a:	b662      	cpsie	i
}
 810075c:	bf00      	nop

	__enable_irq();
	return 1;
 810075e:	2301      	movs	r3, #1
}
 8100760:	4618      	mov	r0, r3
 8100762:	3710      	adds	r7, #16
 8100764:	46bd      	mov	sp, r7
 8100766:	bd80      	pop	{r7, pc}
 8100768:	1000009c 	.word	0x1000009c
 810076c:	100000a4 	.word	0x100000a4
 8100770:	100000ac 	.word	0x100000ac
 8100774:	100000b4 	.word	0x100000b4
 8100778:	100000b8 	.word	0x100000b8

0810077c <rtosKernelInit>:

void rtosKernelInit(){
 810077c:	b480      	push	{r7}
 810077e:	af00      	add	r7, sp, #0
	Millsec_Clock_Cyc = (SYS_CLOCK/1000); //Note: 64000000 cycles/sec so 64000 cycles in one ms
 8100780:	4b03      	ldr	r3, [pc, #12]	; (8100790 <rtosKernelInit+0x14>)
 8100782:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8100786:	601a      	str	r2, [r3, #0]
}
 8100788:	bf00      	nop
 810078a:	46bd      	mov	sp, r7
 810078c:	bc80      	pop	{r7}
 810078e:	4770      	bx	lr
 8100790:	10000094 	.word	0x10000094

08100794 <rtosKernelLaunch>:

void rtosKernelLaunch(uint32_t cycleQuanta){
 8100794:	b580      	push	{r7, lr}
 8100796:	b082      	sub	sp, #8
 8100798:	af00      	add	r7, sp, #0
 810079a:	6078      	str	r0, [r7, #4]
	//Reset SysTick
	SysTick->CTRL = SYSTICK_RST;
 810079c:	4b13      	ldr	r3, [pc, #76]	; (81007ec <rtosKernelLaunch+0x58>)
 810079e:	2200      	movs	r2, #0
 81007a0:	601a      	str	r2, [r3, #0]

	//Clear SysTick current value register
	SysTick->VAL = 0;
 81007a2:	4b12      	ldr	r3, [pc, #72]	; (81007ec <rtosKernelLaunch+0x58>)
 81007a4:	2200      	movs	r2, #0
 81007a6:	609a      	str	r2, [r3, #8]

	//Reload the timer with number of clock cycles to count to zero
	SysTick->LOAD = (cycleQuanta * Millsec_Clock_Cyc) - 1;
 81007a8:	4b11      	ldr	r3, [pc, #68]	; (81007f0 <rtosKernelLaunch+0x5c>)
 81007aa:	681b      	ldr	r3, [r3, #0]
 81007ac:	687a      	ldr	r2, [r7, #4]
 81007ae:	fb02 f303 	mul.w	r3, r2, r3
 81007b2:	4a0e      	ldr	r2, [pc, #56]	; (81007ec <rtosKernelLaunch+0x58>)
 81007b4:	3b01      	subs	r3, #1
 81007b6:	6053      	str	r3, [r2, #4]

	//Setting the priority of systick less than all the other hardware interrupts
	NVIC_SetPriority(SysTick_IRQn, 15);
 81007b8:	210f      	movs	r1, #15
 81007ba:	f04f 30ff 	mov.w	r0, #4294967295
 81007be:	f7ff fea9 	bl	8100514 <__NVIC_SetPriority>

	//Select internal clock as source
	SysTick->CTRL = CTRL_CLKSRC;
 81007c2:	4b0a      	ldr	r3, [pc, #40]	; (81007ec <rtosKernelLaunch+0x58>)
 81007c4:	2204      	movs	r2, #4
 81007c6:	601a      	str	r2, [r3, #0]

	//Enable SysTick
	SysTick->CTRL |= CTRL_ENABLE;
 81007c8:	4b08      	ldr	r3, [pc, #32]	; (81007ec <rtosKernelLaunch+0x58>)
 81007ca:	681b      	ldr	r3, [r3, #0]
 81007cc:	4a07      	ldr	r2, [pc, #28]	; (81007ec <rtosKernelLaunch+0x58>)
 81007ce:	f043 0301 	orr.w	r3, r3, #1
 81007d2:	6013      	str	r3, [r2, #0]

	//Enable Interrupt
	SysTick->CTRL |= CTRL_TICKINT;
 81007d4:	4b05      	ldr	r3, [pc, #20]	; (81007ec <rtosKernelLaunch+0x58>)
 81007d6:	681b      	ldr	r3, [r3, #0]
 81007d8:	4a04      	ldr	r2, [pc, #16]	; (81007ec <rtosKernelLaunch+0x58>)
 81007da:	f043 0302 	orr.w	r3, r3, #2
 81007de:	6013      	str	r3, [r2, #0]

	//Launching Scheduler
	rtosSchedulerLaunch();
 81007e0:	f000 f81e 	bl	8100820 <rtosSchedulerLaunch>
}
 81007e4:	bf00      	nop
 81007e6:	3708      	adds	r7, #8
 81007e8:	46bd      	mov	sp, r7
 81007ea:	bd80      	pop	{r7, pc}
 81007ec:	e000e010 	.word	0xe000e010
 81007f0:	10000094 	.word	0x10000094

081007f4 <SysTick_Handler>:

__attribute__((naked))void SysTick_Handler(){

	//Suspend the current thread
	//First disable global interrupts
	__asm("CPSID	I");
 81007f4:	b672      	cpsid	i
	//Save registers whiCh are not saved when excpetion occured by default
	__asm("PUSH {R4-R11}");
 81007f6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Load address of current tcb pointer into R0
	__asm("LDR R0, =ptrCurrTCB"); // R0 is holding pointer to pointer to tcb
 81007fa:	4808      	ldr	r0, [pc, #32]	; (810081c <SysTick_Handler+0x28>)
	//Load R1 from address equals r0, i.e. R1 = ptrCurrTCB
	__asm("LDR R1, [R0]");
 81007fc:	6801      	ldr	r1, [r0, #0]
	//Store CortexM SP to memory pointed by R1, i.e. save SP to tcb
	__asm("STR SP, [R1]");
 81007fe:	f8c1 d000 	str.w	sp, [r1]
	//Store R1 at address equals R0, i.e ptrCurrTCB = R1
	__asm("STR R1, [R0]");
	//Load Cortex M SP from address equals R1, i.e. SP = ptrCurrTCB->ptrStack
	__asm("LDR SP, [R1]");
#elif (PERIODIC_TASK == 1)
	__asm("PUSH {R0, LR}");
 8100802:	b501      	push	{r0, lr}
	__asm("BL	rtosSchedulerSwitch");
 8100804:	f000 f824 	bl	8100850 <rtosSchedulerSwitch>
	__asm("POP {R0, LR}");
 8100808:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
	//like before fetch the value at the memory at R0 into R1 i.e. R1 = ptrCurrTCB
	__asm("LDR R1, [R0]");
 810080c:	6801      	ldr	r1, [r0, #0]
	//Load CortexM SP from memory pointed by R1
	__asm("LDR SP, [R1]");
 810080e:	f8d1 d000 	ldr.w	sp, [r1]
#endif
	//Restore R4, R5, R6, R7, R8, R9, R10, R11
	__asm("POP {R4-R11}");
 8100812:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Enable global interrupt
	__asm("CPSIE	I");
 8100816:	b662      	cpsie	i
	//Return from exception and automatically restore R0, R1, R2, R3, R12, LR, PC, PSR from newly loaded stack
	__asm("BX	LR");
 8100818:	4770      	bx	lr
}
 810081a:	bf00      	nop
 810081c:	100000b4 	.word	0x100000b4

08100820 <rtosSchedulerLaunch>:

void rtosSchedulerLaunch(){
 8100820:	b480      	push	{r7}
 8100822:	af00      	add	r7, sp, #0

	//Load address of ptrCurrTCB into R0
	__asm("LDR R0, =ptrCurrTCB");
 8100824:	4809      	ldr	r0, [pc, #36]	; (810084c <rtosSchedulerLaunch+0x2c>)
	//Load ptrCurrTCB to R2 from its address i.e. R0
	__asm("LDR R2, [R0]");
 8100826:	6802      	ldr	r2, [r0, #0]
	//Load Cortex M stack pointer from ptrCurrTCB, i.e. SP = ptrCurrTCB->ptrStack
	__asm("LDR SP, [R2]");
 8100828:	f8d2 d000 	ldr.w	sp, [r2]
	//Fetch all the initial register values from the stack
	__asm("POP {R4-R11}");
 810082c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Fetch other registers which are saved by default
	__asm("POP {R0-R3}");
 8100830:	bc0f      	pop	{r0, r1, r2, r3}
	//Fetch register 12 which is saved by default
	__asm("POP {R12}");
 8100832:	f85d cb04 	ldr.w	ip, [sp], #4
	//Skip to LR in stack
	__asm("ADD SP, SP, #4");
 8100836:	b001      	add	sp, #4
	//Setting LR as PC which lead to task0 function pointer
	__asm("POP {LR}");
 8100838:	f85d eb04 	ldr.w	lr, [sp], #4
	//Skip to PSR
	__asm("ADD SP, SP, #4");
 810083c:	b001      	add	sp, #4
	//Enable global interrupt
	__asm("CPSIE	I");
 810083e:	b662      	cpsie	i
	//Return from exception
	__asm("BX	LR");
 8100840:	4770      	bx	lr
}
 8100842:	bf00      	nop
 8100844:	46bd      	mov	sp, r7
 8100846:	bc80      	pop	{r7}
 8100848:	4770      	bx	lr
 810084a:	0000      	.short	0x0000
 810084c:	100000b4 	.word	0x100000b4

08100850 <rtosSchedulerSwitch>:
void rtosThreadYield(){
	SysTick->VAL = 0; //By writing any value to this register the value is overwritten
	INTCTRL = (1U<<26);
}
#if PERIODIC_TASK == 1
void rtosSchedulerSwitch(){
 8100850:	b580      	push	{r7, lr}
 8100852:	af00      	add	r7, sp, #0
	if( (++periodTick) == PERIODIC_TASK_PERIOD){
 8100854:	4b0b      	ldr	r3, [pc, #44]	; (8100884 <rtosSchedulerSwitch+0x34>)
 8100856:	681b      	ldr	r3, [r3, #0]
 8100858:	3301      	adds	r3, #1
 810085a:	4a0a      	ldr	r2, [pc, #40]	; (8100884 <rtosSchedulerSwitch+0x34>)
 810085c:	6013      	str	r3, [r2, #0]
 810085e:	4b09      	ldr	r3, [pc, #36]	; (8100884 <rtosSchedulerSwitch+0x34>)
 8100860:	681b      	ldr	r3, [r3, #0]
 8100862:	f242 7210 	movw	r2, #10000	; 0x2710
 8100866:	4293      	cmp	r3, r2
 8100868:	d104      	bne.n	8100874 <rtosSchedulerSwitch+0x24>
		(*task3)();
 810086a:	f7ff fdbb 	bl	81003e4 <task3>
		periodTick=0;
 810086e:	4b05      	ldr	r3, [pc, #20]	; (8100884 <rtosSchedulerSwitch+0x34>)
 8100870:	2200      	movs	r2, #0
 8100872:	601a      	str	r2, [r3, #0]
	}
	ptrCurrTCB = ptrCurrTCB->nextThread;
 8100874:	4b04      	ldr	r3, [pc, #16]	; (8100888 <rtosSchedulerSwitch+0x38>)
 8100876:	681b      	ldr	r3, [r3, #0]
 8100878:	685b      	ldr	r3, [r3, #4]
 810087a:	4a03      	ldr	r2, [pc, #12]	; (8100888 <rtosSchedulerSwitch+0x38>)
 810087c:	6013      	str	r3, [r2, #0]
}
 810087e:	bf00      	nop
 8100880:	bd80      	pop	{r7, pc}
 8100882:	bf00      	nop
 8100884:	10000098 	.word	0x10000098
 8100888:	100000b4 	.word	0x100000b4

0810088c <tim2_1hz_interrupt_init>:
#endif

void tim2_1hz_interrupt_init(){
 810088c:	b580      	push	{r7, lr}
 810088e:	af00      	add	r7, sp, #0
	//Enable clock access to timer 2
	RCC->APB1LENR |= TIM2EN;
 8100890:	4b11      	ldr	r3, [pc, #68]	; (81008d8 <tim2_1hz_interrupt_init+0x4c>)
 8100892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100896:	4a10      	ldr	r2, [pc, #64]	; (81008d8 <tim2_1hz_interrupt_init+0x4c>)
 8100898:	f043 0301 	orr.w	r3, r3, #1
 810089c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	//Set timer prescalar
	TIM2->PSC = 6400-1; // Bus clock is 64000000 dividing by prescalar to get 10000 HZ
 81008a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81008a4:	f641 02ff 	movw	r2, #6399	; 0x18ff
 81008a8:	629a      	str	r2, [r3, #40]	; 0x28
	//Set auto reload value
	TIM2->ARR = 10000-1; //1000/1000 = 1Hz
 81008aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81008ae:	f242 720f 	movw	r2, #9999	; 0x270f
 81008b2:	62da      	str	r2, [r3, #44]	; 0x2c
	//Clear Counter
	TIM2->CNT = 0;
 81008b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81008b8:	2200      	movs	r2, #0
 81008ba:	625a      	str	r2, [r3, #36]	; 0x24
	//Enable timer 2
	TIM2->CR1 = CR1_CEN;
 81008bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81008c0:	2201      	movs	r2, #1
 81008c2:	601a      	str	r2, [r3, #0]
	//Enable interrupt
	TIM2->DIER = DIER_UIE;
 81008c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81008c8:	2201      	movs	r2, #1
 81008ca:	60da      	str	r2, [r3, #12]
	//Enable the timer interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 81008cc:	201c      	movs	r0, #28
 81008ce:	f7ff fe05 	bl	81004dc <__NVIC_EnableIRQ>
}
 81008d2:	bf00      	nop
 81008d4:	bd80      	pop	{r7, pc}
 81008d6:	bf00      	nop
 81008d8:	58024400 	.word	0x58024400

081008dc <rtosSempahoreInit>:

void rtosSempahoreInit(int32_t *semaphoreCnt, int32_t initVal){
 81008dc:	b480      	push	{r7}
 81008de:	b083      	sub	sp, #12
 81008e0:	af00      	add	r7, sp, #0
 81008e2:	6078      	str	r0, [r7, #4]
 81008e4:	6039      	str	r1, [r7, #0]
	*semaphoreCnt = initVal;
 81008e6:	687b      	ldr	r3, [r7, #4]
 81008e8:	683a      	ldr	r2, [r7, #0]
 81008ea:	601a      	str	r2, [r3, #0]
}
 81008ec:	bf00      	nop
 81008ee:	370c      	adds	r7, #12
 81008f0:	46bd      	mov	sp, r7
 81008f2:	bc80      	pop	{r7}
 81008f4:	4770      	bx	lr

081008f6 <rtosSemaphoreCntGive>:

void rtosSemaphoreCntGive(int32_t *semaphoreCnt){
 81008f6:	b480      	push	{r7}
 81008f8:	b083      	sub	sp, #12
 81008fa:	af00      	add	r7, sp, #0
 81008fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 81008fe:	b672      	cpsid	i
}
 8100900:	bf00      	nop
	__disable_irq();
	*semaphoreCnt = *semaphoreCnt + 1;
 8100902:	687b      	ldr	r3, [r7, #4]
 8100904:	681b      	ldr	r3, [r3, #0]
 8100906:	1c5a      	adds	r2, r3, #1
 8100908:	687b      	ldr	r3, [r7, #4]
 810090a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 810090c:	b662      	cpsie	i
}
 810090e:	bf00      	nop
	__enable_irq();
}
 8100910:	bf00      	nop
 8100912:	370c      	adds	r7, #12
 8100914:	46bd      	mov	sp, r7
 8100916:	bc80      	pop	{r7}
 8100918:	4770      	bx	lr

0810091a <rtosSemaphoreCntTake>:

void rtosSemaphoreCntTake(int32_t *semaphoreCnt){
 810091a:	b480      	push	{r7}
 810091c:	b083      	sub	sp, #12
 810091e:	af00      	add	r7, sp, #0
 8100920:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8100922:	b672      	cpsid	i
}
 8100924:	bf00      	nop
	__disable_irq();
	while(*semaphoreCnt <= 0){
 8100926:	e003      	b.n	8100930 <rtosSemaphoreCntTake+0x16>
  __ASM volatile ("cpsid i" : : : "memory");
 8100928:	b672      	cpsid	i
}
 810092a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 810092c:	b662      	cpsie	i
}
 810092e:	bf00      	nop
 8100930:	687b      	ldr	r3, [r7, #4]
 8100932:	681b      	ldr	r3, [r3, #0]
 8100934:	2b00      	cmp	r3, #0
 8100936:	ddf7      	ble.n	8100928 <rtosSemaphoreCntTake+0xe>
		__disable_irq();
		__enable_irq();
	}
	*semaphoreCnt = *semaphoreCnt - 1;
 8100938:	687b      	ldr	r3, [r7, #4]
 810093a:	681b      	ldr	r3, [r3, #0]
 810093c:	1e5a      	subs	r2, r3, #1
 810093e:	687b      	ldr	r3, [r7, #4]
 8100940:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8100942:	b662      	cpsie	i
}
 8100944:	bf00      	nop
	__enable_irq();
}
 8100946:	bf00      	nop
 8100948:	370c      	adds	r7, #12
 810094a:	46bd      	mov	sp, r7
 810094c:	bc80      	pop	{r7}
 810094e:	4770      	bx	lr

08100950 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100950:	b580      	push	{r7, lr}
 8100952:	b086      	sub	sp, #24
 8100954:	af00      	add	r7, sp, #0
 8100956:	60f8      	str	r0, [r7, #12]
 8100958:	60b9      	str	r1, [r7, #8]
 810095a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810095c:	2300      	movs	r3, #0
 810095e:	617b      	str	r3, [r7, #20]
 8100960:	e00a      	b.n	8100978 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8100962:	f3af 8000 	nop.w
 8100966:	4601      	mov	r1, r0
 8100968:	68bb      	ldr	r3, [r7, #8]
 810096a:	1c5a      	adds	r2, r3, #1
 810096c:	60ba      	str	r2, [r7, #8]
 810096e:	b2ca      	uxtb	r2, r1
 8100970:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100972:	697b      	ldr	r3, [r7, #20]
 8100974:	3301      	adds	r3, #1
 8100976:	617b      	str	r3, [r7, #20]
 8100978:	697a      	ldr	r2, [r7, #20]
 810097a:	687b      	ldr	r3, [r7, #4]
 810097c:	429a      	cmp	r2, r3
 810097e:	dbf0      	blt.n	8100962 <_read+0x12>
  }

  return len;
 8100980:	687b      	ldr	r3, [r7, #4]
}
 8100982:	4618      	mov	r0, r3
 8100984:	3718      	adds	r7, #24
 8100986:	46bd      	mov	sp, r7
 8100988:	bd80      	pop	{r7, pc}

0810098a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810098a:	b580      	push	{r7, lr}
 810098c:	b086      	sub	sp, #24
 810098e:	af00      	add	r7, sp, #0
 8100990:	60f8      	str	r0, [r7, #12]
 8100992:	60b9      	str	r1, [r7, #8]
 8100994:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100996:	2300      	movs	r3, #0
 8100998:	617b      	str	r3, [r7, #20]
 810099a:	e009      	b.n	81009b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 810099c:	68bb      	ldr	r3, [r7, #8]
 810099e:	1c5a      	adds	r2, r3, #1
 81009a0:	60ba      	str	r2, [r7, #8]
 81009a2:	781b      	ldrb	r3, [r3, #0]
 81009a4:	4618      	mov	r0, r3
 81009a6:	f000 f873 	bl	8100a90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81009aa:	697b      	ldr	r3, [r7, #20]
 81009ac:	3301      	adds	r3, #1
 81009ae:	617b      	str	r3, [r7, #20]
 81009b0:	697a      	ldr	r2, [r7, #20]
 81009b2:	687b      	ldr	r3, [r7, #4]
 81009b4:	429a      	cmp	r2, r3
 81009b6:	dbf1      	blt.n	810099c <_write+0x12>
  }
  return len;
 81009b8:	687b      	ldr	r3, [r7, #4]
}
 81009ba:	4618      	mov	r0, r3
 81009bc:	3718      	adds	r7, #24
 81009be:	46bd      	mov	sp, r7
 81009c0:	bd80      	pop	{r7, pc}

081009c2 <_close>:

int _close(int file)
{
 81009c2:	b480      	push	{r7}
 81009c4:	b083      	sub	sp, #12
 81009c6:	af00      	add	r7, sp, #0
 81009c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81009ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 81009ce:	4618      	mov	r0, r3
 81009d0:	370c      	adds	r7, #12
 81009d2:	46bd      	mov	sp, r7
 81009d4:	bc80      	pop	{r7}
 81009d6:	4770      	bx	lr

081009d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81009d8:	b480      	push	{r7}
 81009da:	b083      	sub	sp, #12
 81009dc:	af00      	add	r7, sp, #0
 81009de:	6078      	str	r0, [r7, #4]
 81009e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81009e2:	683b      	ldr	r3, [r7, #0]
 81009e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81009e8:	605a      	str	r2, [r3, #4]
  return 0;
 81009ea:	2300      	movs	r3, #0
}
 81009ec:	4618      	mov	r0, r3
 81009ee:	370c      	adds	r7, #12
 81009f0:	46bd      	mov	sp, r7
 81009f2:	bc80      	pop	{r7}
 81009f4:	4770      	bx	lr

081009f6 <_isatty>:

int _isatty(int file)
{
 81009f6:	b480      	push	{r7}
 81009f8:	b083      	sub	sp, #12
 81009fa:	af00      	add	r7, sp, #0
 81009fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81009fe:	2301      	movs	r3, #1
}
 8100a00:	4618      	mov	r0, r3
 8100a02:	370c      	adds	r7, #12
 8100a04:	46bd      	mov	sp, r7
 8100a06:	bc80      	pop	{r7}
 8100a08:	4770      	bx	lr

08100a0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100a0a:	b480      	push	{r7}
 8100a0c:	b085      	sub	sp, #20
 8100a0e:	af00      	add	r7, sp, #0
 8100a10:	60f8      	str	r0, [r7, #12]
 8100a12:	60b9      	str	r1, [r7, #8]
 8100a14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8100a16:	2300      	movs	r3, #0
}
 8100a18:	4618      	mov	r0, r3
 8100a1a:	3714      	adds	r7, #20
 8100a1c:	46bd      	mov	sp, r7
 8100a1e:	bc80      	pop	{r7}
 8100a20:	4770      	bx	lr
	...

08100a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100a24:	b580      	push	{r7, lr}
 8100a26:	b086      	sub	sp, #24
 8100a28:	af00      	add	r7, sp, #0
 8100a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100a2c:	4a14      	ldr	r2, [pc, #80]	; (8100a80 <_sbrk+0x5c>)
 8100a2e:	4b15      	ldr	r3, [pc, #84]	; (8100a84 <_sbrk+0x60>)
 8100a30:	1ad3      	subs	r3, r2, r3
 8100a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100a34:	697b      	ldr	r3, [r7, #20]
 8100a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100a38:	4b13      	ldr	r3, [pc, #76]	; (8100a88 <_sbrk+0x64>)
 8100a3a:	681b      	ldr	r3, [r3, #0]
 8100a3c:	2b00      	cmp	r3, #0
 8100a3e:	d102      	bne.n	8100a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100a40:	4b11      	ldr	r3, [pc, #68]	; (8100a88 <_sbrk+0x64>)
 8100a42:	4a12      	ldr	r2, [pc, #72]	; (8100a8c <_sbrk+0x68>)
 8100a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100a46:	4b10      	ldr	r3, [pc, #64]	; (8100a88 <_sbrk+0x64>)
 8100a48:	681a      	ldr	r2, [r3, #0]
 8100a4a:	687b      	ldr	r3, [r7, #4]
 8100a4c:	4413      	add	r3, r2
 8100a4e:	693a      	ldr	r2, [r7, #16]
 8100a50:	429a      	cmp	r2, r3
 8100a52:	d207      	bcs.n	8100a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100a54:	f000 fa26 	bl	8100ea4 <__errno>
 8100a58:	4603      	mov	r3, r0
 8100a5a:	220c      	movs	r2, #12
 8100a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8100a62:	e009      	b.n	8100a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100a64:	4b08      	ldr	r3, [pc, #32]	; (8100a88 <_sbrk+0x64>)
 8100a66:	681b      	ldr	r3, [r3, #0]
 8100a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100a6a:	4b07      	ldr	r3, [pc, #28]	; (8100a88 <_sbrk+0x64>)
 8100a6c:	681a      	ldr	r2, [r3, #0]
 8100a6e:	687b      	ldr	r3, [r7, #4]
 8100a70:	4413      	add	r3, r2
 8100a72:	4a05      	ldr	r2, [pc, #20]	; (8100a88 <_sbrk+0x64>)
 8100a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100a76:	68fb      	ldr	r3, [r7, #12]
}
 8100a78:	4618      	mov	r0, r3
 8100a7a:	3718      	adds	r7, #24
 8100a7c:	46bd      	mov	sp, r7
 8100a7e:	bd80      	pop	{r7, pc}
 8100a80:	10048000 	.word	0x10048000
 8100a84:	00000400 	.word	0x00000400
 8100a88:	10001378 	.word	0x10001378
 8100a8c:	100014c8 	.word	0x100014c8

08100a90 <__io_putchar>:
#define APB1_CLK				SYS_FREQ
#define UART_BAUD_RATE			115200
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch){
 8100a90:	b580      	push	{r7, lr}
 8100a92:	b082      	sub	sp, #8
 8100a94:	af00      	add	r7, sp, #0
 8100a96:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8100a98:	6878      	ldr	r0, [r7, #4]
 8100a9a:	f000 f847 	bl	8100b2c <uart_write>
	return ch;
 8100a9e:	687b      	ldr	r3, [r7, #4]
}
 8100aa0:	4618      	mov	r0, r3
 8100aa2:	3708      	adds	r7, #8
 8100aa4:	46bd      	mov	sp, r7
 8100aa6:	bd80      	pop	{r7, pc}

08100aa8 <uart_tx_init>:
void uart_tx_init(void){
 8100aa8:	b580      	push	{r7, lr}
 8100aaa:	af00      	add	r7, sp, #0

	RCC->AHB4ENR |= GPIOAEN; //Starting clock for GPIOA as using pin PA9 AND PA10 for USART
 8100aac:	4b1b      	ldr	r3, [pc, #108]	; (8100b1c <uart_tx_init+0x74>)
 8100aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ab2:	4a1a      	ldr	r2, [pc, #104]	; (8100b1c <uart_tx_init+0x74>)
 8100ab4:	f043 0301 	orr.w	r3, r3, #1
 8100ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	//Setting the mode as
	GPIOA->MODER &= ~(1U<<18);
 8100abc:	4b18      	ldr	r3, [pc, #96]	; (8100b20 <uart_tx_init+0x78>)
 8100abe:	681b      	ldr	r3, [r3, #0]
 8100ac0:	4a17      	ldr	r2, [pc, #92]	; (8100b20 <uart_tx_init+0x78>)
 8100ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8100ac6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8100ac8:	4b15      	ldr	r3, [pc, #84]	; (8100b20 <uart_tx_init+0x78>)
 8100aca:	681b      	ldr	r3, [r3, #0]
 8100acc:	4a14      	ldr	r2, [pc, #80]	; (8100b20 <uart_tx_init+0x78>)
 8100ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8100ad2:	6013      	str	r3, [r2, #0]

	/*GPIOA->MODER &= ~(1U<<20);
	GPIOA->MODER |= (1U<<21);*/

	//Setting GPIO Alternate function for PA9 AND PA10
	GPIOA->AFR[1] |= ((1U<<4)|(1U<<5)|(1U<<6));
 8100ad4:	4b12      	ldr	r3, [pc, #72]	; (8100b20 <uart_tx_init+0x78>)
 8100ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100ad8:	4a11      	ldr	r2, [pc, #68]	; (8100b20 <uart_tx_init+0x78>)
 8100ada:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8100ade:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[0] &= ~(1U<<7);
 8100ae0:	4b0f      	ldr	r3, [pc, #60]	; (8100b20 <uart_tx_init+0x78>)
 8100ae2:	6a1b      	ldr	r3, [r3, #32]
 8100ae4:	4a0e      	ldr	r2, [pc, #56]	; (8100b20 <uart_tx_init+0x78>)
 8100ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8100aea:	6213      	str	r3, [r2, #32]

	/*GPIOA->AFR[1] |= ((1U<<8)|(1U<<9)|(1U<<10));
	GPIOA->AFR[0] &= ~(1U<<11);*/

	//Enabling clock for USART1
	RCC->APB2ENR |= (1<<4);
 8100aec:	4b0b      	ldr	r3, [pc, #44]	; (8100b1c <uart_tx_init+0x74>)
 8100aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100af2:	4a0a      	ldr	r2, [pc, #40]	; (8100b1c <uart_tx_init+0x74>)
 8100af4:	f043 0310 	orr.w	r3, r3, #16
 8100af8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

	//Setting USART1 Baud Rate
	uart_set_baudrate(APB1_CLK, UART_BAUD_RATE);
 8100afc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8100b00:	4808      	ldr	r0, [pc, #32]	; (8100b24 <uart_tx_init+0x7c>)
 8100b02:	f000 f829 	bl	8100b58 <uart_set_baudrate>

	//Configuring Transfer Direction
	USART1->CR1 = (1U<<3);
 8100b06:	4b08      	ldr	r3, [pc, #32]	; (8100b28 <uart_tx_init+0x80>)
 8100b08:	2208      	movs	r2, #8
 8100b0a:	601a      	str	r2, [r3, #0]

	//Enable the USART Module
	USART1->CR1 |= (1U<<0);
 8100b0c:	4b06      	ldr	r3, [pc, #24]	; (8100b28 <uart_tx_init+0x80>)
 8100b0e:	681b      	ldr	r3, [r3, #0]
 8100b10:	4a05      	ldr	r2, [pc, #20]	; (8100b28 <uart_tx_init+0x80>)
 8100b12:	f043 0301 	orr.w	r3, r3, #1
 8100b16:	6013      	str	r3, [r2, #0]
}
 8100b18:	bf00      	nop
 8100b1a:	bd80      	pop	{r7, pc}
 8100b1c:	58024400 	.word	0x58024400
 8100b20:	58020000 	.word	0x58020000
 8100b24:	03d09000 	.word	0x03d09000
 8100b28:	40011000 	.word	0x40011000

08100b2c <uart_write>:

static void uart_write(int ch){
 8100b2c:	b480      	push	{r7}
 8100b2e:	b083      	sub	sp, #12
 8100b30:	af00      	add	r7, sp, #0
 8100b32:	6078      	str	r0, [r7, #4]
	//Make sure data register is not full
	while(!(USART1->ISR & (1U<<7))){}
 8100b34:	bf00      	nop
 8100b36:	4b07      	ldr	r3, [pc, #28]	; (8100b54 <uart_write+0x28>)
 8100b38:	69db      	ldr	r3, [r3, #28]
 8100b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100b3e:	2b00      	cmp	r3, #0
 8100b40:	d0f9      	beq.n	8100b36 <uart_write+0xa>

	//Write to data transmit register
	USART1->TDR = (ch & 0xFF);
 8100b42:	687b      	ldr	r3, [r7, #4]
 8100b44:	4a03      	ldr	r2, [pc, #12]	; (8100b54 <uart_write+0x28>)
 8100b46:	b2db      	uxtb	r3, r3
 8100b48:	6293      	str	r3, [r2, #40]	; 0x28

}
 8100b4a:	bf00      	nop
 8100b4c:	370c      	adds	r7, #12
 8100b4e:	46bd      	mov	sp, r7
 8100b50:	bc80      	pop	{r7}
 8100b52:	4770      	bx	lr
 8100b54:	40011000 	.word	0x40011000

08100b58 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate){
 8100b58:	b480      	push	{r7}
 8100b5a:	b083      	sub	sp, #12
 8100b5c:	af00      	add	r7, sp, #0
 8100b5e:	6078      	str	r0, [r7, #4]
 8100b60:	6039      	str	r1, [r7, #0]
	USART1->BRR = (periph_clk + (baudrate/2U)) / baudrate;
 8100b62:	683b      	ldr	r3, [r7, #0]
 8100b64:	085a      	lsrs	r2, r3, #1
 8100b66:	687b      	ldr	r3, [r7, #4]
 8100b68:	441a      	add	r2, r3
 8100b6a:	4905      	ldr	r1, [pc, #20]	; (8100b80 <uart_set_baudrate+0x28>)
 8100b6c:	683b      	ldr	r3, [r7, #0]
 8100b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8100b72:	60cb      	str	r3, [r1, #12]
}
 8100b74:	bf00      	nop
 8100b76:	370c      	adds	r7, #12
 8100b78:	46bd      	mov	sp, r7
 8100b7a:	bc80      	pop	{r7}
 8100b7c:	4770      	bx	lr
 8100b7e:	bf00      	nop
 8100b80:	40011000 	.word	0x40011000

08100b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8100b84:	480d      	ldr	r0, [pc, #52]	; (8100bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8100b86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100b88:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100b8c:	480c      	ldr	r0, [pc, #48]	; (8100bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8100b8e:	490d      	ldr	r1, [pc, #52]	; (8100bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8100b90:	4a0d      	ldr	r2, [pc, #52]	; (8100bc8 <LoopForever+0xe>)
  movs r3, #0
 8100b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100b94:	e002      	b.n	8100b9c <LoopCopyDataInit>

08100b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100b9a:	3304      	adds	r3, #4

08100b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100ba0:	d3f9      	bcc.n	8100b96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100ba2:	4a0a      	ldr	r2, [pc, #40]	; (8100bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8100ba4:	4c0a      	ldr	r4, [pc, #40]	; (8100bd0 <LoopForever+0x16>)
  movs r3, #0
 8100ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100ba8:	e001      	b.n	8100bae <LoopFillZerobss>

08100baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100bac:	3204      	adds	r2, #4

08100bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100bb0:	d3fb      	bcc.n	8100baa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8100bb2:	f000 f97d 	bl	8100eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8100bb6:	f7ff fc55 	bl	8100464 <main>

08100bba <LoopForever>:

LoopForever:
  b LoopForever
 8100bba:	e7fe      	b.n	8100bba <LoopForever>
  ldr   r0, =_estack
 8100bbc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100bc0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100bc4:	1000005c 	.word	0x1000005c
  ldr r2, =_sidata
 8100bc8:	08101ac4 	.word	0x08101ac4
  ldr r2, =_sbss
 8100bcc:	1000005c 	.word	0x1000005c
  ldr r4, =_ebss
 8100bd0:	100014c8 	.word	0x100014c8

08100bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8100bd4:	e7fe      	b.n	8100bd4 <ADC1_2_IRQHandler>
	...

08100bd8 <std>:
 8100bd8:	2300      	movs	r3, #0
 8100bda:	b510      	push	{r4, lr}
 8100bdc:	4604      	mov	r4, r0
 8100bde:	e9c0 3300 	strd	r3, r3, [r0]
 8100be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8100be6:	6083      	str	r3, [r0, #8]
 8100be8:	8181      	strh	r1, [r0, #12]
 8100bea:	6643      	str	r3, [r0, #100]	; 0x64
 8100bec:	81c2      	strh	r2, [r0, #14]
 8100bee:	6183      	str	r3, [r0, #24]
 8100bf0:	4619      	mov	r1, r3
 8100bf2:	2208      	movs	r2, #8
 8100bf4:	305c      	adds	r0, #92	; 0x5c
 8100bf6:	f000 f906 	bl	8100e06 <memset>
 8100bfa:	4b0d      	ldr	r3, [pc, #52]	; (8100c30 <std+0x58>)
 8100bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8100bfe:	4b0d      	ldr	r3, [pc, #52]	; (8100c34 <std+0x5c>)
 8100c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8100c02:	4b0d      	ldr	r3, [pc, #52]	; (8100c38 <std+0x60>)
 8100c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8100c06:	4b0d      	ldr	r3, [pc, #52]	; (8100c3c <std+0x64>)
 8100c08:	6323      	str	r3, [r4, #48]	; 0x30
 8100c0a:	4b0d      	ldr	r3, [pc, #52]	; (8100c40 <std+0x68>)
 8100c0c:	6224      	str	r4, [r4, #32]
 8100c0e:	429c      	cmp	r4, r3
 8100c10:	d006      	beq.n	8100c20 <std+0x48>
 8100c12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8100c16:	4294      	cmp	r4, r2
 8100c18:	d002      	beq.n	8100c20 <std+0x48>
 8100c1a:	33d0      	adds	r3, #208	; 0xd0
 8100c1c:	429c      	cmp	r4, r3
 8100c1e:	d105      	bne.n	8100c2c <std+0x54>
 8100c20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8100c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100c28:	f000 b966 	b.w	8100ef8 <__retarget_lock_init_recursive>
 8100c2c:	bd10      	pop	{r4, pc}
 8100c2e:	bf00      	nop
 8100c30:	08100d81 	.word	0x08100d81
 8100c34:	08100da3 	.word	0x08100da3
 8100c38:	08100ddb 	.word	0x08100ddb
 8100c3c:	08100dff 	.word	0x08100dff
 8100c40:	1000137c 	.word	0x1000137c

08100c44 <stdio_exit_handler>:
 8100c44:	4a02      	ldr	r2, [pc, #8]	; (8100c50 <stdio_exit_handler+0xc>)
 8100c46:	4903      	ldr	r1, [pc, #12]	; (8100c54 <stdio_exit_handler+0x10>)
 8100c48:	4803      	ldr	r0, [pc, #12]	; (8100c58 <stdio_exit_handler+0x14>)
 8100c4a:	f000 b869 	b.w	8100d20 <_fwalk_sglue>
 8100c4e:	bf00      	nop
 8100c50:	10000000 	.word	0x10000000
 8100c54:	08101795 	.word	0x08101795
 8100c58:	1000000c 	.word	0x1000000c

08100c5c <cleanup_stdio>:
 8100c5c:	6841      	ldr	r1, [r0, #4]
 8100c5e:	4b0c      	ldr	r3, [pc, #48]	; (8100c90 <cleanup_stdio+0x34>)
 8100c60:	4299      	cmp	r1, r3
 8100c62:	b510      	push	{r4, lr}
 8100c64:	4604      	mov	r4, r0
 8100c66:	d001      	beq.n	8100c6c <cleanup_stdio+0x10>
 8100c68:	f000 fd94 	bl	8101794 <_fflush_r>
 8100c6c:	68a1      	ldr	r1, [r4, #8]
 8100c6e:	4b09      	ldr	r3, [pc, #36]	; (8100c94 <cleanup_stdio+0x38>)
 8100c70:	4299      	cmp	r1, r3
 8100c72:	d002      	beq.n	8100c7a <cleanup_stdio+0x1e>
 8100c74:	4620      	mov	r0, r4
 8100c76:	f000 fd8d 	bl	8101794 <_fflush_r>
 8100c7a:	68e1      	ldr	r1, [r4, #12]
 8100c7c:	4b06      	ldr	r3, [pc, #24]	; (8100c98 <cleanup_stdio+0x3c>)
 8100c7e:	4299      	cmp	r1, r3
 8100c80:	d004      	beq.n	8100c8c <cleanup_stdio+0x30>
 8100c82:	4620      	mov	r0, r4
 8100c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100c88:	f000 bd84 	b.w	8101794 <_fflush_r>
 8100c8c:	bd10      	pop	{r4, pc}
 8100c8e:	bf00      	nop
 8100c90:	1000137c 	.word	0x1000137c
 8100c94:	100013e4 	.word	0x100013e4
 8100c98:	1000144c 	.word	0x1000144c

08100c9c <global_stdio_init.part.0>:
 8100c9c:	b510      	push	{r4, lr}
 8100c9e:	4b0b      	ldr	r3, [pc, #44]	; (8100ccc <global_stdio_init.part.0+0x30>)
 8100ca0:	4c0b      	ldr	r4, [pc, #44]	; (8100cd0 <global_stdio_init.part.0+0x34>)
 8100ca2:	4a0c      	ldr	r2, [pc, #48]	; (8100cd4 <global_stdio_init.part.0+0x38>)
 8100ca4:	601a      	str	r2, [r3, #0]
 8100ca6:	4620      	mov	r0, r4
 8100ca8:	2200      	movs	r2, #0
 8100caa:	2104      	movs	r1, #4
 8100cac:	f7ff ff94 	bl	8100bd8 <std>
 8100cb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8100cb4:	2201      	movs	r2, #1
 8100cb6:	2109      	movs	r1, #9
 8100cb8:	f7ff ff8e 	bl	8100bd8 <std>
 8100cbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8100cc0:	2202      	movs	r2, #2
 8100cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100cc6:	2112      	movs	r1, #18
 8100cc8:	f7ff bf86 	b.w	8100bd8 <std>
 8100ccc:	100014b4 	.word	0x100014b4
 8100cd0:	1000137c 	.word	0x1000137c
 8100cd4:	08100c45 	.word	0x08100c45

08100cd8 <__sfp_lock_acquire>:
 8100cd8:	4801      	ldr	r0, [pc, #4]	; (8100ce0 <__sfp_lock_acquire+0x8>)
 8100cda:	f000 b90e 	b.w	8100efa <__retarget_lock_acquire_recursive>
 8100cde:	bf00      	nop
 8100ce0:	100014bd 	.word	0x100014bd

08100ce4 <__sfp_lock_release>:
 8100ce4:	4801      	ldr	r0, [pc, #4]	; (8100cec <__sfp_lock_release+0x8>)
 8100ce6:	f000 b909 	b.w	8100efc <__retarget_lock_release_recursive>
 8100cea:	bf00      	nop
 8100cec:	100014bd 	.word	0x100014bd

08100cf0 <__sinit>:
 8100cf0:	b510      	push	{r4, lr}
 8100cf2:	4604      	mov	r4, r0
 8100cf4:	f7ff fff0 	bl	8100cd8 <__sfp_lock_acquire>
 8100cf8:	6a23      	ldr	r3, [r4, #32]
 8100cfa:	b11b      	cbz	r3, 8100d04 <__sinit+0x14>
 8100cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8100d00:	f7ff bff0 	b.w	8100ce4 <__sfp_lock_release>
 8100d04:	4b04      	ldr	r3, [pc, #16]	; (8100d18 <__sinit+0x28>)
 8100d06:	6223      	str	r3, [r4, #32]
 8100d08:	4b04      	ldr	r3, [pc, #16]	; (8100d1c <__sinit+0x2c>)
 8100d0a:	681b      	ldr	r3, [r3, #0]
 8100d0c:	2b00      	cmp	r3, #0
 8100d0e:	d1f5      	bne.n	8100cfc <__sinit+0xc>
 8100d10:	f7ff ffc4 	bl	8100c9c <global_stdio_init.part.0>
 8100d14:	e7f2      	b.n	8100cfc <__sinit+0xc>
 8100d16:	bf00      	nop
 8100d18:	08100c5d 	.word	0x08100c5d
 8100d1c:	100014b4 	.word	0x100014b4

08100d20 <_fwalk_sglue>:
 8100d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8100d24:	4607      	mov	r7, r0
 8100d26:	4688      	mov	r8, r1
 8100d28:	4614      	mov	r4, r2
 8100d2a:	2600      	movs	r6, #0
 8100d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8100d30:	f1b9 0901 	subs.w	r9, r9, #1
 8100d34:	d505      	bpl.n	8100d42 <_fwalk_sglue+0x22>
 8100d36:	6824      	ldr	r4, [r4, #0]
 8100d38:	2c00      	cmp	r4, #0
 8100d3a:	d1f7      	bne.n	8100d2c <_fwalk_sglue+0xc>
 8100d3c:	4630      	mov	r0, r6
 8100d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8100d42:	89ab      	ldrh	r3, [r5, #12]
 8100d44:	2b01      	cmp	r3, #1
 8100d46:	d907      	bls.n	8100d58 <_fwalk_sglue+0x38>
 8100d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8100d4c:	3301      	adds	r3, #1
 8100d4e:	d003      	beq.n	8100d58 <_fwalk_sglue+0x38>
 8100d50:	4629      	mov	r1, r5
 8100d52:	4638      	mov	r0, r7
 8100d54:	47c0      	blx	r8
 8100d56:	4306      	orrs	r6, r0
 8100d58:	3568      	adds	r5, #104	; 0x68
 8100d5a:	e7e9      	b.n	8100d30 <_fwalk_sglue+0x10>

08100d5c <iprintf>:
 8100d5c:	b40f      	push	{r0, r1, r2, r3}
 8100d5e:	b507      	push	{r0, r1, r2, lr}
 8100d60:	4906      	ldr	r1, [pc, #24]	; (8100d7c <iprintf+0x20>)
 8100d62:	ab04      	add	r3, sp, #16
 8100d64:	6808      	ldr	r0, [r1, #0]
 8100d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8100d6a:	6881      	ldr	r1, [r0, #8]
 8100d6c:	9301      	str	r3, [sp, #4]
 8100d6e:	f000 f9e5 	bl	810113c <_vfiprintf_r>
 8100d72:	b003      	add	sp, #12
 8100d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8100d78:	b004      	add	sp, #16
 8100d7a:	4770      	bx	lr
 8100d7c:	10000058 	.word	0x10000058

08100d80 <__sread>:
 8100d80:	b510      	push	{r4, lr}
 8100d82:	460c      	mov	r4, r1
 8100d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100d88:	f000 f868 	bl	8100e5c <_read_r>
 8100d8c:	2800      	cmp	r0, #0
 8100d8e:	bfab      	itete	ge
 8100d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8100d92:	89a3      	ldrhlt	r3, [r4, #12]
 8100d94:	181b      	addge	r3, r3, r0
 8100d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8100d9a:	bfac      	ite	ge
 8100d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8100d9e:	81a3      	strhlt	r3, [r4, #12]
 8100da0:	bd10      	pop	{r4, pc}

08100da2 <__swrite>:
 8100da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100da6:	461f      	mov	r7, r3
 8100da8:	898b      	ldrh	r3, [r1, #12]
 8100daa:	05db      	lsls	r3, r3, #23
 8100dac:	4605      	mov	r5, r0
 8100dae:	460c      	mov	r4, r1
 8100db0:	4616      	mov	r6, r2
 8100db2:	d505      	bpl.n	8100dc0 <__swrite+0x1e>
 8100db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100db8:	2302      	movs	r3, #2
 8100dba:	2200      	movs	r2, #0
 8100dbc:	f000 f83c 	bl	8100e38 <_lseek_r>
 8100dc0:	89a3      	ldrh	r3, [r4, #12]
 8100dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8100dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8100dca:	81a3      	strh	r3, [r4, #12]
 8100dcc:	4632      	mov	r2, r6
 8100dce:	463b      	mov	r3, r7
 8100dd0:	4628      	mov	r0, r5
 8100dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8100dd6:	f000 b853 	b.w	8100e80 <_write_r>

08100dda <__sseek>:
 8100dda:	b510      	push	{r4, lr}
 8100ddc:	460c      	mov	r4, r1
 8100dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100de2:	f000 f829 	bl	8100e38 <_lseek_r>
 8100de6:	1c43      	adds	r3, r0, #1
 8100de8:	89a3      	ldrh	r3, [r4, #12]
 8100dea:	bf15      	itete	ne
 8100dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8100dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8100df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8100df6:	81a3      	strheq	r3, [r4, #12]
 8100df8:	bf18      	it	ne
 8100dfa:	81a3      	strhne	r3, [r4, #12]
 8100dfc:	bd10      	pop	{r4, pc}

08100dfe <__sclose>:
 8100dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8100e02:	f000 b809 	b.w	8100e18 <_close_r>

08100e06 <memset>:
 8100e06:	4402      	add	r2, r0
 8100e08:	4603      	mov	r3, r0
 8100e0a:	4293      	cmp	r3, r2
 8100e0c:	d100      	bne.n	8100e10 <memset+0xa>
 8100e0e:	4770      	bx	lr
 8100e10:	f803 1b01 	strb.w	r1, [r3], #1
 8100e14:	e7f9      	b.n	8100e0a <memset+0x4>
	...

08100e18 <_close_r>:
 8100e18:	b538      	push	{r3, r4, r5, lr}
 8100e1a:	4d06      	ldr	r5, [pc, #24]	; (8100e34 <_close_r+0x1c>)
 8100e1c:	2300      	movs	r3, #0
 8100e1e:	4604      	mov	r4, r0
 8100e20:	4608      	mov	r0, r1
 8100e22:	602b      	str	r3, [r5, #0]
 8100e24:	f7ff fdcd 	bl	81009c2 <_close>
 8100e28:	1c43      	adds	r3, r0, #1
 8100e2a:	d102      	bne.n	8100e32 <_close_r+0x1a>
 8100e2c:	682b      	ldr	r3, [r5, #0]
 8100e2e:	b103      	cbz	r3, 8100e32 <_close_r+0x1a>
 8100e30:	6023      	str	r3, [r4, #0]
 8100e32:	bd38      	pop	{r3, r4, r5, pc}
 8100e34:	100014b8 	.word	0x100014b8

08100e38 <_lseek_r>:
 8100e38:	b538      	push	{r3, r4, r5, lr}
 8100e3a:	4d07      	ldr	r5, [pc, #28]	; (8100e58 <_lseek_r+0x20>)
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	4608      	mov	r0, r1
 8100e40:	4611      	mov	r1, r2
 8100e42:	2200      	movs	r2, #0
 8100e44:	602a      	str	r2, [r5, #0]
 8100e46:	461a      	mov	r2, r3
 8100e48:	f7ff fddf 	bl	8100a0a <_lseek>
 8100e4c:	1c43      	adds	r3, r0, #1
 8100e4e:	d102      	bne.n	8100e56 <_lseek_r+0x1e>
 8100e50:	682b      	ldr	r3, [r5, #0]
 8100e52:	b103      	cbz	r3, 8100e56 <_lseek_r+0x1e>
 8100e54:	6023      	str	r3, [r4, #0]
 8100e56:	bd38      	pop	{r3, r4, r5, pc}
 8100e58:	100014b8 	.word	0x100014b8

08100e5c <_read_r>:
 8100e5c:	b538      	push	{r3, r4, r5, lr}
 8100e5e:	4d07      	ldr	r5, [pc, #28]	; (8100e7c <_read_r+0x20>)
 8100e60:	4604      	mov	r4, r0
 8100e62:	4608      	mov	r0, r1
 8100e64:	4611      	mov	r1, r2
 8100e66:	2200      	movs	r2, #0
 8100e68:	602a      	str	r2, [r5, #0]
 8100e6a:	461a      	mov	r2, r3
 8100e6c:	f7ff fd70 	bl	8100950 <_read>
 8100e70:	1c43      	adds	r3, r0, #1
 8100e72:	d102      	bne.n	8100e7a <_read_r+0x1e>
 8100e74:	682b      	ldr	r3, [r5, #0]
 8100e76:	b103      	cbz	r3, 8100e7a <_read_r+0x1e>
 8100e78:	6023      	str	r3, [r4, #0]
 8100e7a:	bd38      	pop	{r3, r4, r5, pc}
 8100e7c:	100014b8 	.word	0x100014b8

08100e80 <_write_r>:
 8100e80:	b538      	push	{r3, r4, r5, lr}
 8100e82:	4d07      	ldr	r5, [pc, #28]	; (8100ea0 <_write_r+0x20>)
 8100e84:	4604      	mov	r4, r0
 8100e86:	4608      	mov	r0, r1
 8100e88:	4611      	mov	r1, r2
 8100e8a:	2200      	movs	r2, #0
 8100e8c:	602a      	str	r2, [r5, #0]
 8100e8e:	461a      	mov	r2, r3
 8100e90:	f7ff fd7b 	bl	810098a <_write>
 8100e94:	1c43      	adds	r3, r0, #1
 8100e96:	d102      	bne.n	8100e9e <_write_r+0x1e>
 8100e98:	682b      	ldr	r3, [r5, #0]
 8100e9a:	b103      	cbz	r3, 8100e9e <_write_r+0x1e>
 8100e9c:	6023      	str	r3, [r4, #0]
 8100e9e:	bd38      	pop	{r3, r4, r5, pc}
 8100ea0:	100014b8 	.word	0x100014b8

08100ea4 <__errno>:
 8100ea4:	4b01      	ldr	r3, [pc, #4]	; (8100eac <__errno+0x8>)
 8100ea6:	6818      	ldr	r0, [r3, #0]
 8100ea8:	4770      	bx	lr
 8100eaa:	bf00      	nop
 8100eac:	10000058 	.word	0x10000058

08100eb0 <__libc_init_array>:
 8100eb0:	b570      	push	{r4, r5, r6, lr}
 8100eb2:	4d0d      	ldr	r5, [pc, #52]	; (8100ee8 <__libc_init_array+0x38>)
 8100eb4:	4c0d      	ldr	r4, [pc, #52]	; (8100eec <__libc_init_array+0x3c>)
 8100eb6:	1b64      	subs	r4, r4, r5
 8100eb8:	10a4      	asrs	r4, r4, #2
 8100eba:	2600      	movs	r6, #0
 8100ebc:	42a6      	cmp	r6, r4
 8100ebe:	d109      	bne.n	8100ed4 <__libc_init_array+0x24>
 8100ec0:	4d0b      	ldr	r5, [pc, #44]	; (8100ef0 <__libc_init_array+0x40>)
 8100ec2:	4c0c      	ldr	r4, [pc, #48]	; (8100ef4 <__libc_init_array+0x44>)
 8100ec4:	f000 fdb8 	bl	8101a38 <_init>
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	10a4      	asrs	r4, r4, #2
 8100ecc:	2600      	movs	r6, #0
 8100ece:	42a6      	cmp	r6, r4
 8100ed0:	d105      	bne.n	8100ede <__libc_init_array+0x2e>
 8100ed2:	bd70      	pop	{r4, r5, r6, pc}
 8100ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8100ed8:	4798      	blx	r3
 8100eda:	3601      	adds	r6, #1
 8100edc:	e7ee      	b.n	8100ebc <__libc_init_array+0xc>
 8100ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8100ee2:	4798      	blx	r3
 8100ee4:	3601      	adds	r6, #1
 8100ee6:	e7f2      	b.n	8100ece <__libc_init_array+0x1e>
 8100ee8:	08101abc 	.word	0x08101abc
 8100eec:	08101abc 	.word	0x08101abc
 8100ef0:	08101abc 	.word	0x08101abc
 8100ef4:	08101ac0 	.word	0x08101ac0

08100ef8 <__retarget_lock_init_recursive>:
 8100ef8:	4770      	bx	lr

08100efa <__retarget_lock_acquire_recursive>:
 8100efa:	4770      	bx	lr

08100efc <__retarget_lock_release_recursive>:
 8100efc:	4770      	bx	lr
	...

08100f00 <_free_r>:
 8100f00:	b538      	push	{r3, r4, r5, lr}
 8100f02:	4605      	mov	r5, r0
 8100f04:	2900      	cmp	r1, #0
 8100f06:	d041      	beq.n	8100f8c <_free_r+0x8c>
 8100f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8100f0c:	1f0c      	subs	r4, r1, #4
 8100f0e:	2b00      	cmp	r3, #0
 8100f10:	bfb8      	it	lt
 8100f12:	18e4      	addlt	r4, r4, r3
 8100f14:	f000 f8de 	bl	81010d4 <__malloc_lock>
 8100f18:	4a1d      	ldr	r2, [pc, #116]	; (8100f90 <_free_r+0x90>)
 8100f1a:	6813      	ldr	r3, [r2, #0]
 8100f1c:	b933      	cbnz	r3, 8100f2c <_free_r+0x2c>
 8100f1e:	6063      	str	r3, [r4, #4]
 8100f20:	6014      	str	r4, [r2, #0]
 8100f22:	4628      	mov	r0, r5
 8100f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100f28:	f000 b8da 	b.w	81010e0 <__malloc_unlock>
 8100f2c:	42a3      	cmp	r3, r4
 8100f2e:	d908      	bls.n	8100f42 <_free_r+0x42>
 8100f30:	6820      	ldr	r0, [r4, #0]
 8100f32:	1821      	adds	r1, r4, r0
 8100f34:	428b      	cmp	r3, r1
 8100f36:	bf01      	itttt	eq
 8100f38:	6819      	ldreq	r1, [r3, #0]
 8100f3a:	685b      	ldreq	r3, [r3, #4]
 8100f3c:	1809      	addeq	r1, r1, r0
 8100f3e:	6021      	streq	r1, [r4, #0]
 8100f40:	e7ed      	b.n	8100f1e <_free_r+0x1e>
 8100f42:	461a      	mov	r2, r3
 8100f44:	685b      	ldr	r3, [r3, #4]
 8100f46:	b10b      	cbz	r3, 8100f4c <_free_r+0x4c>
 8100f48:	42a3      	cmp	r3, r4
 8100f4a:	d9fa      	bls.n	8100f42 <_free_r+0x42>
 8100f4c:	6811      	ldr	r1, [r2, #0]
 8100f4e:	1850      	adds	r0, r2, r1
 8100f50:	42a0      	cmp	r0, r4
 8100f52:	d10b      	bne.n	8100f6c <_free_r+0x6c>
 8100f54:	6820      	ldr	r0, [r4, #0]
 8100f56:	4401      	add	r1, r0
 8100f58:	1850      	adds	r0, r2, r1
 8100f5a:	4283      	cmp	r3, r0
 8100f5c:	6011      	str	r1, [r2, #0]
 8100f5e:	d1e0      	bne.n	8100f22 <_free_r+0x22>
 8100f60:	6818      	ldr	r0, [r3, #0]
 8100f62:	685b      	ldr	r3, [r3, #4]
 8100f64:	6053      	str	r3, [r2, #4]
 8100f66:	4408      	add	r0, r1
 8100f68:	6010      	str	r0, [r2, #0]
 8100f6a:	e7da      	b.n	8100f22 <_free_r+0x22>
 8100f6c:	d902      	bls.n	8100f74 <_free_r+0x74>
 8100f6e:	230c      	movs	r3, #12
 8100f70:	602b      	str	r3, [r5, #0]
 8100f72:	e7d6      	b.n	8100f22 <_free_r+0x22>
 8100f74:	6820      	ldr	r0, [r4, #0]
 8100f76:	1821      	adds	r1, r4, r0
 8100f78:	428b      	cmp	r3, r1
 8100f7a:	bf04      	itt	eq
 8100f7c:	6819      	ldreq	r1, [r3, #0]
 8100f7e:	685b      	ldreq	r3, [r3, #4]
 8100f80:	6063      	str	r3, [r4, #4]
 8100f82:	bf04      	itt	eq
 8100f84:	1809      	addeq	r1, r1, r0
 8100f86:	6021      	streq	r1, [r4, #0]
 8100f88:	6054      	str	r4, [r2, #4]
 8100f8a:	e7ca      	b.n	8100f22 <_free_r+0x22>
 8100f8c:	bd38      	pop	{r3, r4, r5, pc}
 8100f8e:	bf00      	nop
 8100f90:	100014c0 	.word	0x100014c0

08100f94 <sbrk_aligned>:
 8100f94:	b570      	push	{r4, r5, r6, lr}
 8100f96:	4e0e      	ldr	r6, [pc, #56]	; (8100fd0 <sbrk_aligned+0x3c>)
 8100f98:	460c      	mov	r4, r1
 8100f9a:	6831      	ldr	r1, [r6, #0]
 8100f9c:	4605      	mov	r5, r0
 8100f9e:	b911      	cbnz	r1, 8100fa6 <sbrk_aligned+0x12>
 8100fa0:	f000 fcb6 	bl	8101910 <_sbrk_r>
 8100fa4:	6030      	str	r0, [r6, #0]
 8100fa6:	4621      	mov	r1, r4
 8100fa8:	4628      	mov	r0, r5
 8100faa:	f000 fcb1 	bl	8101910 <_sbrk_r>
 8100fae:	1c43      	adds	r3, r0, #1
 8100fb0:	d00a      	beq.n	8100fc8 <sbrk_aligned+0x34>
 8100fb2:	1cc4      	adds	r4, r0, #3
 8100fb4:	f024 0403 	bic.w	r4, r4, #3
 8100fb8:	42a0      	cmp	r0, r4
 8100fba:	d007      	beq.n	8100fcc <sbrk_aligned+0x38>
 8100fbc:	1a21      	subs	r1, r4, r0
 8100fbe:	4628      	mov	r0, r5
 8100fc0:	f000 fca6 	bl	8101910 <_sbrk_r>
 8100fc4:	3001      	adds	r0, #1
 8100fc6:	d101      	bne.n	8100fcc <sbrk_aligned+0x38>
 8100fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8100fcc:	4620      	mov	r0, r4
 8100fce:	bd70      	pop	{r4, r5, r6, pc}
 8100fd0:	100014c4 	.word	0x100014c4

08100fd4 <_malloc_r>:
 8100fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8100fd8:	1ccd      	adds	r5, r1, #3
 8100fda:	f025 0503 	bic.w	r5, r5, #3
 8100fde:	3508      	adds	r5, #8
 8100fe0:	2d0c      	cmp	r5, #12
 8100fe2:	bf38      	it	cc
 8100fe4:	250c      	movcc	r5, #12
 8100fe6:	2d00      	cmp	r5, #0
 8100fe8:	4607      	mov	r7, r0
 8100fea:	db01      	blt.n	8100ff0 <_malloc_r+0x1c>
 8100fec:	42a9      	cmp	r1, r5
 8100fee:	d905      	bls.n	8100ffc <_malloc_r+0x28>
 8100ff0:	230c      	movs	r3, #12
 8100ff2:	603b      	str	r3, [r7, #0]
 8100ff4:	2600      	movs	r6, #0
 8100ff6:	4630      	mov	r0, r6
 8100ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8100ffc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 81010d0 <_malloc_r+0xfc>
 8101000:	f000 f868 	bl	81010d4 <__malloc_lock>
 8101004:	f8d8 3000 	ldr.w	r3, [r8]
 8101008:	461c      	mov	r4, r3
 810100a:	bb5c      	cbnz	r4, 8101064 <_malloc_r+0x90>
 810100c:	4629      	mov	r1, r5
 810100e:	4638      	mov	r0, r7
 8101010:	f7ff ffc0 	bl	8100f94 <sbrk_aligned>
 8101014:	1c43      	adds	r3, r0, #1
 8101016:	4604      	mov	r4, r0
 8101018:	d155      	bne.n	81010c6 <_malloc_r+0xf2>
 810101a:	f8d8 4000 	ldr.w	r4, [r8]
 810101e:	4626      	mov	r6, r4
 8101020:	2e00      	cmp	r6, #0
 8101022:	d145      	bne.n	81010b0 <_malloc_r+0xdc>
 8101024:	2c00      	cmp	r4, #0
 8101026:	d048      	beq.n	81010ba <_malloc_r+0xe6>
 8101028:	6823      	ldr	r3, [r4, #0]
 810102a:	4631      	mov	r1, r6
 810102c:	4638      	mov	r0, r7
 810102e:	eb04 0903 	add.w	r9, r4, r3
 8101032:	f000 fc6d 	bl	8101910 <_sbrk_r>
 8101036:	4581      	cmp	r9, r0
 8101038:	d13f      	bne.n	81010ba <_malloc_r+0xe6>
 810103a:	6821      	ldr	r1, [r4, #0]
 810103c:	1a6d      	subs	r5, r5, r1
 810103e:	4629      	mov	r1, r5
 8101040:	4638      	mov	r0, r7
 8101042:	f7ff ffa7 	bl	8100f94 <sbrk_aligned>
 8101046:	3001      	adds	r0, #1
 8101048:	d037      	beq.n	81010ba <_malloc_r+0xe6>
 810104a:	6823      	ldr	r3, [r4, #0]
 810104c:	442b      	add	r3, r5
 810104e:	6023      	str	r3, [r4, #0]
 8101050:	f8d8 3000 	ldr.w	r3, [r8]
 8101054:	2b00      	cmp	r3, #0
 8101056:	d038      	beq.n	81010ca <_malloc_r+0xf6>
 8101058:	685a      	ldr	r2, [r3, #4]
 810105a:	42a2      	cmp	r2, r4
 810105c:	d12b      	bne.n	81010b6 <_malloc_r+0xe2>
 810105e:	2200      	movs	r2, #0
 8101060:	605a      	str	r2, [r3, #4]
 8101062:	e00f      	b.n	8101084 <_malloc_r+0xb0>
 8101064:	6822      	ldr	r2, [r4, #0]
 8101066:	1b52      	subs	r2, r2, r5
 8101068:	d41f      	bmi.n	81010aa <_malloc_r+0xd6>
 810106a:	2a0b      	cmp	r2, #11
 810106c:	d917      	bls.n	810109e <_malloc_r+0xca>
 810106e:	1961      	adds	r1, r4, r5
 8101070:	42a3      	cmp	r3, r4
 8101072:	6025      	str	r5, [r4, #0]
 8101074:	bf18      	it	ne
 8101076:	6059      	strne	r1, [r3, #4]
 8101078:	6863      	ldr	r3, [r4, #4]
 810107a:	bf08      	it	eq
 810107c:	f8c8 1000 	streq.w	r1, [r8]
 8101080:	5162      	str	r2, [r4, r5]
 8101082:	604b      	str	r3, [r1, #4]
 8101084:	4638      	mov	r0, r7
 8101086:	f104 060b 	add.w	r6, r4, #11
 810108a:	f000 f829 	bl	81010e0 <__malloc_unlock>
 810108e:	f026 0607 	bic.w	r6, r6, #7
 8101092:	1d23      	adds	r3, r4, #4
 8101094:	1af2      	subs	r2, r6, r3
 8101096:	d0ae      	beq.n	8100ff6 <_malloc_r+0x22>
 8101098:	1b9b      	subs	r3, r3, r6
 810109a:	50a3      	str	r3, [r4, r2]
 810109c:	e7ab      	b.n	8100ff6 <_malloc_r+0x22>
 810109e:	42a3      	cmp	r3, r4
 81010a0:	6862      	ldr	r2, [r4, #4]
 81010a2:	d1dd      	bne.n	8101060 <_malloc_r+0x8c>
 81010a4:	f8c8 2000 	str.w	r2, [r8]
 81010a8:	e7ec      	b.n	8101084 <_malloc_r+0xb0>
 81010aa:	4623      	mov	r3, r4
 81010ac:	6864      	ldr	r4, [r4, #4]
 81010ae:	e7ac      	b.n	810100a <_malloc_r+0x36>
 81010b0:	4634      	mov	r4, r6
 81010b2:	6876      	ldr	r6, [r6, #4]
 81010b4:	e7b4      	b.n	8101020 <_malloc_r+0x4c>
 81010b6:	4613      	mov	r3, r2
 81010b8:	e7cc      	b.n	8101054 <_malloc_r+0x80>
 81010ba:	230c      	movs	r3, #12
 81010bc:	603b      	str	r3, [r7, #0]
 81010be:	4638      	mov	r0, r7
 81010c0:	f000 f80e 	bl	81010e0 <__malloc_unlock>
 81010c4:	e797      	b.n	8100ff6 <_malloc_r+0x22>
 81010c6:	6025      	str	r5, [r4, #0]
 81010c8:	e7dc      	b.n	8101084 <_malloc_r+0xb0>
 81010ca:	605b      	str	r3, [r3, #4]
 81010cc:	deff      	udf	#255	; 0xff
 81010ce:	bf00      	nop
 81010d0:	100014c0 	.word	0x100014c0

081010d4 <__malloc_lock>:
 81010d4:	4801      	ldr	r0, [pc, #4]	; (81010dc <__malloc_lock+0x8>)
 81010d6:	f7ff bf10 	b.w	8100efa <__retarget_lock_acquire_recursive>
 81010da:	bf00      	nop
 81010dc:	100014bc 	.word	0x100014bc

081010e0 <__malloc_unlock>:
 81010e0:	4801      	ldr	r0, [pc, #4]	; (81010e8 <__malloc_unlock+0x8>)
 81010e2:	f7ff bf0b 	b.w	8100efc <__retarget_lock_release_recursive>
 81010e6:	bf00      	nop
 81010e8:	100014bc 	.word	0x100014bc

081010ec <__sfputc_r>:
 81010ec:	6893      	ldr	r3, [r2, #8]
 81010ee:	3b01      	subs	r3, #1
 81010f0:	2b00      	cmp	r3, #0
 81010f2:	b410      	push	{r4}
 81010f4:	6093      	str	r3, [r2, #8]
 81010f6:	da07      	bge.n	8101108 <__sfputc_r+0x1c>
 81010f8:	6994      	ldr	r4, [r2, #24]
 81010fa:	42a3      	cmp	r3, r4
 81010fc:	db01      	blt.n	8101102 <__sfputc_r+0x16>
 81010fe:	290a      	cmp	r1, #10
 8101100:	d102      	bne.n	8101108 <__sfputc_r+0x1c>
 8101102:	bc10      	pop	{r4}
 8101104:	f000 bb6e 	b.w	81017e4 <__swbuf_r>
 8101108:	6813      	ldr	r3, [r2, #0]
 810110a:	1c58      	adds	r0, r3, #1
 810110c:	6010      	str	r0, [r2, #0]
 810110e:	7019      	strb	r1, [r3, #0]
 8101110:	4608      	mov	r0, r1
 8101112:	bc10      	pop	{r4}
 8101114:	4770      	bx	lr

08101116 <__sfputs_r>:
 8101116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101118:	4606      	mov	r6, r0
 810111a:	460f      	mov	r7, r1
 810111c:	4614      	mov	r4, r2
 810111e:	18d5      	adds	r5, r2, r3
 8101120:	42ac      	cmp	r4, r5
 8101122:	d101      	bne.n	8101128 <__sfputs_r+0x12>
 8101124:	2000      	movs	r0, #0
 8101126:	e007      	b.n	8101138 <__sfputs_r+0x22>
 8101128:	f814 1b01 	ldrb.w	r1, [r4], #1
 810112c:	463a      	mov	r2, r7
 810112e:	4630      	mov	r0, r6
 8101130:	f7ff ffdc 	bl	81010ec <__sfputc_r>
 8101134:	1c43      	adds	r3, r0, #1
 8101136:	d1f3      	bne.n	8101120 <__sfputs_r+0xa>
 8101138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810113c <_vfiprintf_r>:
 810113c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101140:	460d      	mov	r5, r1
 8101142:	b09d      	sub	sp, #116	; 0x74
 8101144:	4614      	mov	r4, r2
 8101146:	4698      	mov	r8, r3
 8101148:	4606      	mov	r6, r0
 810114a:	b118      	cbz	r0, 8101154 <_vfiprintf_r+0x18>
 810114c:	6a03      	ldr	r3, [r0, #32]
 810114e:	b90b      	cbnz	r3, 8101154 <_vfiprintf_r+0x18>
 8101150:	f7ff fdce 	bl	8100cf0 <__sinit>
 8101154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8101156:	07d9      	lsls	r1, r3, #31
 8101158:	d405      	bmi.n	8101166 <_vfiprintf_r+0x2a>
 810115a:	89ab      	ldrh	r3, [r5, #12]
 810115c:	059a      	lsls	r2, r3, #22
 810115e:	d402      	bmi.n	8101166 <_vfiprintf_r+0x2a>
 8101160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8101162:	f7ff feca 	bl	8100efa <__retarget_lock_acquire_recursive>
 8101166:	89ab      	ldrh	r3, [r5, #12]
 8101168:	071b      	lsls	r3, r3, #28
 810116a:	d501      	bpl.n	8101170 <_vfiprintf_r+0x34>
 810116c:	692b      	ldr	r3, [r5, #16]
 810116e:	b99b      	cbnz	r3, 8101198 <_vfiprintf_r+0x5c>
 8101170:	4629      	mov	r1, r5
 8101172:	4630      	mov	r0, r6
 8101174:	f000 fb74 	bl	8101860 <__swsetup_r>
 8101178:	b170      	cbz	r0, 8101198 <_vfiprintf_r+0x5c>
 810117a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810117c:	07dc      	lsls	r4, r3, #31
 810117e:	d504      	bpl.n	810118a <_vfiprintf_r+0x4e>
 8101180:	f04f 30ff 	mov.w	r0, #4294967295
 8101184:	b01d      	add	sp, #116	; 0x74
 8101186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810118a:	89ab      	ldrh	r3, [r5, #12]
 810118c:	0598      	lsls	r0, r3, #22
 810118e:	d4f7      	bmi.n	8101180 <_vfiprintf_r+0x44>
 8101190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8101192:	f7ff feb3 	bl	8100efc <__retarget_lock_release_recursive>
 8101196:	e7f3      	b.n	8101180 <_vfiprintf_r+0x44>
 8101198:	2300      	movs	r3, #0
 810119a:	9309      	str	r3, [sp, #36]	; 0x24
 810119c:	2320      	movs	r3, #32
 810119e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81011a2:	f8cd 800c 	str.w	r8, [sp, #12]
 81011a6:	2330      	movs	r3, #48	; 0x30
 81011a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810135c <_vfiprintf_r+0x220>
 81011ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81011b0:	f04f 0901 	mov.w	r9, #1
 81011b4:	4623      	mov	r3, r4
 81011b6:	469a      	mov	sl, r3
 81011b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 81011bc:	b10a      	cbz	r2, 81011c2 <_vfiprintf_r+0x86>
 81011be:	2a25      	cmp	r2, #37	; 0x25
 81011c0:	d1f9      	bne.n	81011b6 <_vfiprintf_r+0x7a>
 81011c2:	ebba 0b04 	subs.w	fp, sl, r4
 81011c6:	d00b      	beq.n	81011e0 <_vfiprintf_r+0xa4>
 81011c8:	465b      	mov	r3, fp
 81011ca:	4622      	mov	r2, r4
 81011cc:	4629      	mov	r1, r5
 81011ce:	4630      	mov	r0, r6
 81011d0:	f7ff ffa1 	bl	8101116 <__sfputs_r>
 81011d4:	3001      	adds	r0, #1
 81011d6:	f000 80a9 	beq.w	810132c <_vfiprintf_r+0x1f0>
 81011da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81011dc:	445a      	add	r2, fp
 81011de:	9209      	str	r2, [sp, #36]	; 0x24
 81011e0:	f89a 3000 	ldrb.w	r3, [sl]
 81011e4:	2b00      	cmp	r3, #0
 81011e6:	f000 80a1 	beq.w	810132c <_vfiprintf_r+0x1f0>
 81011ea:	2300      	movs	r3, #0
 81011ec:	f04f 32ff 	mov.w	r2, #4294967295
 81011f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81011f4:	f10a 0a01 	add.w	sl, sl, #1
 81011f8:	9304      	str	r3, [sp, #16]
 81011fa:	9307      	str	r3, [sp, #28]
 81011fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8101200:	931a      	str	r3, [sp, #104]	; 0x68
 8101202:	4654      	mov	r4, sl
 8101204:	2205      	movs	r2, #5
 8101206:	f814 1b01 	ldrb.w	r1, [r4], #1
 810120a:	4854      	ldr	r0, [pc, #336]	; (810135c <_vfiprintf_r+0x220>)
 810120c:	f7ff f868 	bl	81002e0 <memchr>
 8101210:	9a04      	ldr	r2, [sp, #16]
 8101212:	b9d8      	cbnz	r0, 810124c <_vfiprintf_r+0x110>
 8101214:	06d1      	lsls	r1, r2, #27
 8101216:	bf44      	itt	mi
 8101218:	2320      	movmi	r3, #32
 810121a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810121e:	0713      	lsls	r3, r2, #28
 8101220:	bf44      	itt	mi
 8101222:	232b      	movmi	r3, #43	; 0x2b
 8101224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8101228:	f89a 3000 	ldrb.w	r3, [sl]
 810122c:	2b2a      	cmp	r3, #42	; 0x2a
 810122e:	d015      	beq.n	810125c <_vfiprintf_r+0x120>
 8101230:	9a07      	ldr	r2, [sp, #28]
 8101232:	4654      	mov	r4, sl
 8101234:	2000      	movs	r0, #0
 8101236:	f04f 0c0a 	mov.w	ip, #10
 810123a:	4621      	mov	r1, r4
 810123c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8101240:	3b30      	subs	r3, #48	; 0x30
 8101242:	2b09      	cmp	r3, #9
 8101244:	d94d      	bls.n	81012e2 <_vfiprintf_r+0x1a6>
 8101246:	b1b0      	cbz	r0, 8101276 <_vfiprintf_r+0x13a>
 8101248:	9207      	str	r2, [sp, #28]
 810124a:	e014      	b.n	8101276 <_vfiprintf_r+0x13a>
 810124c:	eba0 0308 	sub.w	r3, r0, r8
 8101250:	fa09 f303 	lsl.w	r3, r9, r3
 8101254:	4313      	orrs	r3, r2
 8101256:	9304      	str	r3, [sp, #16]
 8101258:	46a2      	mov	sl, r4
 810125a:	e7d2      	b.n	8101202 <_vfiprintf_r+0xc6>
 810125c:	9b03      	ldr	r3, [sp, #12]
 810125e:	1d19      	adds	r1, r3, #4
 8101260:	681b      	ldr	r3, [r3, #0]
 8101262:	9103      	str	r1, [sp, #12]
 8101264:	2b00      	cmp	r3, #0
 8101266:	bfbb      	ittet	lt
 8101268:	425b      	neglt	r3, r3
 810126a:	f042 0202 	orrlt.w	r2, r2, #2
 810126e:	9307      	strge	r3, [sp, #28]
 8101270:	9307      	strlt	r3, [sp, #28]
 8101272:	bfb8      	it	lt
 8101274:	9204      	strlt	r2, [sp, #16]
 8101276:	7823      	ldrb	r3, [r4, #0]
 8101278:	2b2e      	cmp	r3, #46	; 0x2e
 810127a:	d10c      	bne.n	8101296 <_vfiprintf_r+0x15a>
 810127c:	7863      	ldrb	r3, [r4, #1]
 810127e:	2b2a      	cmp	r3, #42	; 0x2a
 8101280:	d134      	bne.n	81012ec <_vfiprintf_r+0x1b0>
 8101282:	9b03      	ldr	r3, [sp, #12]
 8101284:	1d1a      	adds	r2, r3, #4
 8101286:	681b      	ldr	r3, [r3, #0]
 8101288:	9203      	str	r2, [sp, #12]
 810128a:	2b00      	cmp	r3, #0
 810128c:	bfb8      	it	lt
 810128e:	f04f 33ff 	movlt.w	r3, #4294967295
 8101292:	3402      	adds	r4, #2
 8101294:	9305      	str	r3, [sp, #20]
 8101296:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8101360 <_vfiprintf_r+0x224>
 810129a:	7821      	ldrb	r1, [r4, #0]
 810129c:	2203      	movs	r2, #3
 810129e:	4650      	mov	r0, sl
 81012a0:	f7ff f81e 	bl	81002e0 <memchr>
 81012a4:	b138      	cbz	r0, 81012b6 <_vfiprintf_r+0x17a>
 81012a6:	9b04      	ldr	r3, [sp, #16]
 81012a8:	eba0 000a 	sub.w	r0, r0, sl
 81012ac:	2240      	movs	r2, #64	; 0x40
 81012ae:	4082      	lsls	r2, r0
 81012b0:	4313      	orrs	r3, r2
 81012b2:	3401      	adds	r4, #1
 81012b4:	9304      	str	r3, [sp, #16]
 81012b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 81012ba:	482a      	ldr	r0, [pc, #168]	; (8101364 <_vfiprintf_r+0x228>)
 81012bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81012c0:	2206      	movs	r2, #6
 81012c2:	f7ff f80d 	bl	81002e0 <memchr>
 81012c6:	2800      	cmp	r0, #0
 81012c8:	d03f      	beq.n	810134a <_vfiprintf_r+0x20e>
 81012ca:	4b27      	ldr	r3, [pc, #156]	; (8101368 <_vfiprintf_r+0x22c>)
 81012cc:	bb1b      	cbnz	r3, 8101316 <_vfiprintf_r+0x1da>
 81012ce:	9b03      	ldr	r3, [sp, #12]
 81012d0:	3307      	adds	r3, #7
 81012d2:	f023 0307 	bic.w	r3, r3, #7
 81012d6:	3308      	adds	r3, #8
 81012d8:	9303      	str	r3, [sp, #12]
 81012da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81012dc:	443b      	add	r3, r7
 81012de:	9309      	str	r3, [sp, #36]	; 0x24
 81012e0:	e768      	b.n	81011b4 <_vfiprintf_r+0x78>
 81012e2:	fb0c 3202 	mla	r2, ip, r2, r3
 81012e6:	460c      	mov	r4, r1
 81012e8:	2001      	movs	r0, #1
 81012ea:	e7a6      	b.n	810123a <_vfiprintf_r+0xfe>
 81012ec:	2300      	movs	r3, #0
 81012ee:	3401      	adds	r4, #1
 81012f0:	9305      	str	r3, [sp, #20]
 81012f2:	4619      	mov	r1, r3
 81012f4:	f04f 0c0a 	mov.w	ip, #10
 81012f8:	4620      	mov	r0, r4
 81012fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 81012fe:	3a30      	subs	r2, #48	; 0x30
 8101300:	2a09      	cmp	r2, #9
 8101302:	d903      	bls.n	810130c <_vfiprintf_r+0x1d0>
 8101304:	2b00      	cmp	r3, #0
 8101306:	d0c6      	beq.n	8101296 <_vfiprintf_r+0x15a>
 8101308:	9105      	str	r1, [sp, #20]
 810130a:	e7c4      	b.n	8101296 <_vfiprintf_r+0x15a>
 810130c:	fb0c 2101 	mla	r1, ip, r1, r2
 8101310:	4604      	mov	r4, r0
 8101312:	2301      	movs	r3, #1
 8101314:	e7f0      	b.n	81012f8 <_vfiprintf_r+0x1bc>
 8101316:	ab03      	add	r3, sp, #12
 8101318:	9300      	str	r3, [sp, #0]
 810131a:	462a      	mov	r2, r5
 810131c:	4b13      	ldr	r3, [pc, #76]	; (810136c <_vfiprintf_r+0x230>)
 810131e:	a904      	add	r1, sp, #16
 8101320:	4630      	mov	r0, r6
 8101322:	f3af 8000 	nop.w
 8101326:	4607      	mov	r7, r0
 8101328:	1c78      	adds	r0, r7, #1
 810132a:	d1d6      	bne.n	81012da <_vfiprintf_r+0x19e>
 810132c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810132e:	07d9      	lsls	r1, r3, #31
 8101330:	d405      	bmi.n	810133e <_vfiprintf_r+0x202>
 8101332:	89ab      	ldrh	r3, [r5, #12]
 8101334:	059a      	lsls	r2, r3, #22
 8101336:	d402      	bmi.n	810133e <_vfiprintf_r+0x202>
 8101338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810133a:	f7ff fddf 	bl	8100efc <__retarget_lock_release_recursive>
 810133e:	89ab      	ldrh	r3, [r5, #12]
 8101340:	065b      	lsls	r3, r3, #25
 8101342:	f53f af1d 	bmi.w	8101180 <_vfiprintf_r+0x44>
 8101346:	9809      	ldr	r0, [sp, #36]	; 0x24
 8101348:	e71c      	b.n	8101184 <_vfiprintf_r+0x48>
 810134a:	ab03      	add	r3, sp, #12
 810134c:	9300      	str	r3, [sp, #0]
 810134e:	462a      	mov	r2, r5
 8101350:	4b06      	ldr	r3, [pc, #24]	; (810136c <_vfiprintf_r+0x230>)
 8101352:	a904      	add	r1, sp, #16
 8101354:	4630      	mov	r0, r6
 8101356:	f000 f879 	bl	810144c <_printf_i>
 810135a:	e7e4      	b.n	8101326 <_vfiprintf_r+0x1ea>
 810135c:	08101a89 	.word	0x08101a89
 8101360:	08101a8f 	.word	0x08101a8f
 8101364:	08101a93 	.word	0x08101a93
 8101368:	00000000 	.word	0x00000000
 810136c:	08101117 	.word	0x08101117

08101370 <_printf_common>:
 8101370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8101374:	4616      	mov	r6, r2
 8101376:	4699      	mov	r9, r3
 8101378:	688a      	ldr	r2, [r1, #8]
 810137a:	690b      	ldr	r3, [r1, #16]
 810137c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8101380:	4293      	cmp	r3, r2
 8101382:	bfb8      	it	lt
 8101384:	4613      	movlt	r3, r2
 8101386:	6033      	str	r3, [r6, #0]
 8101388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810138c:	4607      	mov	r7, r0
 810138e:	460c      	mov	r4, r1
 8101390:	b10a      	cbz	r2, 8101396 <_printf_common+0x26>
 8101392:	3301      	adds	r3, #1
 8101394:	6033      	str	r3, [r6, #0]
 8101396:	6823      	ldr	r3, [r4, #0]
 8101398:	0699      	lsls	r1, r3, #26
 810139a:	bf42      	ittt	mi
 810139c:	6833      	ldrmi	r3, [r6, #0]
 810139e:	3302      	addmi	r3, #2
 81013a0:	6033      	strmi	r3, [r6, #0]
 81013a2:	6825      	ldr	r5, [r4, #0]
 81013a4:	f015 0506 	ands.w	r5, r5, #6
 81013a8:	d106      	bne.n	81013b8 <_printf_common+0x48>
 81013aa:	f104 0a19 	add.w	sl, r4, #25
 81013ae:	68e3      	ldr	r3, [r4, #12]
 81013b0:	6832      	ldr	r2, [r6, #0]
 81013b2:	1a9b      	subs	r3, r3, r2
 81013b4:	42ab      	cmp	r3, r5
 81013b6:	dc26      	bgt.n	8101406 <_printf_common+0x96>
 81013b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81013bc:	1e13      	subs	r3, r2, #0
 81013be:	6822      	ldr	r2, [r4, #0]
 81013c0:	bf18      	it	ne
 81013c2:	2301      	movne	r3, #1
 81013c4:	0692      	lsls	r2, r2, #26
 81013c6:	d42b      	bmi.n	8101420 <_printf_common+0xb0>
 81013c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81013cc:	4649      	mov	r1, r9
 81013ce:	4638      	mov	r0, r7
 81013d0:	47c0      	blx	r8
 81013d2:	3001      	adds	r0, #1
 81013d4:	d01e      	beq.n	8101414 <_printf_common+0xa4>
 81013d6:	6823      	ldr	r3, [r4, #0]
 81013d8:	6922      	ldr	r2, [r4, #16]
 81013da:	f003 0306 	and.w	r3, r3, #6
 81013de:	2b04      	cmp	r3, #4
 81013e0:	bf02      	ittt	eq
 81013e2:	68e5      	ldreq	r5, [r4, #12]
 81013e4:	6833      	ldreq	r3, [r6, #0]
 81013e6:	1aed      	subeq	r5, r5, r3
 81013e8:	68a3      	ldr	r3, [r4, #8]
 81013ea:	bf0c      	ite	eq
 81013ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81013f0:	2500      	movne	r5, #0
 81013f2:	4293      	cmp	r3, r2
 81013f4:	bfc4      	itt	gt
 81013f6:	1a9b      	subgt	r3, r3, r2
 81013f8:	18ed      	addgt	r5, r5, r3
 81013fa:	2600      	movs	r6, #0
 81013fc:	341a      	adds	r4, #26
 81013fe:	42b5      	cmp	r5, r6
 8101400:	d11a      	bne.n	8101438 <_printf_common+0xc8>
 8101402:	2000      	movs	r0, #0
 8101404:	e008      	b.n	8101418 <_printf_common+0xa8>
 8101406:	2301      	movs	r3, #1
 8101408:	4652      	mov	r2, sl
 810140a:	4649      	mov	r1, r9
 810140c:	4638      	mov	r0, r7
 810140e:	47c0      	blx	r8
 8101410:	3001      	adds	r0, #1
 8101412:	d103      	bne.n	810141c <_printf_common+0xac>
 8101414:	f04f 30ff 	mov.w	r0, #4294967295
 8101418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810141c:	3501      	adds	r5, #1
 810141e:	e7c6      	b.n	81013ae <_printf_common+0x3e>
 8101420:	18e1      	adds	r1, r4, r3
 8101422:	1c5a      	adds	r2, r3, #1
 8101424:	2030      	movs	r0, #48	; 0x30
 8101426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810142a:	4422      	add	r2, r4
 810142c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8101430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8101434:	3302      	adds	r3, #2
 8101436:	e7c7      	b.n	81013c8 <_printf_common+0x58>
 8101438:	2301      	movs	r3, #1
 810143a:	4622      	mov	r2, r4
 810143c:	4649      	mov	r1, r9
 810143e:	4638      	mov	r0, r7
 8101440:	47c0      	blx	r8
 8101442:	3001      	adds	r0, #1
 8101444:	d0e6      	beq.n	8101414 <_printf_common+0xa4>
 8101446:	3601      	adds	r6, #1
 8101448:	e7d9      	b.n	81013fe <_printf_common+0x8e>
	...

0810144c <_printf_i>:
 810144c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8101450:	7e0f      	ldrb	r7, [r1, #24]
 8101452:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8101454:	2f78      	cmp	r7, #120	; 0x78
 8101456:	4691      	mov	r9, r2
 8101458:	4680      	mov	r8, r0
 810145a:	460c      	mov	r4, r1
 810145c:	469a      	mov	sl, r3
 810145e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8101462:	d807      	bhi.n	8101474 <_printf_i+0x28>
 8101464:	2f62      	cmp	r7, #98	; 0x62
 8101466:	d80a      	bhi.n	810147e <_printf_i+0x32>
 8101468:	2f00      	cmp	r7, #0
 810146a:	f000 80d4 	beq.w	8101616 <_printf_i+0x1ca>
 810146e:	2f58      	cmp	r7, #88	; 0x58
 8101470:	f000 80c0 	beq.w	81015f4 <_printf_i+0x1a8>
 8101474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8101478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810147c:	e03a      	b.n	81014f4 <_printf_i+0xa8>
 810147e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8101482:	2b15      	cmp	r3, #21
 8101484:	d8f6      	bhi.n	8101474 <_printf_i+0x28>
 8101486:	a101      	add	r1, pc, #4	; (adr r1, 810148c <_printf_i+0x40>)
 8101488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810148c:	081014e5 	.word	0x081014e5
 8101490:	081014f9 	.word	0x081014f9
 8101494:	08101475 	.word	0x08101475
 8101498:	08101475 	.word	0x08101475
 810149c:	08101475 	.word	0x08101475
 81014a0:	08101475 	.word	0x08101475
 81014a4:	081014f9 	.word	0x081014f9
 81014a8:	08101475 	.word	0x08101475
 81014ac:	08101475 	.word	0x08101475
 81014b0:	08101475 	.word	0x08101475
 81014b4:	08101475 	.word	0x08101475
 81014b8:	081015fd 	.word	0x081015fd
 81014bc:	08101525 	.word	0x08101525
 81014c0:	081015b7 	.word	0x081015b7
 81014c4:	08101475 	.word	0x08101475
 81014c8:	08101475 	.word	0x08101475
 81014cc:	0810161f 	.word	0x0810161f
 81014d0:	08101475 	.word	0x08101475
 81014d4:	08101525 	.word	0x08101525
 81014d8:	08101475 	.word	0x08101475
 81014dc:	08101475 	.word	0x08101475
 81014e0:	081015bf 	.word	0x081015bf
 81014e4:	682b      	ldr	r3, [r5, #0]
 81014e6:	1d1a      	adds	r2, r3, #4
 81014e8:	681b      	ldr	r3, [r3, #0]
 81014ea:	602a      	str	r2, [r5, #0]
 81014ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81014f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81014f4:	2301      	movs	r3, #1
 81014f6:	e09f      	b.n	8101638 <_printf_i+0x1ec>
 81014f8:	6820      	ldr	r0, [r4, #0]
 81014fa:	682b      	ldr	r3, [r5, #0]
 81014fc:	0607      	lsls	r7, r0, #24
 81014fe:	f103 0104 	add.w	r1, r3, #4
 8101502:	6029      	str	r1, [r5, #0]
 8101504:	d501      	bpl.n	810150a <_printf_i+0xbe>
 8101506:	681e      	ldr	r6, [r3, #0]
 8101508:	e003      	b.n	8101512 <_printf_i+0xc6>
 810150a:	0646      	lsls	r6, r0, #25
 810150c:	d5fb      	bpl.n	8101506 <_printf_i+0xba>
 810150e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8101512:	2e00      	cmp	r6, #0
 8101514:	da03      	bge.n	810151e <_printf_i+0xd2>
 8101516:	232d      	movs	r3, #45	; 0x2d
 8101518:	4276      	negs	r6, r6
 810151a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810151e:	485a      	ldr	r0, [pc, #360]	; (8101688 <_printf_i+0x23c>)
 8101520:	230a      	movs	r3, #10
 8101522:	e012      	b.n	810154a <_printf_i+0xfe>
 8101524:	682b      	ldr	r3, [r5, #0]
 8101526:	6820      	ldr	r0, [r4, #0]
 8101528:	1d19      	adds	r1, r3, #4
 810152a:	6029      	str	r1, [r5, #0]
 810152c:	0605      	lsls	r5, r0, #24
 810152e:	d501      	bpl.n	8101534 <_printf_i+0xe8>
 8101530:	681e      	ldr	r6, [r3, #0]
 8101532:	e002      	b.n	810153a <_printf_i+0xee>
 8101534:	0641      	lsls	r1, r0, #25
 8101536:	d5fb      	bpl.n	8101530 <_printf_i+0xe4>
 8101538:	881e      	ldrh	r6, [r3, #0]
 810153a:	4853      	ldr	r0, [pc, #332]	; (8101688 <_printf_i+0x23c>)
 810153c:	2f6f      	cmp	r7, #111	; 0x6f
 810153e:	bf0c      	ite	eq
 8101540:	2308      	moveq	r3, #8
 8101542:	230a      	movne	r3, #10
 8101544:	2100      	movs	r1, #0
 8101546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810154a:	6865      	ldr	r5, [r4, #4]
 810154c:	60a5      	str	r5, [r4, #8]
 810154e:	2d00      	cmp	r5, #0
 8101550:	bfa2      	ittt	ge
 8101552:	6821      	ldrge	r1, [r4, #0]
 8101554:	f021 0104 	bicge.w	r1, r1, #4
 8101558:	6021      	strge	r1, [r4, #0]
 810155a:	b90e      	cbnz	r6, 8101560 <_printf_i+0x114>
 810155c:	2d00      	cmp	r5, #0
 810155e:	d04b      	beq.n	81015f8 <_printf_i+0x1ac>
 8101560:	4615      	mov	r5, r2
 8101562:	fbb6 f1f3 	udiv	r1, r6, r3
 8101566:	fb03 6711 	mls	r7, r3, r1, r6
 810156a:	5dc7      	ldrb	r7, [r0, r7]
 810156c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8101570:	4637      	mov	r7, r6
 8101572:	42bb      	cmp	r3, r7
 8101574:	460e      	mov	r6, r1
 8101576:	d9f4      	bls.n	8101562 <_printf_i+0x116>
 8101578:	2b08      	cmp	r3, #8
 810157a:	d10b      	bne.n	8101594 <_printf_i+0x148>
 810157c:	6823      	ldr	r3, [r4, #0]
 810157e:	07de      	lsls	r6, r3, #31
 8101580:	d508      	bpl.n	8101594 <_printf_i+0x148>
 8101582:	6923      	ldr	r3, [r4, #16]
 8101584:	6861      	ldr	r1, [r4, #4]
 8101586:	4299      	cmp	r1, r3
 8101588:	bfde      	ittt	le
 810158a:	2330      	movle	r3, #48	; 0x30
 810158c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8101590:	f105 35ff 	addle.w	r5, r5, #4294967295
 8101594:	1b52      	subs	r2, r2, r5
 8101596:	6122      	str	r2, [r4, #16]
 8101598:	f8cd a000 	str.w	sl, [sp]
 810159c:	464b      	mov	r3, r9
 810159e:	aa03      	add	r2, sp, #12
 81015a0:	4621      	mov	r1, r4
 81015a2:	4640      	mov	r0, r8
 81015a4:	f7ff fee4 	bl	8101370 <_printf_common>
 81015a8:	3001      	adds	r0, #1
 81015aa:	d14a      	bne.n	8101642 <_printf_i+0x1f6>
 81015ac:	f04f 30ff 	mov.w	r0, #4294967295
 81015b0:	b004      	add	sp, #16
 81015b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81015b6:	6823      	ldr	r3, [r4, #0]
 81015b8:	f043 0320 	orr.w	r3, r3, #32
 81015bc:	6023      	str	r3, [r4, #0]
 81015be:	4833      	ldr	r0, [pc, #204]	; (810168c <_printf_i+0x240>)
 81015c0:	2778      	movs	r7, #120	; 0x78
 81015c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81015c6:	6823      	ldr	r3, [r4, #0]
 81015c8:	6829      	ldr	r1, [r5, #0]
 81015ca:	061f      	lsls	r7, r3, #24
 81015cc:	f851 6b04 	ldr.w	r6, [r1], #4
 81015d0:	d402      	bmi.n	81015d8 <_printf_i+0x18c>
 81015d2:	065f      	lsls	r7, r3, #25
 81015d4:	bf48      	it	mi
 81015d6:	b2b6      	uxthmi	r6, r6
 81015d8:	07df      	lsls	r7, r3, #31
 81015da:	bf48      	it	mi
 81015dc:	f043 0320 	orrmi.w	r3, r3, #32
 81015e0:	6029      	str	r1, [r5, #0]
 81015e2:	bf48      	it	mi
 81015e4:	6023      	strmi	r3, [r4, #0]
 81015e6:	b91e      	cbnz	r6, 81015f0 <_printf_i+0x1a4>
 81015e8:	6823      	ldr	r3, [r4, #0]
 81015ea:	f023 0320 	bic.w	r3, r3, #32
 81015ee:	6023      	str	r3, [r4, #0]
 81015f0:	2310      	movs	r3, #16
 81015f2:	e7a7      	b.n	8101544 <_printf_i+0xf8>
 81015f4:	4824      	ldr	r0, [pc, #144]	; (8101688 <_printf_i+0x23c>)
 81015f6:	e7e4      	b.n	81015c2 <_printf_i+0x176>
 81015f8:	4615      	mov	r5, r2
 81015fa:	e7bd      	b.n	8101578 <_printf_i+0x12c>
 81015fc:	682b      	ldr	r3, [r5, #0]
 81015fe:	6826      	ldr	r6, [r4, #0]
 8101600:	6961      	ldr	r1, [r4, #20]
 8101602:	1d18      	adds	r0, r3, #4
 8101604:	6028      	str	r0, [r5, #0]
 8101606:	0635      	lsls	r5, r6, #24
 8101608:	681b      	ldr	r3, [r3, #0]
 810160a:	d501      	bpl.n	8101610 <_printf_i+0x1c4>
 810160c:	6019      	str	r1, [r3, #0]
 810160e:	e002      	b.n	8101616 <_printf_i+0x1ca>
 8101610:	0670      	lsls	r0, r6, #25
 8101612:	d5fb      	bpl.n	810160c <_printf_i+0x1c0>
 8101614:	8019      	strh	r1, [r3, #0]
 8101616:	2300      	movs	r3, #0
 8101618:	6123      	str	r3, [r4, #16]
 810161a:	4615      	mov	r5, r2
 810161c:	e7bc      	b.n	8101598 <_printf_i+0x14c>
 810161e:	682b      	ldr	r3, [r5, #0]
 8101620:	1d1a      	adds	r2, r3, #4
 8101622:	602a      	str	r2, [r5, #0]
 8101624:	681d      	ldr	r5, [r3, #0]
 8101626:	6862      	ldr	r2, [r4, #4]
 8101628:	2100      	movs	r1, #0
 810162a:	4628      	mov	r0, r5
 810162c:	f7fe fe58 	bl	81002e0 <memchr>
 8101630:	b108      	cbz	r0, 8101636 <_printf_i+0x1ea>
 8101632:	1b40      	subs	r0, r0, r5
 8101634:	6060      	str	r0, [r4, #4]
 8101636:	6863      	ldr	r3, [r4, #4]
 8101638:	6123      	str	r3, [r4, #16]
 810163a:	2300      	movs	r3, #0
 810163c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8101640:	e7aa      	b.n	8101598 <_printf_i+0x14c>
 8101642:	6923      	ldr	r3, [r4, #16]
 8101644:	462a      	mov	r2, r5
 8101646:	4649      	mov	r1, r9
 8101648:	4640      	mov	r0, r8
 810164a:	47d0      	blx	sl
 810164c:	3001      	adds	r0, #1
 810164e:	d0ad      	beq.n	81015ac <_printf_i+0x160>
 8101650:	6823      	ldr	r3, [r4, #0]
 8101652:	079b      	lsls	r3, r3, #30
 8101654:	d413      	bmi.n	810167e <_printf_i+0x232>
 8101656:	68e0      	ldr	r0, [r4, #12]
 8101658:	9b03      	ldr	r3, [sp, #12]
 810165a:	4298      	cmp	r0, r3
 810165c:	bfb8      	it	lt
 810165e:	4618      	movlt	r0, r3
 8101660:	e7a6      	b.n	81015b0 <_printf_i+0x164>
 8101662:	2301      	movs	r3, #1
 8101664:	4632      	mov	r2, r6
 8101666:	4649      	mov	r1, r9
 8101668:	4640      	mov	r0, r8
 810166a:	47d0      	blx	sl
 810166c:	3001      	adds	r0, #1
 810166e:	d09d      	beq.n	81015ac <_printf_i+0x160>
 8101670:	3501      	adds	r5, #1
 8101672:	68e3      	ldr	r3, [r4, #12]
 8101674:	9903      	ldr	r1, [sp, #12]
 8101676:	1a5b      	subs	r3, r3, r1
 8101678:	42ab      	cmp	r3, r5
 810167a:	dcf2      	bgt.n	8101662 <_printf_i+0x216>
 810167c:	e7eb      	b.n	8101656 <_printf_i+0x20a>
 810167e:	2500      	movs	r5, #0
 8101680:	f104 0619 	add.w	r6, r4, #25
 8101684:	e7f5      	b.n	8101672 <_printf_i+0x226>
 8101686:	bf00      	nop
 8101688:	08101a9a 	.word	0x08101a9a
 810168c:	08101aab 	.word	0x08101aab

08101690 <__sflush_r>:
 8101690:	898a      	ldrh	r2, [r1, #12]
 8101692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101694:	4605      	mov	r5, r0
 8101696:	0710      	lsls	r0, r2, #28
 8101698:	460c      	mov	r4, r1
 810169a:	d457      	bmi.n	810174c <__sflush_r+0xbc>
 810169c:	684b      	ldr	r3, [r1, #4]
 810169e:	2b00      	cmp	r3, #0
 81016a0:	dc04      	bgt.n	81016ac <__sflush_r+0x1c>
 81016a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81016a4:	2b00      	cmp	r3, #0
 81016a6:	dc01      	bgt.n	81016ac <__sflush_r+0x1c>
 81016a8:	2000      	movs	r0, #0
 81016aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81016ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81016ae:	2e00      	cmp	r6, #0
 81016b0:	d0fa      	beq.n	81016a8 <__sflush_r+0x18>
 81016b2:	2300      	movs	r3, #0
 81016b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81016b8:	682f      	ldr	r7, [r5, #0]
 81016ba:	6a21      	ldr	r1, [r4, #32]
 81016bc:	602b      	str	r3, [r5, #0]
 81016be:	d032      	beq.n	8101726 <__sflush_r+0x96>
 81016c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81016c2:	89a3      	ldrh	r3, [r4, #12]
 81016c4:	075a      	lsls	r2, r3, #29
 81016c6:	d505      	bpl.n	81016d4 <__sflush_r+0x44>
 81016c8:	6863      	ldr	r3, [r4, #4]
 81016ca:	1ac0      	subs	r0, r0, r3
 81016cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81016ce:	b10b      	cbz	r3, 81016d4 <__sflush_r+0x44>
 81016d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81016d2:	1ac0      	subs	r0, r0, r3
 81016d4:	2300      	movs	r3, #0
 81016d6:	4602      	mov	r2, r0
 81016d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81016da:	6a21      	ldr	r1, [r4, #32]
 81016dc:	4628      	mov	r0, r5
 81016de:	47b0      	blx	r6
 81016e0:	1c43      	adds	r3, r0, #1
 81016e2:	89a3      	ldrh	r3, [r4, #12]
 81016e4:	d106      	bne.n	81016f4 <__sflush_r+0x64>
 81016e6:	6829      	ldr	r1, [r5, #0]
 81016e8:	291d      	cmp	r1, #29
 81016ea:	d82b      	bhi.n	8101744 <__sflush_r+0xb4>
 81016ec:	4a28      	ldr	r2, [pc, #160]	; (8101790 <__sflush_r+0x100>)
 81016ee:	410a      	asrs	r2, r1
 81016f0:	07d6      	lsls	r6, r2, #31
 81016f2:	d427      	bmi.n	8101744 <__sflush_r+0xb4>
 81016f4:	2200      	movs	r2, #0
 81016f6:	6062      	str	r2, [r4, #4]
 81016f8:	04d9      	lsls	r1, r3, #19
 81016fa:	6922      	ldr	r2, [r4, #16]
 81016fc:	6022      	str	r2, [r4, #0]
 81016fe:	d504      	bpl.n	810170a <__sflush_r+0x7a>
 8101700:	1c42      	adds	r2, r0, #1
 8101702:	d101      	bne.n	8101708 <__sflush_r+0x78>
 8101704:	682b      	ldr	r3, [r5, #0]
 8101706:	b903      	cbnz	r3, 810170a <__sflush_r+0x7a>
 8101708:	6560      	str	r0, [r4, #84]	; 0x54
 810170a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810170c:	602f      	str	r7, [r5, #0]
 810170e:	2900      	cmp	r1, #0
 8101710:	d0ca      	beq.n	81016a8 <__sflush_r+0x18>
 8101712:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8101716:	4299      	cmp	r1, r3
 8101718:	d002      	beq.n	8101720 <__sflush_r+0x90>
 810171a:	4628      	mov	r0, r5
 810171c:	f7ff fbf0 	bl	8100f00 <_free_r>
 8101720:	2000      	movs	r0, #0
 8101722:	6360      	str	r0, [r4, #52]	; 0x34
 8101724:	e7c1      	b.n	81016aa <__sflush_r+0x1a>
 8101726:	2301      	movs	r3, #1
 8101728:	4628      	mov	r0, r5
 810172a:	47b0      	blx	r6
 810172c:	1c41      	adds	r1, r0, #1
 810172e:	d1c8      	bne.n	81016c2 <__sflush_r+0x32>
 8101730:	682b      	ldr	r3, [r5, #0]
 8101732:	2b00      	cmp	r3, #0
 8101734:	d0c5      	beq.n	81016c2 <__sflush_r+0x32>
 8101736:	2b1d      	cmp	r3, #29
 8101738:	d001      	beq.n	810173e <__sflush_r+0xae>
 810173a:	2b16      	cmp	r3, #22
 810173c:	d101      	bne.n	8101742 <__sflush_r+0xb2>
 810173e:	602f      	str	r7, [r5, #0]
 8101740:	e7b2      	b.n	81016a8 <__sflush_r+0x18>
 8101742:	89a3      	ldrh	r3, [r4, #12]
 8101744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101748:	81a3      	strh	r3, [r4, #12]
 810174a:	e7ae      	b.n	81016aa <__sflush_r+0x1a>
 810174c:	690f      	ldr	r7, [r1, #16]
 810174e:	2f00      	cmp	r7, #0
 8101750:	d0aa      	beq.n	81016a8 <__sflush_r+0x18>
 8101752:	0793      	lsls	r3, r2, #30
 8101754:	680e      	ldr	r6, [r1, #0]
 8101756:	bf08      	it	eq
 8101758:	694b      	ldreq	r3, [r1, #20]
 810175a:	600f      	str	r7, [r1, #0]
 810175c:	bf18      	it	ne
 810175e:	2300      	movne	r3, #0
 8101760:	1bf6      	subs	r6, r6, r7
 8101762:	608b      	str	r3, [r1, #8]
 8101764:	2e00      	cmp	r6, #0
 8101766:	dd9f      	ble.n	81016a8 <__sflush_r+0x18>
 8101768:	6a21      	ldr	r1, [r4, #32]
 810176a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 810176e:	4633      	mov	r3, r6
 8101770:	463a      	mov	r2, r7
 8101772:	4628      	mov	r0, r5
 8101774:	47e0      	blx	ip
 8101776:	2800      	cmp	r0, #0
 8101778:	dc06      	bgt.n	8101788 <__sflush_r+0xf8>
 810177a:	89a3      	ldrh	r3, [r4, #12]
 810177c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101780:	81a3      	strh	r3, [r4, #12]
 8101782:	f04f 30ff 	mov.w	r0, #4294967295
 8101786:	e790      	b.n	81016aa <__sflush_r+0x1a>
 8101788:	4407      	add	r7, r0
 810178a:	1a36      	subs	r6, r6, r0
 810178c:	e7ea      	b.n	8101764 <__sflush_r+0xd4>
 810178e:	bf00      	nop
 8101790:	dfbffffe 	.word	0xdfbffffe

08101794 <_fflush_r>:
 8101794:	b538      	push	{r3, r4, r5, lr}
 8101796:	690b      	ldr	r3, [r1, #16]
 8101798:	4605      	mov	r5, r0
 810179a:	460c      	mov	r4, r1
 810179c:	b913      	cbnz	r3, 81017a4 <_fflush_r+0x10>
 810179e:	2500      	movs	r5, #0
 81017a0:	4628      	mov	r0, r5
 81017a2:	bd38      	pop	{r3, r4, r5, pc}
 81017a4:	b118      	cbz	r0, 81017ae <_fflush_r+0x1a>
 81017a6:	6a03      	ldr	r3, [r0, #32]
 81017a8:	b90b      	cbnz	r3, 81017ae <_fflush_r+0x1a>
 81017aa:	f7ff faa1 	bl	8100cf0 <__sinit>
 81017ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81017b2:	2b00      	cmp	r3, #0
 81017b4:	d0f3      	beq.n	810179e <_fflush_r+0xa>
 81017b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81017b8:	07d0      	lsls	r0, r2, #31
 81017ba:	d404      	bmi.n	81017c6 <_fflush_r+0x32>
 81017bc:	0599      	lsls	r1, r3, #22
 81017be:	d402      	bmi.n	81017c6 <_fflush_r+0x32>
 81017c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81017c2:	f7ff fb9a 	bl	8100efa <__retarget_lock_acquire_recursive>
 81017c6:	4628      	mov	r0, r5
 81017c8:	4621      	mov	r1, r4
 81017ca:	f7ff ff61 	bl	8101690 <__sflush_r>
 81017ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81017d0:	07da      	lsls	r2, r3, #31
 81017d2:	4605      	mov	r5, r0
 81017d4:	d4e4      	bmi.n	81017a0 <_fflush_r+0xc>
 81017d6:	89a3      	ldrh	r3, [r4, #12]
 81017d8:	059b      	lsls	r3, r3, #22
 81017da:	d4e1      	bmi.n	81017a0 <_fflush_r+0xc>
 81017dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81017de:	f7ff fb8d 	bl	8100efc <__retarget_lock_release_recursive>
 81017e2:	e7dd      	b.n	81017a0 <_fflush_r+0xc>

081017e4 <__swbuf_r>:
 81017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81017e6:	460e      	mov	r6, r1
 81017e8:	4614      	mov	r4, r2
 81017ea:	4605      	mov	r5, r0
 81017ec:	b118      	cbz	r0, 81017f6 <__swbuf_r+0x12>
 81017ee:	6a03      	ldr	r3, [r0, #32]
 81017f0:	b90b      	cbnz	r3, 81017f6 <__swbuf_r+0x12>
 81017f2:	f7ff fa7d 	bl	8100cf0 <__sinit>
 81017f6:	69a3      	ldr	r3, [r4, #24]
 81017f8:	60a3      	str	r3, [r4, #8]
 81017fa:	89a3      	ldrh	r3, [r4, #12]
 81017fc:	071a      	lsls	r2, r3, #28
 81017fe:	d525      	bpl.n	810184c <__swbuf_r+0x68>
 8101800:	6923      	ldr	r3, [r4, #16]
 8101802:	b31b      	cbz	r3, 810184c <__swbuf_r+0x68>
 8101804:	6823      	ldr	r3, [r4, #0]
 8101806:	6922      	ldr	r2, [r4, #16]
 8101808:	1a98      	subs	r0, r3, r2
 810180a:	6963      	ldr	r3, [r4, #20]
 810180c:	b2f6      	uxtb	r6, r6
 810180e:	4283      	cmp	r3, r0
 8101810:	4637      	mov	r7, r6
 8101812:	dc04      	bgt.n	810181e <__swbuf_r+0x3a>
 8101814:	4621      	mov	r1, r4
 8101816:	4628      	mov	r0, r5
 8101818:	f7ff ffbc 	bl	8101794 <_fflush_r>
 810181c:	b9e0      	cbnz	r0, 8101858 <__swbuf_r+0x74>
 810181e:	68a3      	ldr	r3, [r4, #8]
 8101820:	3b01      	subs	r3, #1
 8101822:	60a3      	str	r3, [r4, #8]
 8101824:	6823      	ldr	r3, [r4, #0]
 8101826:	1c5a      	adds	r2, r3, #1
 8101828:	6022      	str	r2, [r4, #0]
 810182a:	701e      	strb	r6, [r3, #0]
 810182c:	6962      	ldr	r2, [r4, #20]
 810182e:	1c43      	adds	r3, r0, #1
 8101830:	429a      	cmp	r2, r3
 8101832:	d004      	beq.n	810183e <__swbuf_r+0x5a>
 8101834:	89a3      	ldrh	r3, [r4, #12]
 8101836:	07db      	lsls	r3, r3, #31
 8101838:	d506      	bpl.n	8101848 <__swbuf_r+0x64>
 810183a:	2e0a      	cmp	r6, #10
 810183c:	d104      	bne.n	8101848 <__swbuf_r+0x64>
 810183e:	4621      	mov	r1, r4
 8101840:	4628      	mov	r0, r5
 8101842:	f7ff ffa7 	bl	8101794 <_fflush_r>
 8101846:	b938      	cbnz	r0, 8101858 <__swbuf_r+0x74>
 8101848:	4638      	mov	r0, r7
 810184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810184c:	4621      	mov	r1, r4
 810184e:	4628      	mov	r0, r5
 8101850:	f000 f806 	bl	8101860 <__swsetup_r>
 8101854:	2800      	cmp	r0, #0
 8101856:	d0d5      	beq.n	8101804 <__swbuf_r+0x20>
 8101858:	f04f 37ff 	mov.w	r7, #4294967295
 810185c:	e7f4      	b.n	8101848 <__swbuf_r+0x64>
	...

08101860 <__swsetup_r>:
 8101860:	b538      	push	{r3, r4, r5, lr}
 8101862:	4b2a      	ldr	r3, [pc, #168]	; (810190c <__swsetup_r+0xac>)
 8101864:	4605      	mov	r5, r0
 8101866:	6818      	ldr	r0, [r3, #0]
 8101868:	460c      	mov	r4, r1
 810186a:	b118      	cbz	r0, 8101874 <__swsetup_r+0x14>
 810186c:	6a03      	ldr	r3, [r0, #32]
 810186e:	b90b      	cbnz	r3, 8101874 <__swsetup_r+0x14>
 8101870:	f7ff fa3e 	bl	8100cf0 <__sinit>
 8101874:	89a3      	ldrh	r3, [r4, #12]
 8101876:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810187a:	0718      	lsls	r0, r3, #28
 810187c:	d422      	bmi.n	81018c4 <__swsetup_r+0x64>
 810187e:	06d9      	lsls	r1, r3, #27
 8101880:	d407      	bmi.n	8101892 <__swsetup_r+0x32>
 8101882:	2309      	movs	r3, #9
 8101884:	602b      	str	r3, [r5, #0]
 8101886:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810188a:	81a3      	strh	r3, [r4, #12]
 810188c:	f04f 30ff 	mov.w	r0, #4294967295
 8101890:	e034      	b.n	81018fc <__swsetup_r+0x9c>
 8101892:	0758      	lsls	r0, r3, #29
 8101894:	d512      	bpl.n	81018bc <__swsetup_r+0x5c>
 8101896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8101898:	b141      	cbz	r1, 81018ac <__swsetup_r+0x4c>
 810189a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810189e:	4299      	cmp	r1, r3
 81018a0:	d002      	beq.n	81018a8 <__swsetup_r+0x48>
 81018a2:	4628      	mov	r0, r5
 81018a4:	f7ff fb2c 	bl	8100f00 <_free_r>
 81018a8:	2300      	movs	r3, #0
 81018aa:	6363      	str	r3, [r4, #52]	; 0x34
 81018ac:	89a3      	ldrh	r3, [r4, #12]
 81018ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81018b2:	81a3      	strh	r3, [r4, #12]
 81018b4:	2300      	movs	r3, #0
 81018b6:	6063      	str	r3, [r4, #4]
 81018b8:	6923      	ldr	r3, [r4, #16]
 81018ba:	6023      	str	r3, [r4, #0]
 81018bc:	89a3      	ldrh	r3, [r4, #12]
 81018be:	f043 0308 	orr.w	r3, r3, #8
 81018c2:	81a3      	strh	r3, [r4, #12]
 81018c4:	6923      	ldr	r3, [r4, #16]
 81018c6:	b94b      	cbnz	r3, 81018dc <__swsetup_r+0x7c>
 81018c8:	89a3      	ldrh	r3, [r4, #12]
 81018ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 81018ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81018d2:	d003      	beq.n	81018dc <__swsetup_r+0x7c>
 81018d4:	4621      	mov	r1, r4
 81018d6:	4628      	mov	r0, r5
 81018d8:	f000 f850 	bl	810197c <__smakebuf_r>
 81018dc:	89a0      	ldrh	r0, [r4, #12]
 81018de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81018e2:	f010 0301 	ands.w	r3, r0, #1
 81018e6:	d00a      	beq.n	81018fe <__swsetup_r+0x9e>
 81018e8:	2300      	movs	r3, #0
 81018ea:	60a3      	str	r3, [r4, #8]
 81018ec:	6963      	ldr	r3, [r4, #20]
 81018ee:	425b      	negs	r3, r3
 81018f0:	61a3      	str	r3, [r4, #24]
 81018f2:	6923      	ldr	r3, [r4, #16]
 81018f4:	b943      	cbnz	r3, 8101908 <__swsetup_r+0xa8>
 81018f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81018fa:	d1c4      	bne.n	8101886 <__swsetup_r+0x26>
 81018fc:	bd38      	pop	{r3, r4, r5, pc}
 81018fe:	0781      	lsls	r1, r0, #30
 8101900:	bf58      	it	pl
 8101902:	6963      	ldrpl	r3, [r4, #20]
 8101904:	60a3      	str	r3, [r4, #8]
 8101906:	e7f4      	b.n	81018f2 <__swsetup_r+0x92>
 8101908:	2000      	movs	r0, #0
 810190a:	e7f7      	b.n	81018fc <__swsetup_r+0x9c>
 810190c:	10000058 	.word	0x10000058

08101910 <_sbrk_r>:
 8101910:	b538      	push	{r3, r4, r5, lr}
 8101912:	4d06      	ldr	r5, [pc, #24]	; (810192c <_sbrk_r+0x1c>)
 8101914:	2300      	movs	r3, #0
 8101916:	4604      	mov	r4, r0
 8101918:	4608      	mov	r0, r1
 810191a:	602b      	str	r3, [r5, #0]
 810191c:	f7ff f882 	bl	8100a24 <_sbrk>
 8101920:	1c43      	adds	r3, r0, #1
 8101922:	d102      	bne.n	810192a <_sbrk_r+0x1a>
 8101924:	682b      	ldr	r3, [r5, #0]
 8101926:	b103      	cbz	r3, 810192a <_sbrk_r+0x1a>
 8101928:	6023      	str	r3, [r4, #0]
 810192a:	bd38      	pop	{r3, r4, r5, pc}
 810192c:	100014b8 	.word	0x100014b8

08101930 <__swhatbuf_r>:
 8101930:	b570      	push	{r4, r5, r6, lr}
 8101932:	460c      	mov	r4, r1
 8101934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8101938:	2900      	cmp	r1, #0
 810193a:	b096      	sub	sp, #88	; 0x58
 810193c:	4615      	mov	r5, r2
 810193e:	461e      	mov	r6, r3
 8101940:	da0d      	bge.n	810195e <__swhatbuf_r+0x2e>
 8101942:	89a3      	ldrh	r3, [r4, #12]
 8101944:	f013 0f80 	tst.w	r3, #128	; 0x80
 8101948:	f04f 0100 	mov.w	r1, #0
 810194c:	bf0c      	ite	eq
 810194e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8101952:	2340      	movne	r3, #64	; 0x40
 8101954:	2000      	movs	r0, #0
 8101956:	6031      	str	r1, [r6, #0]
 8101958:	602b      	str	r3, [r5, #0]
 810195a:	b016      	add	sp, #88	; 0x58
 810195c:	bd70      	pop	{r4, r5, r6, pc}
 810195e:	466a      	mov	r2, sp
 8101960:	f000 f848 	bl	81019f4 <_fstat_r>
 8101964:	2800      	cmp	r0, #0
 8101966:	dbec      	blt.n	8101942 <__swhatbuf_r+0x12>
 8101968:	9901      	ldr	r1, [sp, #4]
 810196a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810196e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8101972:	4259      	negs	r1, r3
 8101974:	4159      	adcs	r1, r3
 8101976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810197a:	e7eb      	b.n	8101954 <__swhatbuf_r+0x24>

0810197c <__smakebuf_r>:
 810197c:	898b      	ldrh	r3, [r1, #12]
 810197e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8101980:	079d      	lsls	r5, r3, #30
 8101982:	4606      	mov	r6, r0
 8101984:	460c      	mov	r4, r1
 8101986:	d507      	bpl.n	8101998 <__smakebuf_r+0x1c>
 8101988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810198c:	6023      	str	r3, [r4, #0]
 810198e:	6123      	str	r3, [r4, #16]
 8101990:	2301      	movs	r3, #1
 8101992:	6163      	str	r3, [r4, #20]
 8101994:	b002      	add	sp, #8
 8101996:	bd70      	pop	{r4, r5, r6, pc}
 8101998:	ab01      	add	r3, sp, #4
 810199a:	466a      	mov	r2, sp
 810199c:	f7ff ffc8 	bl	8101930 <__swhatbuf_r>
 81019a0:	9900      	ldr	r1, [sp, #0]
 81019a2:	4605      	mov	r5, r0
 81019a4:	4630      	mov	r0, r6
 81019a6:	f7ff fb15 	bl	8100fd4 <_malloc_r>
 81019aa:	b948      	cbnz	r0, 81019c0 <__smakebuf_r+0x44>
 81019ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81019b0:	059a      	lsls	r2, r3, #22
 81019b2:	d4ef      	bmi.n	8101994 <__smakebuf_r+0x18>
 81019b4:	f023 0303 	bic.w	r3, r3, #3
 81019b8:	f043 0302 	orr.w	r3, r3, #2
 81019bc:	81a3      	strh	r3, [r4, #12]
 81019be:	e7e3      	b.n	8101988 <__smakebuf_r+0xc>
 81019c0:	89a3      	ldrh	r3, [r4, #12]
 81019c2:	6020      	str	r0, [r4, #0]
 81019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81019c8:	81a3      	strh	r3, [r4, #12]
 81019ca:	9b00      	ldr	r3, [sp, #0]
 81019cc:	6163      	str	r3, [r4, #20]
 81019ce:	9b01      	ldr	r3, [sp, #4]
 81019d0:	6120      	str	r0, [r4, #16]
 81019d2:	b15b      	cbz	r3, 81019ec <__smakebuf_r+0x70>
 81019d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81019d8:	4630      	mov	r0, r6
 81019da:	f000 f81d 	bl	8101a18 <_isatty_r>
 81019de:	b128      	cbz	r0, 81019ec <__smakebuf_r+0x70>
 81019e0:	89a3      	ldrh	r3, [r4, #12]
 81019e2:	f023 0303 	bic.w	r3, r3, #3
 81019e6:	f043 0301 	orr.w	r3, r3, #1
 81019ea:	81a3      	strh	r3, [r4, #12]
 81019ec:	89a3      	ldrh	r3, [r4, #12]
 81019ee:	431d      	orrs	r5, r3
 81019f0:	81a5      	strh	r5, [r4, #12]
 81019f2:	e7cf      	b.n	8101994 <__smakebuf_r+0x18>

081019f4 <_fstat_r>:
 81019f4:	b538      	push	{r3, r4, r5, lr}
 81019f6:	4d07      	ldr	r5, [pc, #28]	; (8101a14 <_fstat_r+0x20>)
 81019f8:	2300      	movs	r3, #0
 81019fa:	4604      	mov	r4, r0
 81019fc:	4608      	mov	r0, r1
 81019fe:	4611      	mov	r1, r2
 8101a00:	602b      	str	r3, [r5, #0]
 8101a02:	f7fe ffe9 	bl	81009d8 <_fstat>
 8101a06:	1c43      	adds	r3, r0, #1
 8101a08:	d102      	bne.n	8101a10 <_fstat_r+0x1c>
 8101a0a:	682b      	ldr	r3, [r5, #0]
 8101a0c:	b103      	cbz	r3, 8101a10 <_fstat_r+0x1c>
 8101a0e:	6023      	str	r3, [r4, #0]
 8101a10:	bd38      	pop	{r3, r4, r5, pc}
 8101a12:	bf00      	nop
 8101a14:	100014b8 	.word	0x100014b8

08101a18 <_isatty_r>:
 8101a18:	b538      	push	{r3, r4, r5, lr}
 8101a1a:	4d06      	ldr	r5, [pc, #24]	; (8101a34 <_isatty_r+0x1c>)
 8101a1c:	2300      	movs	r3, #0
 8101a1e:	4604      	mov	r4, r0
 8101a20:	4608      	mov	r0, r1
 8101a22:	602b      	str	r3, [r5, #0]
 8101a24:	f7fe ffe7 	bl	81009f6 <_isatty>
 8101a28:	1c43      	adds	r3, r0, #1
 8101a2a:	d102      	bne.n	8101a32 <_isatty_r+0x1a>
 8101a2c:	682b      	ldr	r3, [r5, #0]
 8101a2e:	b103      	cbz	r3, 8101a32 <_isatty_r+0x1a>
 8101a30:	6023      	str	r3, [r4, #0]
 8101a32:	bd38      	pop	{r3, r4, r5, pc}
 8101a34:	100014b8 	.word	0x100014b8

08101a38 <_init>:
 8101a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101a3a:	bf00      	nop
 8101a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101a3e:	bc08      	pop	{r3}
 8101a40:	469e      	mov	lr, r3
 8101a42:	4770      	bx	lr

08101a44 <_fini>:
 8101a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101a46:	bf00      	nop
 8101a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101a4a:	bc08      	pop	{r3}
 8101a4c:	469e      	mov	lr, r3
 8101a4e:	4770      	bx	lr
